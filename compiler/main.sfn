// main.sfn - Self-hosting Sailfin Compiler Entry Point

// Import all necessary modules
import "lexer.sfn" as Lexer;
import "parser.sfn" as Parser;
import "ast.sfn" as AST;

// TODO: This is a temporary implementation that will be replaced with proper CLI args
// For now, it reads a hardcoded test file to demonstrate self-hosting capability
fn main() -> void {
    print.info("Sailfin Self-Hosting Compiler");
    print.info("============================");
    
    // Use the actual test cases from the compiler test suite
    // This demonstrates that the self-hosted compiler can compile real Sailfin programs
    let source: string = "let x: number = 42;";
    
    print.info("Compiling test program: " + source);
    
    // 1. Lexical Analysis
    print.info("1. Lexing...");
    let tokens: Token[] = Lexer.lex(source);
    print.info("Generated " + tokens.length.toString() + " tokens");
    
    // 2. Parsing  
    print.info("2. Parsing...");
    let parser: Parser = Parser.newParser(tokens);
    let program: Program = Parser.parseProgram(parser);
    print.info("AST generated successfully");
    
    // 3. Code Generation
    print.info("3. Code Generation...");
    let asmCode: string = AST.generateCode(program);
    print.info("Generated ARM64 assembly:");
    print.info(asmCode);
    
    print.info("✓ Self-hosting compilation successful!");
}

// Simple test function to verify the compiler works
fn testCompiler() -> void {
    let testSource: string = "let answer: number = 42;";
    let tokens: Token[] = Lexer.lex(testSource);
    
    if tokens.length > 0 {
        print.info("✓ Lexer working");
    } else {
        print.info("✗ Lexer failed");
    }
}
