from __future__ import annotations

# Module Lexer loaded from ../../lexer.sfn
# Import module Lexer from ../../lexer.sfn
_module_globals_before_Lexer = set(globals().keys())
import base64
_module_code_Lexer = base64.b64decode('').decode('utf-8')
exec(compile(_module_code_Lexer, '<module_Lexer>', 'exec'), globals())
_module_globals_after_Lexer = set(globals().keys())
_module_exports_Lexer = {k: globals()[k] for k in _module_globals_after_Lexer - _module_globals_before_Lexer if not k.startswith('_')}
class Lexer:
    pass
for _k, _v in _module_exports_Lexer.items():
    setattr(Lexer, _k, _v)
del _module_code_Lexer  # Clean up the embedded code
def main() -> None:
    print("Testing import...")
    print("Import test complete")


if __name__ == "__main__":
    main()