name: Compiler Build and Publish

on:
  push:
    branches:
      - main
      - beta # Include beta branch if needed

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for semantic-release to access full git history

      # 2. Set up Python
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      # 3. Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Correctly append to PATH

      # 4. Configure Poetry to not create a virtual environment
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false

      # 5. Cache Poetry Dependencies
      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml', '**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # 6. Install Dependencies
      - name: Install Dependencies
        run: |
          poetry install --no-interaction --no-ansi

      # 7. Build the Executable with PyInstaller
      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --onefile --name sfn bootstrap.py
        # This will create the executable in the `bootstrap/dist/` directory

      # 8. Prepare Package Metadata (Optional: Can be handled by semantic-release)
      - name: Prepare Package Metadata
        id: package_metadata
        run: |
          VERSION=$(poetry version -s)
          PACKAGE_NAME="sfn" # Changed from "bootstrap" to "sfn"
          PACKAGE_VERSION="$VERSION"
          PACKAGE_FILENAME="dist/sfn"
          PACKAGE_CONTENT_TYPE="application/octet-stream"  # Generic binary
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "filename=$PACKAGE_FILENAME" >> $GITHUB_OUTPUT

      # 9. Semantic Release
      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run semantic-release publish
