name: Sailfin Self-Hosting Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  # Build Self-Hosting Compiler for Release
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
          - os: macos-latest
            platform: macos-x64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false
        working-directory: bootstrap

      - name: Install Dependencies
        run: |
          poetry install --no-interaction --no-ansi
        working-directory: bootstrap

      - name: Build Self-Hosting Compiler
        run: |
          chmod +x build-self-hosting-new.sh
          ./build-self-hosting-new.sh build

      - name: Create Platform-Specific Release Package
        run: |
          # Create release directory structure
          mkdir -p release/sailfin-${{ matrix.platform }}

          # Copy compiler
          cp build/sfn release/sailfin-${{ matrix.platform }}/
          cp build/sfn_compiler.py release/sailfin-${{ matrix.platform }}/

          # Copy documentation and examples
          cp README.md release/sailfin-${{ matrix.platform }}/
          cp -r docs release/sailfin-${{ matrix.platform }}/ 2>/dev/null || true
          cp -r examples release/sailfin-${{ matrix.platform }}/

          # Create install script
          cat > release/sailfin-${{ matrix.platform }}/install.sh << 'EOF'
          #!/bin/bash
          # Sailfin Self-Hosting Compiler Installer
          set -e

          echo "🚢 Installing Sailfin Self-Hosting Compiler..."

          # Determine install location
          if [ -w "/usr/local/bin" ]; then
              INSTALL_DIR="/usr/local/bin"
          else
              INSTALL_DIR="$HOME/.local/bin"
              mkdir -p "$INSTALL_DIR"
          fi

          # Copy files
          cp sfn "$INSTALL_DIR/"
          cp sfn_compiler.py "$INSTALL_DIR/"

          echo "✅ Sailfin installed to $INSTALL_DIR"

          # Check if directory is in PATH
          if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]] && [ "$INSTALL_DIR" != "/usr/local/bin" ]; then
              echo ""
              echo "⚠️  Note: Add $INSTALL_DIR to your PATH:"
              echo "   export PATH=\"$INSTALL_DIR:\$PATH\""
              echo "   (Add this to your ~/.bashrc, ~/.zshrc, etc.)"
          fi

          echo ""
          echo "🎉 Sailfin is ready to use!"
          echo "   Try: sfn --help"
          echo "   Example: sfn examples/basics/hello-world.sfn"
          EOF

          chmod +x release/sailfin-${{ matrix.platform }}/install.sh

          # Create VERSION file
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "${{ github.event.inputs.version }}" > release/sailfin-${{ matrix.platform }}/VERSION
          else
            echo "${GITHUB_REF#refs/tags/}" > release/sailfin-${{ matrix.platform }}/VERSION
          fi

      - name: Create Tarball
        run: |
          cd release
          tar -czf sailfin-${{ matrix.platform }}.tar.gz sailfin-${{ matrix.platform }}
          cd ..

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sailfin-${{ matrix.platform }}
          path: release/sailfin-${{ matrix.platform }}.tar.gz
          retention-days: 30

  # Create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    needs: build-release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # Sailfin ${{ steps.version.outputs.version }} - Self-Hosting Release! 🚢

          ## 🎉 Major Milestone: Full Self-Hosting Capability

          This release marks a historic achievement for Sailfin - **the compiler can now compile itself!**

          ### ✨ What's New

          - 🚀 **Self-Hosting Compiler**: Sailfin compiler written in Sailfin compiles itself
          - ⚡ **Native Binary**: No Python dependencies required for end users
          - 🔧 **Improved Performance**: Self-hosting compiler optimizations
          - 📦 **Easy Installation**: Single binary with install script
          - 🧪 **69 Working Examples**: All examples tested and verified

          ### 🛠️ Technical Achievements

          - **Bootstrap to Self-Hosting Pipeline**: Complete transition from Python bootstrap
          - **ARM64 Code Generation**: Native assembly output for Apple Silicon
          - **Module System**: Working import/export functionality
          - **Type Safety**: Static type checking with inference

          ## 📦 Installation

          ### Quick Install (Recommended)
          \`\`\`bash
          curl -sSL https://github.com/sailfin/sailfin/releases/download/${{ steps.version.outputs.version }}/install.sh | bash
          \`\`\`

          ### Manual Installation
          1. Download the appropriate package for your platform below
          2. Extract: \`tar -xzf sailfin-*.tar.gz\`
          3. Run: \`cd sailfin-*/ && ./install.sh\`

          ### Using the Compiler
          \`\`\`bash
          # Compile and run a Sailfin program
          sfn hello.sfn

          # See help
          sfn --help
          \`\`\`

          ## 🔍 What's Included

          - **sfn**: Self-hosting Sailfin compiler binary
          - **examples/**: 69 working example programs
          - **docs/**: Complete language documentation
          - **install.sh**: Automatic installation script

          ## 🧪 Example Programs

          Try these examples to get started:
          - \`sfn examples/basics/hello-world.sfn\`
          - \`sfn examples/advanced/web-server-with-concurrency.sfn\`
          - \`sfn examples/algorithms/quicksort.sfn\`

          ## 🎯 Self-Hosting Verification

          You can verify the self-hosting capability:
          \`\`\`bash
          # The compiler can compile itself!
          sfn compiler/compiler.sfn > new_compiler.py
          \`\`\`

          ---

          **🚀 Sailfin has achieved full self-hosting! This is a major milestone demonstrating the language's maturity and capability.**
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Sailfin ${{ steps.version.outputs.version }} - Self-Hosting Release
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Upload Linux Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sailfin-linux-x64/sailfin-linux-x64.tar.gz
          asset_name: sailfin-linux-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/sailfin-macos-x64/sailfin-macos-x64.tar.gz
          asset_name: sailfin-macos-x64.tar.gz
          asset_content_type: application/gzip

      - name: Create Universal Install Script
        run: |
          cat > universal_install.sh << 'EOF'
          #!/bin/bash
          # Universal Sailfin Self-Hosting Compiler Installer
          set -e

          echo "🚢 Installing Sailfin Self-Hosting Compiler..."

          # Detect platform
          OS="$(uname -s)"
          ARCH="$(uname -m)"

          case "$OS" in
              Linux*)     PLATFORM="linux-x64";;
              Darwin*)    PLATFORM="macos-x64";;
              *)          echo "❌ Unsupported OS: $OS"; exit 1;;
          esac

          VERSION="${{ steps.version.outputs.version }}"
          DOWNLOAD_URL="https://github.com/sailfin/sailfin/releases/download/$VERSION/sailfin-$PLATFORM.tar.gz"

          echo "📥 Downloading Sailfin for $PLATFORM..."
          curl -L "$DOWNLOAD_URL" -o sailfin.tar.gz

          echo "📦 Extracting..."
          tar -xzf sailfin.tar.gz

          echo "🔧 Installing..."
          cd sailfin-$PLATFORM
          ./install.sh

          echo "🧹 Cleaning up..."
          cd ..
          rm -rf sailfin.tar.gz sailfin-$PLATFORM

          echo ""
          echo "🎉 Sailfin installed successfully!"
          echo "   Try: sfn --help"
          EOF

          chmod +x universal_install.sh

      - name: Upload Universal Install Script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: universal_install.sh
          asset_name: install.sh
          asset_content_type: application/x-sh

  # Update Documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update README with Release Info
        run: |
          # Update README.md with latest release information
          sed -i 's|curl -sSL https://raw.githubusercontent.com/sailfin/sailfin/main/install.sh|curl -sSL https://github.com/sailfin/sailfin/releases/download/${{ steps.version.outputs.version }}/install.sh|g' README.md

          echo "Updated README.md with latest release information"

      - name: Commit and Push Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update README with release ${{ steps.version.outputs.version }}" || exit 0
          git push
