Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> program_items
Rule 2     program_items -> program_items program_item
Rule 3     program_items -> program_item
Rule 4     program_item -> import_statement
Rule 5     program_item -> declaration
Rule 6     import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON
Rule 7     import_list_opt -> import_list
Rule 8     import_list_opt -> empty
Rule 9     import_list -> import_list COMMA IDENTIFIER
Rule 10    import_list -> IDENTIFIER
Rule 11    decorator_list -> decorator_list decorator
Rule 12    decorator_list -> decorator
Rule 13    decorator_list_opt -> decorator_list
Rule 14    decorator_list_opt -> empty
Rule 15    decorator -> AT qualified_name decorator_args_opt
Rule 16    decorator_args_opt -> LPAREN argument_list_opt RPAREN
Rule 17    decorator_args_opt -> empty
Rule 18    argument_list_opt -> argument_list
Rule 19    argument_list_opt -> empty
Rule 20    argument_list -> argument_list COMMA expression
Rule 21    argument_list -> expression
Rule 22    async_opt -> ASYNC
Rule 23    async_opt -> empty
Rule 24    type_parameters_opt -> LT type_parameter_list GT
Rule 25    type_parameters_opt -> empty
Rule 26    type_parameter_list -> type_parameter_list COMMA type_parameter
Rule 27    type_parameter_list -> type_parameter
Rule 28    type_parameter -> IDENTIFIER
Rule 29    type_parameter -> IDENTIFIER EXTENDS type
Rule 30    declaration -> function_declaration
Rule 31    declaration -> struct_declaration
Rule 32    declaration -> enum_declaration
Rule 33    declaration -> interface_declaration
Rule 34    declaration -> type_alias_declaration
Rule 35    declaration -> constant_declaration
Rule 36    declaration -> variable_declaration
Rule 37    declaration -> test_declaration
Rule 38    function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
Rule 39    parameter_list_opt -> parameter_list
Rule 40    parameter_list_opt -> empty
Rule 41    parameter_list -> parameter_list COMMA parameter
Rule 42    parameter_list -> parameter
Rule 43    parameter -> IDENTIFIER parameter_type_opt parameter_default_opt
Rule 44    parameter_type_opt -> ARROW type
Rule 45    parameter_type_opt -> empty
Rule 46    parameter_default_opt -> ASSIGN expression
Rule 47    parameter_default_opt -> empty
Rule 48    return_type_opt -> ARROW type
Rule 49    return_type_opt -> empty
Rule 50    type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
Rule 51    struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
Rule 52    implements_opt -> IMPLEMENTS type_list
Rule 53    implements_opt -> empty
Rule 54    struct_member_list_opt -> struct_member_list
Rule 55    struct_member_list_opt -> empty
Rule 56    struct_member_list -> struct_member_list struct_member
Rule 57    struct_member_list -> struct_member
Rule 58    struct_member -> field_declaration
Rule 59    struct_member -> method_declaration
Rule 60    field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON
Rule 61    field_declaration -> IDENTIFIER ARROW type SEMICOLON
Rule 62    method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
Rule 63    enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
Rule 64    enum_variant_list_opt -> enum_variant_list maybe_trailing_comma
Rule 65    enum_variant_list_opt -> empty
Rule 66    enum_variant_list -> enum_variant_list COMMA enum_variant
Rule 67    enum_variant_list -> enum_variant
Rule 68    enum_variant -> IDENTIFIER LBRACE enum_variant_fields_opt RBRACE
Rule 69    enum_variant -> IDENTIFIER
Rule 70    enum_variant_fields_opt -> enum_variant_fields
Rule 71    enum_variant_fields_opt -> empty
Rule 72    enum_variant_fields -> enum_variant_fields field_declaration
Rule 73    enum_variant_fields -> field_declaration
Rule 74    interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
Rule 75    interface_member_list_opt -> interface_member_list
Rule 76    interface_member_list_opt -> empty
Rule 77    interface_member_list -> interface_member_list interface_member
Rule 78    interface_member_list -> interface_member
Rule 79    interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON
Rule 80    constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
Rule 81    variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
Rule 82    mut_opt -> MUT
Rule 83    mut_opt -> empty
Rule 84    type_annotation_opt -> ARROW type
Rule 85    type_annotation_opt -> empty
Rule 86    initializer_opt -> ASSIGN expression
Rule 87    initializer_opt -> empty
Rule 88    test_declaration -> TEST STRING block
Rule 89    maybe_trailing_comma -> COMMA
Rule 90    maybe_trailing_comma -> empty
Rule 91    block -> LBRACE statement_list_opt RBRACE
Rule 92    statement_list_opt -> statement_list
Rule 93    statement_list_opt -> empty
Rule 94    statement_list -> statement_list statement
Rule 95    statement_list -> statement
Rule 96    statement -> variable_declaration
Rule 97    statement -> constant_declaration
Rule 98    statement -> function_declaration
Rule 99    statement -> struct_declaration
Rule 100   statement -> enum_declaration
Rule 101   statement -> interface_declaration
Rule 102   statement -> type_alias_declaration
Rule 103   statement -> test_declaration
Rule 104   statement -> if_statement
Rule 105   statement -> match_statement
Rule 106   statement -> match_case_statement
Rule 107   statement -> for_statement
Rule 108   statement -> while_statement
Rule 109   statement -> loop_statement
Rule 110   statement -> break_statement
Rule 111   statement -> continue_statement
Rule 112   statement -> return_statement
Rule 113   statement -> try_statement
Rule 114   statement -> throw_statement
Rule 115   statement -> assert_statement
Rule 116   statement -> routine_statement
Rule 117   statement -> expression_statement
Rule 118   expression_statement -> expression SEMICOLON
Rule 119   if_statement -> IF condition block else_clause_opt
Rule 120   condition -> LPAREN expression RPAREN
Rule 121   condition -> expression
Rule 122   else_clause_opt -> ELSE if_statement
Rule 123   else_clause_opt -> ELSE block
Rule 124   else_clause_opt -> empty
Rule 125   match_statement -> MATCH expression match_block
Rule 126   match_block -> LBRACE match_case_list RBRACE
Rule 127   match_case_list -> CASE match_case_body match_case_list_tail
Rule 128   match_case_list_tail -> COMMA CASE match_case_body match_case_list_tail
Rule 129   match_case_list_tail -> COMMA
Rule 130   match_case_list_tail -> empty
Rule 131   match_case_body -> pattern match_guard_opt match_arrow match_body
Rule 132   match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma
Rule 133   optional_comma -> COMMA
Rule 134   optional_comma -> empty
Rule 135   match_arrow -> FATARROW
Rule 136   match_arrow -> ARROW
Rule 137   primary_expression -> MATCH expression match_block
Rule 138   match_guard_opt -> IF expression
Rule 139   match_guard_opt -> empty
Rule 140   match_body -> block
Rule 141   match_body -> expression
Rule 142   for_statement -> FOR pattern IN expression block
Rule 143   while_statement -> WHILE condition block
Rule 144   loop_statement -> LOOP block
Rule 145   break_statement -> BREAK SEMICOLON
Rule 146   continue_statement -> CONTINUE SEMICOLON
Rule 147   return_statement -> RETURN expression SEMICOLON
Rule 148   return_statement -> RETURN SEMICOLON
Rule 149   try_statement -> TRY block catch_clause finally_clause_opt
Rule 150   catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block
Rule 151   catch_clause -> empty
Rule 152   catch_as_opt -> AS pattern
Rule 153   catch_as_opt -> empty
Rule 154   finally_clause_opt -> FINALLY block
Rule 155   finally_clause_opt -> empty
Rule 156   throw_statement -> THROW expression SEMICOLON
Rule 157   assert_statement -> ASSERT expression SEMICOLON
Rule 158   routine_statement -> ROUTINE routine_name_opt block
Rule 159   routine_name_opt -> STRING
Rule 160   routine_name_opt -> empty
Rule 161   expression -> assignment_expression
Rule 162   assignment_expression -> range_expression
Rule 163   assignment_expression -> postfix_expression assignment_operator assignment_expression
Rule 164   assignment_operator -> ASSIGN
Rule 165   assignment_operator -> PLUS_ASSIGN
Rule 166   assignment_operator -> MINUS_ASSIGN
Rule 167   assignment_operator -> MULTIPLY_ASSIGN
Rule 168   assignment_operator -> DIVIDE_ASSIGN
Rule 169   assignment_operator -> MODULO_ASSIGN
Rule 170   range_expression -> logical_or_expression RANGE logical_or_expression
Rule 171   range_expression -> logical_or_expression
Rule 172   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 173   logical_or_expression -> logical_and_expression
Rule 174   logical_and_expression -> logical_and_expression AND equality_expression
Rule 175   logical_and_expression -> equality_expression
Rule 176   equality_expression -> equality_expression EQ relational_expression
Rule 177   equality_expression -> equality_expression NEQ relational_expression
Rule 178   equality_expression -> relational_expression
Rule 179   relational_expression -> relational_expression LT additive_expression
Rule 180   relational_expression -> relational_expression GT additive_expression
Rule 181   relational_expression -> relational_expression LEQ additive_expression
Rule 182   relational_expression -> relational_expression GEQ additive_expression
Rule 183   relational_expression -> additive_expression IS type
Rule 184   relational_expression -> additive_expression
Rule 185   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 186   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 187   additive_expression -> multiplicative_expression
Rule 188   multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression
Rule 189   multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 190   multiplicative_expression -> multiplicative_expression MODULO unary_expression
Rule 191   multiplicative_expression -> unary_expression
Rule 192   unary_expression -> NOT unary_expression
Rule 193   unary_expression -> MINUS unary_expression
Rule 194   unary_expression -> AWAIT unary_expression
Rule 195   unary_expression -> postfix_expression
Rule 196   postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN
Rule 197   postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 198   postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 199   postfix_expression -> primary_expression
Rule 200   primary_expression -> NUMBER
Rule 201   primary_expression -> STRING
Rule 202   primary_expression -> TRUE
Rule 203   primary_expression -> FALSE
Rule 204   primary_expression -> NULL
Rule 205   primary_expression -> IDENTIFIER
Rule 206   primary_expression -> LPAREN expression RPAREN
Rule 207   primary_expression -> LBRACKET expression_list_opt RBRACKET
Rule 208   expression_list_opt -> expression_list
Rule 209   expression_list_opt -> empty
Rule 210   expression_list -> expression_list COMMA expression
Rule 211   expression_list -> expression
Rule 212   primary_expression -> LBRACE object_field_list_opt RBRACE
Rule 213   primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE
Rule 214   object_field_list_opt -> object_field_list maybe_trailing_comma
Rule 215   object_field_list_opt -> empty
Rule 216   object_field_list -> object_field_list COMMA object_field
Rule 217   object_field_list -> object_field
Rule 218   object_field -> IDENTIFIER COLON expression
Rule 219   primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block
Rule 220   primary_expression -> ASYNC block
Rule 221   primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET
Rule 222   type -> union_type
Rule 223   union_type -> intersection_type
Rule 224   union_type -> union_type PIPE intersection_type
Rule 225   intersection_type -> primary_type
Rule 226   intersection_type -> intersection_type AMPERSAND primary_type
Rule 227   primary_type -> qualified_name type_arguments_opt
Rule 228   primary_type -> primary_type LBRACKET RBRACKET
Rule 229   primary_type -> LBRACKET type_list RBRACKET
Rule 230   primary_type -> primary_type QUESTION
Rule 231   primary_type -> LPAREN type RPAREN
Rule 232   type_arguments_opt -> LT type_list GT
Rule 233   type_arguments_opt -> empty
Rule 234   type_list -> type_list COMMA type
Rule 235   type_list -> type
Rule 236   pattern -> IDENTIFIER
Rule 237   pattern -> NUMBER
Rule 238   pattern -> STRING
Rule 239   pattern -> TRUE
Rule 240   pattern -> FALSE
Rule 241   pattern -> NULL
Rule 242   pattern -> MINUS NUMBER
Rule 243   pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE
Rule 244   pattern_field_list_opt -> pattern_field_list maybe_trailing_comma
Rule 245   pattern_field_list_opt -> empty
Rule 246   pattern_field_list -> pattern_field_list COMMA pattern_field
Rule 247   pattern_field_list -> pattern_field
Rule 248   pattern_field -> IDENTIFIER COLON pattern
Rule 249   pattern_field -> IDENTIFIER
Rule 250   qualified_name -> IDENTIFIER
Rule 251   qualified_name -> qualified_name DOT IDENTIFIER
Rule 252   empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 226
AND                  : 174
ARROW                : 44 48 60 61 79 84 136
AS                   : 152
ASSERT               : 157
ASSIGN               : 46 50 80 86 164
ASYNC                : 22 220
AT                   : 15
AWAIT                : 194
BREAK                : 145
CASE                 : 127 128 132
CATCH                : 150
COLON                : 218 248
COMMA                : 9 20 26 41 66 89 128 129 133 210 216 234 246
CONST                : 80
CONTINUE             : 146
DIVIDE               : 189
DIVIDE_ASSIGN        : 168
DOT                  : 197 251
ELSE                 : 122 123
ENUM                 : 63
EQ                   : 176
EXTENDS              : 29
FALSE                : 203 240
FATARROW             : 135
FINALLY              : 154
FN                   : 38 62 79 219
FOR                  : 142
FROM                 : 6
GEQ                  : 182
GT                   : 24 180 232
IDENTIFIER           : 9 10 28 29 38 43 50 51 60 61 62 63 68 69 74 79 80 81 150 197 205 213 218 236 248 249 250 251
IF                   : 119 138
IMPLEMENTS           : 52
IMPORT               : 6
IN                   : 142
INTERFACE            : 74
IS                   : 183
LBRACE               : 6 51 63 68 74 91 126 212 213 243
LBRACKET             : 198 207 221 228 229
LEQ                  : 181
LET                  : 81
LOOP                 : 144
LPAREN               : 16 38 62 79 120 150 196 206 219 231
LT                   : 24 179 232
MATCH                : 125 137
MINUS                : 186 193 242
MINUS_ASSIGN         : 166
MODULO               : 190
MODULO_ASSIGN        : 169
MULTIPLY             : 188
MULTIPLY_ASSIGN      : 167
MUT                  : 60 82
NEQ                  : 177
NOT                  : 192
NULL                 : 204 241
NUMBER               : 200 237 242
OR                   : 172
PARALLEL             : 221
PIPE                 : 224
PLUS                 : 185
PLUS_ASSIGN          : 165
QUESTION             : 230
RANGE                : 170
RBRACE               : 6 51 63 68 74 91 126 212 213 243
RBRACKET             : 198 207 221 228 229
RETURN               : 147 148
ROUTINE              : 158
RPAREN               : 16 38 62 79 120 150 196 206 219 231
SEMICOLON            : 6 50 60 61 79 80 81 118 145 146 147 148 156 157
STRING               : 6 88 159 201 238
STRUCT               : 51
TEST                 : 88
THROW                : 156
TRUE                 : 202 239
TRY                  : 149
TYPE                 : 50
WHILE                : 143
error                : 

Nonterminals, with rules where they appear

additive_expression  : 179 180 181 182 183 184 185 186
argument_list        : 18 20
argument_list_opt    : 16 196 221
assert_statement     : 115
assignment_expression : 161 163
assignment_operator  : 163
async_opt            : 38 62
block                : 38 62 88 119 123 140 142 143 144 149 150 154 158 219 220
break_statement      : 110
catch_as_opt         : 150
catch_clause         : 149
condition            : 119 143
constant_declaration : 35 97
continue_statement   : 111
declaration          : 5
decorator            : 11 12
decorator_args_opt   : 15
decorator_list       : 11 13
decorator_list_opt   : 38 62
else_clause_opt      : 119
empty                : 8 14 17 19 23 25 40 45 47 49 53 55 65 71 76 83 85 87 90 93 124 130 134 139 151 153 155 160 209 215 233 245
enum_declaration     : 32 100
enum_variant         : 66 67
enum_variant_fields  : 70 72
enum_variant_fields_opt : 68
enum_variant_list    : 64 66
enum_variant_list_opt : 63
equality_expression  : 174 175 176 177
expression           : 20 21 46 80 86 118 120 121 125 137 138 141 142 147 156 157 198 206 210 211 218
expression_list      : 208 210
expression_list_opt  : 207
expression_statement : 117
field_declaration    : 58 72 73
finally_clause_opt   : 149
for_statement        : 107
function_declaration : 30 98
if_statement         : 104 122
implements_opt       : 51
import_list          : 7 9
import_list_opt      : 6
import_statement     : 4
initializer_opt      : 81
interface_declaration : 33 101
interface_member     : 77 78
interface_member_list : 75 77
interface_member_list_opt : 74
intersection_type    : 223 224 226
logical_and_expression : 172 173 174
logical_or_expression : 170 170 171 172
loop_statement       : 109
match_arrow          : 131 132
match_block          : 125 137
match_body           : 131 132
match_case_body      : 127 128
match_case_list      : 126
match_case_list_tail : 127 128
match_case_statement : 106
match_guard_opt      : 131 132
match_statement      : 105
maybe_trailing_comma : 64 214 244
method_declaration   : 59
multiplicative_expression : 185 186 187 188 189 190
mut_opt              : 81
object_field         : 216 217
object_field_list    : 214 216
object_field_list_opt : 212 213
optional_comma       : 132
parameter            : 41 42
parameter_default_opt : 43
parameter_list       : 39 41
parameter_list_opt   : 38 62 79 219
parameter_type_opt   : 43
pattern              : 131 132 142 152 248
pattern_field        : 246 247
pattern_field_list   : 244 246
pattern_field_list_opt : 243
postfix_expression   : 163 195 196 197 198
primary_expression   : 199
primary_type         : 225 226 228 230
program              : 0
program_item         : 2 3
program_items        : 1 2
qualified_name       : 15 227 243 251
range_expression     : 162
relational_expression : 176 177 178 179 180 181 182
return_statement     : 112
return_type_opt      : 38 62 219
routine_name_opt     : 158
routine_statement    : 116
statement            : 94 95
statement_list       : 92 94
statement_list_opt   : 91
struct_declaration   : 31 99
struct_member        : 56 57
struct_member_list   : 54 56
struct_member_list_opt : 51
test_declaration     : 37 103
throw_statement      : 114
try_statement        : 113
type                 : 29 44 48 50 60 61 79 84 183 231 234 235
type_alias_declaration : 34 102
type_annotation_opt  : 80 81
type_arguments_opt   : 227
type_list            : 52 229 232 234
type_parameter       : 26 27
type_parameter_list  : 24 26
type_parameters_opt  : 38 50 51 62 63 74
unary_expression     : 188 189 190 191 192 193 194
union_type           : 222 224
variable_declaration : 36 96
while_statement      : 108

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program_items
    (2) program_items -> . program_items program_item
    (3) program_items -> . program_item
    (4) program_item -> . import_statement
    (5) program_item -> . declaration
    (6) import_statement -> . IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON
    (30) declaration -> . function_declaration
    (31) declaration -> . struct_declaration
    (32) declaration -> . enum_declaration
    (33) declaration -> . interface_declaration
    (34) declaration -> . type_alias_declaration
    (35) declaration -> . constant_declaration
    (36) declaration -> . variable_declaration
    (37) declaration -> . test_declaration
    (38) function_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (51) struct_declaration -> . STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (63) enum_declaration -> . ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (74) interface_declaration -> . INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (50) type_alias_declaration -> . TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
    (80) constant_declaration -> . CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
    (81) variable_declaration -> . LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (88) test_declaration -> . TEST STRING block
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (252) empty -> .
    (15) decorator -> . AT qualified_name decorator_args_opt

    IMPORT          shift and go to state 6
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    INTERFACE       shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    LET             shift and go to state 21
    TEST            shift and go to state 22
    ASYNC           reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    AT              shift and go to state 26

    program                        shift and go to state 1
    program_items                  shift and go to state 2
    program_item                   shift and go to state 3
    import_statement               shift and go to state 4
    declaration                    shift and go to state 5
    function_declaration           shift and go to state 7
    struct_declaration             shift and go to state 8
    enum_declaration               shift and go to state 9
    interface_declaration          shift and go to state 10
    type_alias_declaration         shift and go to state 11
    constant_declaration           shift and go to state 12
    variable_declaration           shift and go to state 13
    test_declaration               shift and go to state 14
    decorator_list_opt             shift and go to state 15
    decorator_list                 shift and go to state 23
    empty                          shift and go to state 24
    decorator                      shift and go to state 25

state 1

    (0) S' -> program .



state 2

    (1) program -> program_items .
    (2) program_items -> program_items . program_item
    (4) program_item -> . import_statement
    (5) program_item -> . declaration
    (6) import_statement -> . IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON
    (30) declaration -> . function_declaration
    (31) declaration -> . struct_declaration
    (32) declaration -> . enum_declaration
    (33) declaration -> . interface_declaration
    (34) declaration -> . type_alias_declaration
    (35) declaration -> . constant_declaration
    (36) declaration -> . variable_declaration
    (37) declaration -> . test_declaration
    (38) function_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (51) struct_declaration -> . STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (63) enum_declaration -> . ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (74) interface_declaration -> . INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (50) type_alias_declaration -> . TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
    (80) constant_declaration -> . CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
    (81) variable_declaration -> . LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (88) test_declaration -> . TEST STRING block
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (252) empty -> .
    (15) decorator -> . AT qualified_name decorator_args_opt

    $end            reduce using rule 1 (program -> program_items .)
    IMPORT          shift and go to state 6
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    INTERFACE       shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    LET             shift and go to state 21
    TEST            shift and go to state 22
    ASYNC           reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    AT              shift and go to state 26

    program_item                   shift and go to state 27
    import_statement               shift and go to state 4
    declaration                    shift and go to state 5
    function_declaration           shift and go to state 7
    struct_declaration             shift and go to state 8
    enum_declaration               shift and go to state 9
    interface_declaration          shift and go to state 10
    type_alias_declaration         shift and go to state 11
    constant_declaration           shift and go to state 12
    variable_declaration           shift and go to state 13
    test_declaration               shift and go to state 14
    decorator_list_opt             shift and go to state 15
    decorator_list                 shift and go to state 23
    empty                          shift and go to state 24
    decorator                      shift and go to state 25

state 3

    (3) program_items -> program_item .

    IMPORT          reduce using rule 3 (program_items -> program_item .)
    STRUCT          reduce using rule 3 (program_items -> program_item .)
    ENUM            reduce using rule 3 (program_items -> program_item .)
    INTERFACE       reduce using rule 3 (program_items -> program_item .)
    TYPE            reduce using rule 3 (program_items -> program_item .)
    CONST           reduce using rule 3 (program_items -> program_item .)
    LET             reduce using rule 3 (program_items -> program_item .)
    TEST            reduce using rule 3 (program_items -> program_item .)
    AT              reduce using rule 3 (program_items -> program_item .)
    ASYNC           reduce using rule 3 (program_items -> program_item .)
    FN              reduce using rule 3 (program_items -> program_item .)
    $end            reduce using rule 3 (program_items -> program_item .)


state 4

    (4) program_item -> import_statement .

    IMPORT          reduce using rule 4 (program_item -> import_statement .)
    STRUCT          reduce using rule 4 (program_item -> import_statement .)
    ENUM            reduce using rule 4 (program_item -> import_statement .)
    INTERFACE       reduce using rule 4 (program_item -> import_statement .)
    TYPE            reduce using rule 4 (program_item -> import_statement .)
    CONST           reduce using rule 4 (program_item -> import_statement .)
    LET             reduce using rule 4 (program_item -> import_statement .)
    TEST            reduce using rule 4 (program_item -> import_statement .)
    AT              reduce using rule 4 (program_item -> import_statement .)
    ASYNC           reduce using rule 4 (program_item -> import_statement .)
    FN              reduce using rule 4 (program_item -> import_statement .)
    $end            reduce using rule 4 (program_item -> import_statement .)


state 5

    (5) program_item -> declaration .

    IMPORT          reduce using rule 5 (program_item -> declaration .)
    STRUCT          reduce using rule 5 (program_item -> declaration .)
    ENUM            reduce using rule 5 (program_item -> declaration .)
    INTERFACE       reduce using rule 5 (program_item -> declaration .)
    TYPE            reduce using rule 5 (program_item -> declaration .)
    CONST           reduce using rule 5 (program_item -> declaration .)
    LET             reduce using rule 5 (program_item -> declaration .)
    TEST            reduce using rule 5 (program_item -> declaration .)
    AT              reduce using rule 5 (program_item -> declaration .)
    ASYNC           reduce using rule 5 (program_item -> declaration .)
    FN              reduce using rule 5 (program_item -> declaration .)
    $end            reduce using rule 5 (program_item -> declaration .)


state 6

    (6) import_statement -> IMPORT . LBRACE import_list_opt RBRACE FROM STRING SEMICOLON

    LBRACE          shift and go to state 28


state 7

    (30) declaration -> function_declaration .

    IMPORT          reduce using rule 30 (declaration -> function_declaration .)
    STRUCT          reduce using rule 30 (declaration -> function_declaration .)
    ENUM            reduce using rule 30 (declaration -> function_declaration .)
    INTERFACE       reduce using rule 30 (declaration -> function_declaration .)
    TYPE            reduce using rule 30 (declaration -> function_declaration .)
    CONST           reduce using rule 30 (declaration -> function_declaration .)
    LET             reduce using rule 30 (declaration -> function_declaration .)
    TEST            reduce using rule 30 (declaration -> function_declaration .)
    AT              reduce using rule 30 (declaration -> function_declaration .)
    ASYNC           reduce using rule 30 (declaration -> function_declaration .)
    FN              reduce using rule 30 (declaration -> function_declaration .)
    $end            reduce using rule 30 (declaration -> function_declaration .)


state 8

    (31) declaration -> struct_declaration .

    IMPORT          reduce using rule 31 (declaration -> struct_declaration .)
    STRUCT          reduce using rule 31 (declaration -> struct_declaration .)
    ENUM            reduce using rule 31 (declaration -> struct_declaration .)
    INTERFACE       reduce using rule 31 (declaration -> struct_declaration .)
    TYPE            reduce using rule 31 (declaration -> struct_declaration .)
    CONST           reduce using rule 31 (declaration -> struct_declaration .)
    LET             reduce using rule 31 (declaration -> struct_declaration .)
    TEST            reduce using rule 31 (declaration -> struct_declaration .)
    AT              reduce using rule 31 (declaration -> struct_declaration .)
    ASYNC           reduce using rule 31 (declaration -> struct_declaration .)
    FN              reduce using rule 31 (declaration -> struct_declaration .)
    $end            reduce using rule 31 (declaration -> struct_declaration .)


state 9

    (32) declaration -> enum_declaration .

    IMPORT          reduce using rule 32 (declaration -> enum_declaration .)
    STRUCT          reduce using rule 32 (declaration -> enum_declaration .)
    ENUM            reduce using rule 32 (declaration -> enum_declaration .)
    INTERFACE       reduce using rule 32 (declaration -> enum_declaration .)
    TYPE            reduce using rule 32 (declaration -> enum_declaration .)
    CONST           reduce using rule 32 (declaration -> enum_declaration .)
    LET             reduce using rule 32 (declaration -> enum_declaration .)
    TEST            reduce using rule 32 (declaration -> enum_declaration .)
    AT              reduce using rule 32 (declaration -> enum_declaration .)
    ASYNC           reduce using rule 32 (declaration -> enum_declaration .)
    FN              reduce using rule 32 (declaration -> enum_declaration .)
    $end            reduce using rule 32 (declaration -> enum_declaration .)


state 10

    (33) declaration -> interface_declaration .

    IMPORT          reduce using rule 33 (declaration -> interface_declaration .)
    STRUCT          reduce using rule 33 (declaration -> interface_declaration .)
    ENUM            reduce using rule 33 (declaration -> interface_declaration .)
    INTERFACE       reduce using rule 33 (declaration -> interface_declaration .)
    TYPE            reduce using rule 33 (declaration -> interface_declaration .)
    CONST           reduce using rule 33 (declaration -> interface_declaration .)
    LET             reduce using rule 33 (declaration -> interface_declaration .)
    TEST            reduce using rule 33 (declaration -> interface_declaration .)
    AT              reduce using rule 33 (declaration -> interface_declaration .)
    ASYNC           reduce using rule 33 (declaration -> interface_declaration .)
    FN              reduce using rule 33 (declaration -> interface_declaration .)
    $end            reduce using rule 33 (declaration -> interface_declaration .)


state 11

    (34) declaration -> type_alias_declaration .

    IMPORT          reduce using rule 34 (declaration -> type_alias_declaration .)
    STRUCT          reduce using rule 34 (declaration -> type_alias_declaration .)
    ENUM            reduce using rule 34 (declaration -> type_alias_declaration .)
    INTERFACE       reduce using rule 34 (declaration -> type_alias_declaration .)
    TYPE            reduce using rule 34 (declaration -> type_alias_declaration .)
    CONST           reduce using rule 34 (declaration -> type_alias_declaration .)
    LET             reduce using rule 34 (declaration -> type_alias_declaration .)
    TEST            reduce using rule 34 (declaration -> type_alias_declaration .)
    AT              reduce using rule 34 (declaration -> type_alias_declaration .)
    ASYNC           reduce using rule 34 (declaration -> type_alias_declaration .)
    FN              reduce using rule 34 (declaration -> type_alias_declaration .)
    $end            reduce using rule 34 (declaration -> type_alias_declaration .)


state 12

    (35) declaration -> constant_declaration .

    IMPORT          reduce using rule 35 (declaration -> constant_declaration .)
    STRUCT          reduce using rule 35 (declaration -> constant_declaration .)
    ENUM            reduce using rule 35 (declaration -> constant_declaration .)
    INTERFACE       reduce using rule 35 (declaration -> constant_declaration .)
    TYPE            reduce using rule 35 (declaration -> constant_declaration .)
    CONST           reduce using rule 35 (declaration -> constant_declaration .)
    LET             reduce using rule 35 (declaration -> constant_declaration .)
    TEST            reduce using rule 35 (declaration -> constant_declaration .)
    AT              reduce using rule 35 (declaration -> constant_declaration .)
    ASYNC           reduce using rule 35 (declaration -> constant_declaration .)
    FN              reduce using rule 35 (declaration -> constant_declaration .)
    $end            reduce using rule 35 (declaration -> constant_declaration .)


state 13

    (36) declaration -> variable_declaration .

    IMPORT          reduce using rule 36 (declaration -> variable_declaration .)
    STRUCT          reduce using rule 36 (declaration -> variable_declaration .)
    ENUM            reduce using rule 36 (declaration -> variable_declaration .)
    INTERFACE       reduce using rule 36 (declaration -> variable_declaration .)
    TYPE            reduce using rule 36 (declaration -> variable_declaration .)
    CONST           reduce using rule 36 (declaration -> variable_declaration .)
    LET             reduce using rule 36 (declaration -> variable_declaration .)
    TEST            reduce using rule 36 (declaration -> variable_declaration .)
    AT              reduce using rule 36 (declaration -> variable_declaration .)
    ASYNC           reduce using rule 36 (declaration -> variable_declaration .)
    FN              reduce using rule 36 (declaration -> variable_declaration .)
    $end            reduce using rule 36 (declaration -> variable_declaration .)


state 14

    (37) declaration -> test_declaration .

    IMPORT          reduce using rule 37 (declaration -> test_declaration .)
    STRUCT          reduce using rule 37 (declaration -> test_declaration .)
    ENUM            reduce using rule 37 (declaration -> test_declaration .)
    INTERFACE       reduce using rule 37 (declaration -> test_declaration .)
    TYPE            reduce using rule 37 (declaration -> test_declaration .)
    CONST           reduce using rule 37 (declaration -> test_declaration .)
    LET             reduce using rule 37 (declaration -> test_declaration .)
    TEST            reduce using rule 37 (declaration -> test_declaration .)
    AT              reduce using rule 37 (declaration -> test_declaration .)
    ASYNC           reduce using rule 37 (declaration -> test_declaration .)
    FN              reduce using rule 37 (declaration -> test_declaration .)
    $end            reduce using rule 37 (declaration -> test_declaration .)


state 15

    (38) function_declaration -> decorator_list_opt . async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (22) async_opt -> . ASYNC
    (23) async_opt -> . empty
    (252) empty -> .

    ASYNC           shift and go to state 30
    FN              reduce using rule 252 (empty -> .)

    async_opt                      shift and go to state 29
    empty                          shift and go to state 31

state 16

    (51) struct_declaration -> STRUCT . IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE

    IDENTIFIER      shift and go to state 32


state 17

    (63) enum_declaration -> ENUM . IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE

    IDENTIFIER      shift and go to state 33


state 18

    (74) interface_declaration -> INTERFACE . IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE

    IDENTIFIER      shift and go to state 34


state 19

    (50) type_alias_declaration -> TYPE . IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON

    IDENTIFIER      shift and go to state 35


state 20

    (80) constant_declaration -> CONST . IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 36


state 21

    (81) variable_declaration -> LET . mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (82) mut_opt -> . MUT
    (83) mut_opt -> . empty
    (252) empty -> .

    MUT             shift and go to state 38
    IDENTIFIER      reduce using rule 252 (empty -> .)

    mut_opt                        shift and go to state 37
    empty                          shift and go to state 39

state 22

    (88) test_declaration -> TEST . STRING block

    STRING          shift and go to state 40


state 23

    (13) decorator_list_opt -> decorator_list .
    (11) decorator_list -> decorator_list . decorator
    (15) decorator -> . AT qualified_name decorator_args_opt

    ASYNC           reduce using rule 13 (decorator_list_opt -> decorator_list .)
    FN              reduce using rule 13 (decorator_list_opt -> decorator_list .)
    AT              shift and go to state 26

    decorator                      shift and go to state 41

state 24

    (14) decorator_list_opt -> empty .

    ASYNC           reduce using rule 14 (decorator_list_opt -> empty .)
    FN              reduce using rule 14 (decorator_list_opt -> empty .)


state 25

    (12) decorator_list -> decorator .

    AT              reduce using rule 12 (decorator_list -> decorator .)
    ASYNC           reduce using rule 12 (decorator_list -> decorator .)
    FN              reduce using rule 12 (decorator_list -> decorator .)


state 26

    (15) decorator -> AT . qualified_name decorator_args_opt
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 43

    qualified_name                 shift and go to state 42

state 27

    (2) program_items -> program_items program_item .

    IMPORT          reduce using rule 2 (program_items -> program_items program_item .)
    STRUCT          reduce using rule 2 (program_items -> program_items program_item .)
    ENUM            reduce using rule 2 (program_items -> program_items program_item .)
    INTERFACE       reduce using rule 2 (program_items -> program_items program_item .)
    TYPE            reduce using rule 2 (program_items -> program_items program_item .)
    CONST           reduce using rule 2 (program_items -> program_items program_item .)
    LET             reduce using rule 2 (program_items -> program_items program_item .)
    TEST            reduce using rule 2 (program_items -> program_items program_item .)
    AT              reduce using rule 2 (program_items -> program_items program_item .)
    ASYNC           reduce using rule 2 (program_items -> program_items program_item .)
    FN              reduce using rule 2 (program_items -> program_items program_item .)
    $end            reduce using rule 2 (program_items -> program_items program_item .)


state 28

    (6) import_statement -> IMPORT LBRACE . import_list_opt RBRACE FROM STRING SEMICOLON
    (7) import_list_opt -> . import_list
    (8) import_list_opt -> . empty
    (9) import_list -> . import_list COMMA IDENTIFIER
    (10) import_list -> . IDENTIFIER
    (252) empty -> .

    IDENTIFIER      shift and go to state 47
    RBRACE          reduce using rule 252 (empty -> .)

    import_list_opt                shift and go to state 44
    import_list                    shift and go to state 45
    empty                          shift and go to state 46

state 29

    (38) function_declaration -> decorator_list_opt async_opt . FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block

    FN              shift and go to state 48


state 30

    (22) async_opt -> ASYNC .

    FN              reduce using rule 22 (async_opt -> ASYNC .)


state 31

    (23) async_opt -> empty .

    FN              reduce using rule 23 (async_opt -> empty .)


state 32

    (51) struct_declaration -> STRUCT IDENTIFIER . type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    IMPLEMENTS      reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 49
    empty                          shift and go to state 51

state 33

    (63) enum_declaration -> ENUM IDENTIFIER . type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    LBRACE          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 52
    empty                          shift and go to state 51

state 34

    (74) interface_declaration -> INTERFACE IDENTIFIER . type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    LBRACE          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 53
    empty                          shift and go to state 51

state 35

    (50) type_alias_declaration -> TYPE IDENTIFIER . type_parameters_opt ASSIGN type SEMICOLON
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    ASSIGN          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 54
    empty                          shift and go to state 51

state 36

    (80) constant_declaration -> CONST IDENTIFIER . type_annotation_opt ASSIGN expression SEMICOLON
    (84) type_annotation_opt -> . ARROW type
    (85) type_annotation_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 56
    ASSIGN          reduce using rule 252 (empty -> .)

    type_annotation_opt            shift and go to state 55
    empty                          shift and go to state 57

state 37

    (81) variable_declaration -> LET mut_opt . IDENTIFIER type_annotation_opt initializer_opt SEMICOLON

    IDENTIFIER      shift and go to state 58


state 38

    (82) mut_opt -> MUT .

    IDENTIFIER      reduce using rule 82 (mut_opt -> MUT .)


state 39

    (83) mut_opt -> empty .

    IDENTIFIER      reduce using rule 83 (mut_opt -> empty .)


state 40

    (88) test_declaration -> TEST STRING . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 59

state 41

    (11) decorator_list -> decorator_list decorator .

    AT              reduce using rule 11 (decorator_list -> decorator_list decorator .)
    ASYNC           reduce using rule 11 (decorator_list -> decorator_list decorator .)
    FN              reduce using rule 11 (decorator_list -> decorator_list decorator .)


state 42

    (15) decorator -> AT qualified_name . decorator_args_opt
    (251) qualified_name -> qualified_name . DOT IDENTIFIER
    (16) decorator_args_opt -> . LPAREN argument_list_opt RPAREN
    (17) decorator_args_opt -> . empty
    (252) empty -> .

    DOT             shift and go to state 62
    LPAREN          shift and go to state 63
    AT              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)

    decorator_args_opt             shift and go to state 61
    empty                          shift and go to state 64

state 43

    (250) qualified_name -> IDENTIFIER .

    DOT             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LPAREN          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    AT              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ASYNC           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    FN              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LT              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LBRACKET        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    QUESTION        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    AMPERSAND       reduce using rule 250 (qualified_name -> IDENTIFIER .)
    PIPE            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ASSIGN          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    SEMICOLON       reduce using rule 250 (qualified_name -> IDENTIFIER .)
    COMMA           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LBRACE          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    RBRACKET        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    RPAREN          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    GT              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LEQ             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    GEQ             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    EQ              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    NEQ             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    AND             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    RANGE           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    OR              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    RBRACE          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    FATARROW        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ARROW           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LET             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    CONST           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    STRUCT          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ENUM            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    INTERFACE       reduce using rule 250 (qualified_name -> IDENTIFIER .)
    TYPE            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    TEST            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    IF              reduce using rule 250 (qualified_name -> IDENTIFIER .)
    MATCH           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    CASE            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    FOR             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    WHILE           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    LOOP            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    BREAK           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    CONTINUE        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    RETURN          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    TRY             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    THROW           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ASSERT          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    ROUTINE         reduce using rule 250 (qualified_name -> IDENTIFIER .)
    NUMBER          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    STRING          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    TRUE            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    FALSE           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    NULL            reduce using rule 250 (qualified_name -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 250 (qualified_name -> IDENTIFIER .)
    PARALLEL        reduce using rule 250 (qualified_name -> IDENTIFIER .)
    NOT             reduce using rule 250 (qualified_name -> IDENTIFIER .)
    MINUS           reduce using rule 250 (qualified_name -> IDENTIFIER .)
    AWAIT           reduce using rule 250 (qualified_name -> IDENTIFIER .)


state 44

    (6) import_statement -> IMPORT LBRACE import_list_opt . RBRACE FROM STRING SEMICOLON

    RBRACE          shift and go to state 65


state 45

    (7) import_list_opt -> import_list .
    (9) import_list -> import_list . COMMA IDENTIFIER

    RBRACE          reduce using rule 7 (import_list_opt -> import_list .)
    COMMA           shift and go to state 66


state 46

    (8) import_list_opt -> empty .

    RBRACE          reduce using rule 8 (import_list_opt -> empty .)


state 47

    (10) import_list -> IDENTIFIER .

    COMMA           reduce using rule 10 (import_list -> IDENTIFIER .)
    RBRACE          reduce using rule 10 (import_list -> IDENTIFIER .)


state 48

    (38) function_declaration -> decorator_list_opt async_opt FN . IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block

    IDENTIFIER      shift and go to state 67


state 49

    (51) struct_declaration -> STRUCT IDENTIFIER type_parameters_opt . implements_opt LBRACE struct_member_list_opt RBRACE
    (52) implements_opt -> . IMPLEMENTS type_list
    (53) implements_opt -> . empty
    (252) empty -> .

    IMPLEMENTS      shift and go to state 69
    LBRACE          reduce using rule 252 (empty -> .)

    implements_opt                 shift and go to state 68
    empty                          shift and go to state 70

state 50

    (24) type_parameters_opt -> LT . type_parameter_list GT
    (26) type_parameter_list -> . type_parameter_list COMMA type_parameter
    (27) type_parameter_list -> . type_parameter
    (28) type_parameter -> . IDENTIFIER
    (29) type_parameter -> . IDENTIFIER EXTENDS type

    IDENTIFIER      shift and go to state 73

    type_parameter_list            shift and go to state 71
    type_parameter                 shift and go to state 72

state 51

    (25) type_parameters_opt -> empty .

    IMPLEMENTS      reduce using rule 25 (type_parameters_opt -> empty .)
    LBRACE          reduce using rule 25 (type_parameters_opt -> empty .)
    ASSIGN          reduce using rule 25 (type_parameters_opt -> empty .)
    LPAREN          reduce using rule 25 (type_parameters_opt -> empty .)


state 52

    (63) enum_declaration -> ENUM IDENTIFIER type_parameters_opt . LBRACE enum_variant_list_opt RBRACE

    LBRACE          shift and go to state 74


state 53

    (74) interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt . LBRACE interface_member_list_opt RBRACE

    LBRACE          shift and go to state 75


state 54

    (50) type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt . ASSIGN type SEMICOLON

    ASSIGN          shift and go to state 76


state 55

    (80) constant_declaration -> CONST IDENTIFIER type_annotation_opt . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 77


state 56

    (84) type_annotation_opt -> ARROW . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 78
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 57

    (85) type_annotation_opt -> empty .

    ASSIGN          reduce using rule 85 (type_annotation_opt -> empty .)
    SEMICOLON       reduce using rule 85 (type_annotation_opt -> empty .)


state 58

    (81) variable_declaration -> LET mut_opt IDENTIFIER . type_annotation_opt initializer_opt SEMICOLON
    (84) type_annotation_opt -> . ARROW type
    (85) type_annotation_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 56
    ASSIGN          reduce using rule 252 (empty -> .)
    SEMICOLON       reduce using rule 252 (empty -> .)

    type_annotation_opt            shift and go to state 85
    empty                          shift and go to state 57

state 59

    (88) test_declaration -> TEST STRING block .

    IMPORT          reduce using rule 88 (test_declaration -> TEST STRING block .)
    STRUCT          reduce using rule 88 (test_declaration -> TEST STRING block .)
    ENUM            reduce using rule 88 (test_declaration -> TEST STRING block .)
    INTERFACE       reduce using rule 88 (test_declaration -> TEST STRING block .)
    TYPE            reduce using rule 88 (test_declaration -> TEST STRING block .)
    CONST           reduce using rule 88 (test_declaration -> TEST STRING block .)
    LET             reduce using rule 88 (test_declaration -> TEST STRING block .)
    TEST            reduce using rule 88 (test_declaration -> TEST STRING block .)
    AT              reduce using rule 88 (test_declaration -> TEST STRING block .)
    ASYNC           reduce using rule 88 (test_declaration -> TEST STRING block .)
    FN              reduce using rule 88 (test_declaration -> TEST STRING block .)
    $end            reduce using rule 88 (test_declaration -> TEST STRING block .)
    IF              reduce using rule 88 (test_declaration -> TEST STRING block .)
    MATCH           reduce using rule 88 (test_declaration -> TEST STRING block .)
    CASE            reduce using rule 88 (test_declaration -> TEST STRING block .)
    FOR             reduce using rule 88 (test_declaration -> TEST STRING block .)
    WHILE           reduce using rule 88 (test_declaration -> TEST STRING block .)
    LOOP            reduce using rule 88 (test_declaration -> TEST STRING block .)
    BREAK           reduce using rule 88 (test_declaration -> TEST STRING block .)
    CONTINUE        reduce using rule 88 (test_declaration -> TEST STRING block .)
    RETURN          reduce using rule 88 (test_declaration -> TEST STRING block .)
    TRY             reduce using rule 88 (test_declaration -> TEST STRING block .)
    THROW           reduce using rule 88 (test_declaration -> TEST STRING block .)
    ASSERT          reduce using rule 88 (test_declaration -> TEST STRING block .)
    ROUTINE         reduce using rule 88 (test_declaration -> TEST STRING block .)
    NUMBER          reduce using rule 88 (test_declaration -> TEST STRING block .)
    STRING          reduce using rule 88 (test_declaration -> TEST STRING block .)
    TRUE            reduce using rule 88 (test_declaration -> TEST STRING block .)
    FALSE           reduce using rule 88 (test_declaration -> TEST STRING block .)
    NULL            reduce using rule 88 (test_declaration -> TEST STRING block .)
    IDENTIFIER      reduce using rule 88 (test_declaration -> TEST STRING block .)
    LPAREN          reduce using rule 88 (test_declaration -> TEST STRING block .)
    LBRACKET        reduce using rule 88 (test_declaration -> TEST STRING block .)
    LBRACE          reduce using rule 88 (test_declaration -> TEST STRING block .)
    PARALLEL        reduce using rule 88 (test_declaration -> TEST STRING block .)
    NOT             reduce using rule 88 (test_declaration -> TEST STRING block .)
    MINUS           reduce using rule 88 (test_declaration -> TEST STRING block .)
    AWAIT           reduce using rule 88 (test_declaration -> TEST STRING block .)
    RBRACE          reduce using rule 88 (test_declaration -> TEST STRING block .)


state 60

    (91) block -> LBRACE . statement_list_opt RBRACE
    (92) statement_list_opt -> . statement_list
    (93) statement_list_opt -> . empty
    (94) statement_list -> . statement_list statement
    (95) statement_list -> . statement
    (252) empty -> .
    (96) statement -> . variable_declaration
    (97) statement -> . constant_declaration
    (98) statement -> . function_declaration
    (99) statement -> . struct_declaration
    (100) statement -> . enum_declaration
    (101) statement -> . interface_declaration
    (102) statement -> . type_alias_declaration
    (103) statement -> . test_declaration
    (104) statement -> . if_statement
    (105) statement -> . match_statement
    (106) statement -> . match_case_statement
    (107) statement -> . for_statement
    (108) statement -> . while_statement
    (109) statement -> . loop_statement
    (110) statement -> . break_statement
    (111) statement -> . continue_statement
    (112) statement -> . return_statement
    (113) statement -> . try_statement
    (114) statement -> . throw_statement
    (115) statement -> . assert_statement
    (116) statement -> . routine_statement
    (117) statement -> . expression_statement
    (81) variable_declaration -> . LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (80) constant_declaration -> . CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
    (38) function_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (51) struct_declaration -> . STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (63) enum_declaration -> . ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (74) interface_declaration -> . INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (50) type_alias_declaration -> . TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
    (88) test_declaration -> . TEST STRING block
    (119) if_statement -> . IF condition block else_clause_opt
    (125) match_statement -> . MATCH expression match_block
    (132) match_case_statement -> . CASE pattern match_guard_opt match_arrow match_body optional_comma
    (142) for_statement -> . FOR pattern IN expression block
    (143) while_statement -> . WHILE condition block
    (144) loop_statement -> . LOOP block
    (145) break_statement -> . BREAK SEMICOLON
    (146) continue_statement -> . CONTINUE SEMICOLON
    (147) return_statement -> . RETURN expression SEMICOLON
    (148) return_statement -> . RETURN SEMICOLON
    (149) try_statement -> . TRY block catch_clause finally_clause_opt
    (156) throw_statement -> . THROW expression SEMICOLON
    (157) assert_statement -> . ASSERT expression SEMICOLON
    (158) routine_statement -> . ROUTINE routine_name_opt block
    (118) expression_statement -> . expression SEMICOLON
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (161) expression -> . assignment_expression
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (15) decorator -> . AT qualified_name decorator_args_opt
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
    RBRACE          reduce using rule 252 (empty -> .)
    LET             shift and go to state 21
    CONST           shift and go to state 20
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    INTERFACE       shift and go to state 18
    TYPE            shift and go to state 19
    TEST            shift and go to state 22
    IF              shift and go to state 118
    MATCH           shift and go to state 119
    CASE            shift and go to state 120
    FOR             shift and go to state 121
    WHILE           shift and go to state 122
    LOOP            shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    TRY             shift and go to state 127
    THROW           shift and go to state 128
    ASSERT          shift and go to state 129
    ROUTINE         shift and go to state 130
    AT              shift and go to state 26
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

  ! ASYNC           [ reduce using rule 252 (empty -> .) ]
  ! FN              [ reduce using rule 252 (empty -> .) ]

    statement_list_opt             shift and go to state 87
    statement_list                 shift and go to state 88
    empty                          shift and go to state 89
    statement                      shift and go to state 90
    variable_declaration           shift and go to state 91
    constant_declaration           shift and go to state 92
    function_declaration           shift and go to state 93
    struct_declaration             shift and go to state 94
    enum_declaration               shift and go to state 95
    interface_declaration          shift and go to state 96
    type_alias_declaration         shift and go to state 97
    test_declaration               shift and go to state 98
    if_statement                   shift and go to state 99
    match_statement                shift and go to state 100
    match_case_statement           shift and go to state 101
    for_statement                  shift and go to state 102
    while_statement                shift and go to state 103
    loop_statement                 shift and go to state 104
    break_statement                shift and go to state 105
    continue_statement             shift and go to state 106
    return_statement               shift and go to state 107
    try_statement                  shift and go to state 108
    throw_statement                shift and go to state 109
    assert_statement               shift and go to state 110
    routine_statement              shift and go to state 111
    expression_statement           shift and go to state 112
    expression                     shift and go to state 114
    decorator_list_opt             shift and go to state 15
    decorator_list                 shift and go to state 23
    assignment_expression          shift and go to state 131
    decorator                      shift and go to state 25
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 61

    (15) decorator -> AT qualified_name decorator_args_opt .

    AT              reduce using rule 15 (decorator -> AT qualified_name decorator_args_opt .)
    ASYNC           reduce using rule 15 (decorator -> AT qualified_name decorator_args_opt .)
    FN              reduce using rule 15 (decorator -> AT qualified_name decorator_args_opt .)


state 62

    (251) qualified_name -> qualified_name DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 152


state 63

    (16) decorator_args_opt -> LPAREN . argument_list_opt RPAREN
    (18) argument_list_opt -> . argument_list
    (19) argument_list_opt -> . empty
    (20) argument_list -> . argument_list COMMA expression
    (21) argument_list -> . expression
    (252) empty -> .
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    RPAREN          reduce using rule 252 (empty -> .)
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    argument_list_opt              shift and go to state 153
    argument_list                  shift and go to state 154
    empty                          shift and go to state 155
    expression                     shift and go to state 156
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 64

    (17) decorator_args_opt -> empty .

    AT              reduce using rule 17 (decorator_args_opt -> empty .)
    ASYNC           reduce using rule 17 (decorator_args_opt -> empty .)
    FN              reduce using rule 17 (decorator_args_opt -> empty .)


state 65

    (6) import_statement -> IMPORT LBRACE import_list_opt RBRACE . FROM STRING SEMICOLON

    FROM            shift and go to state 158


state 66

    (9) import_list -> import_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 159


state 67

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER . type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    LPAREN          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 160
    empty                          shift and go to state 51

state 68

    (51) struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt . LBRACE struct_member_list_opt RBRACE

    LBRACE          shift and go to state 161


state 69

    (52) implements_opt -> IMPLEMENTS . type_list
    (234) type_list -> . type_list COMMA type
    (235) type_list -> . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type_list                      shift and go to state 162
    type                           shift and go to state 163
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 70

    (53) implements_opt -> empty .

    LBRACE          reduce using rule 53 (implements_opt -> empty .)


state 71

    (24) type_parameters_opt -> LT type_parameter_list . GT
    (26) type_parameter_list -> type_parameter_list . COMMA type_parameter

    GT              shift and go to state 164
    COMMA           shift and go to state 165


state 72

    (27) type_parameter_list -> type_parameter .

    GT              reduce using rule 27 (type_parameter_list -> type_parameter .)
    COMMA           reduce using rule 27 (type_parameter_list -> type_parameter .)


state 73

    (28) type_parameter -> IDENTIFIER .
    (29) type_parameter -> IDENTIFIER . EXTENDS type

    GT              reduce using rule 28 (type_parameter -> IDENTIFIER .)
    COMMA           reduce using rule 28 (type_parameter -> IDENTIFIER .)
    EXTENDS         shift and go to state 166


state 74

    (63) enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE . enum_variant_list_opt RBRACE
    (64) enum_variant_list_opt -> . enum_variant_list maybe_trailing_comma
    (65) enum_variant_list_opt -> . empty
    (66) enum_variant_list -> . enum_variant_list COMMA enum_variant
    (67) enum_variant_list -> . enum_variant
    (252) empty -> .
    (68) enum_variant -> . IDENTIFIER LBRACE enum_variant_fields_opt RBRACE
    (69) enum_variant -> . IDENTIFIER

    RBRACE          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 167

    enum_variant_list_opt          shift and go to state 168
    enum_variant_list              shift and go to state 169
    empty                          shift and go to state 170
    enum_variant                   shift and go to state 171

state 75

    (74) interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE . interface_member_list_opt RBRACE
    (75) interface_member_list_opt -> . interface_member_list
    (76) interface_member_list_opt -> . empty
    (77) interface_member_list -> . interface_member_list interface_member
    (78) interface_member_list -> . interface_member
    (252) empty -> .
    (79) interface_member -> . FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON

    RBRACE          reduce using rule 252 (empty -> .)
    FN              shift and go to state 176

    interface_member_list_opt      shift and go to state 172
    interface_member_list          shift and go to state 173
    empty                          shift and go to state 174
    interface_member               shift and go to state 175

state 76

    (50) type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN . type SEMICOLON
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 177
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 77

    (80) constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN . expression SEMICOLON
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 178
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 78

    (84) type_annotation_opt -> ARROW type .

    ASSIGN          reduce using rule 84 (type_annotation_opt -> ARROW type .)
    SEMICOLON       reduce using rule 84 (type_annotation_opt -> ARROW type .)


state 79

    (222) type -> union_type .
    (224) union_type -> union_type . PIPE intersection_type

    ASSIGN          reduce using rule 222 (type -> union_type .)
    SEMICOLON       reduce using rule 222 (type -> union_type .)
    COMMA           reduce using rule 222 (type -> union_type .)
    LBRACE          reduce using rule 222 (type -> union_type .)
    RBRACKET        reduce using rule 222 (type -> union_type .)
    RPAREN          reduce using rule 222 (type -> union_type .)
    GT              reduce using rule 222 (type -> union_type .)
    LT              reduce using rule 222 (type -> union_type .)
    LEQ             reduce using rule 222 (type -> union_type .)
    GEQ             reduce using rule 222 (type -> union_type .)
    EQ              reduce using rule 222 (type -> union_type .)
    NEQ             reduce using rule 222 (type -> union_type .)
    AND             reduce using rule 222 (type -> union_type .)
    RANGE           reduce using rule 222 (type -> union_type .)
    OR              reduce using rule 222 (type -> union_type .)
    RBRACE          reduce using rule 222 (type -> union_type .)
    FATARROW        reduce using rule 222 (type -> union_type .)
    ARROW           reduce using rule 222 (type -> union_type .)
    LET             reduce using rule 222 (type -> union_type .)
    CONST           reduce using rule 222 (type -> union_type .)
    STRUCT          reduce using rule 222 (type -> union_type .)
    ENUM            reduce using rule 222 (type -> union_type .)
    INTERFACE       reduce using rule 222 (type -> union_type .)
    TYPE            reduce using rule 222 (type -> union_type .)
    TEST            reduce using rule 222 (type -> union_type .)
    IF              reduce using rule 222 (type -> union_type .)
    MATCH           reduce using rule 222 (type -> union_type .)
    CASE            reduce using rule 222 (type -> union_type .)
    FOR             reduce using rule 222 (type -> union_type .)
    WHILE           reduce using rule 222 (type -> union_type .)
    LOOP            reduce using rule 222 (type -> union_type .)
    BREAK           reduce using rule 222 (type -> union_type .)
    CONTINUE        reduce using rule 222 (type -> union_type .)
    RETURN          reduce using rule 222 (type -> union_type .)
    TRY             reduce using rule 222 (type -> union_type .)
    THROW           reduce using rule 222 (type -> union_type .)
    ASSERT          reduce using rule 222 (type -> union_type .)
    ROUTINE         reduce using rule 222 (type -> union_type .)
    AT              reduce using rule 222 (type -> union_type .)
    NUMBER          reduce using rule 222 (type -> union_type .)
    STRING          reduce using rule 222 (type -> union_type .)
    TRUE            reduce using rule 222 (type -> union_type .)
    FALSE           reduce using rule 222 (type -> union_type .)
    NULL            reduce using rule 222 (type -> union_type .)
    IDENTIFIER      reduce using rule 222 (type -> union_type .)
    LPAREN          reduce using rule 222 (type -> union_type .)
    LBRACKET        reduce using rule 222 (type -> union_type .)
    FN              reduce using rule 222 (type -> union_type .)
    ASYNC           reduce using rule 222 (type -> union_type .)
    PARALLEL        reduce using rule 222 (type -> union_type .)
    NOT             reduce using rule 222 (type -> union_type .)
    MINUS           reduce using rule 222 (type -> union_type .)
    AWAIT           reduce using rule 222 (type -> union_type .)
    PIPE            shift and go to state 179


state 80

    (223) union_type -> intersection_type .
    (226) intersection_type -> intersection_type . AMPERSAND primary_type

    PIPE            reduce using rule 223 (union_type -> intersection_type .)
    ASSIGN          reduce using rule 223 (union_type -> intersection_type .)
    SEMICOLON       reduce using rule 223 (union_type -> intersection_type .)
    COMMA           reduce using rule 223 (union_type -> intersection_type .)
    LBRACE          reduce using rule 223 (union_type -> intersection_type .)
    RBRACKET        reduce using rule 223 (union_type -> intersection_type .)
    RPAREN          reduce using rule 223 (union_type -> intersection_type .)
    GT              reduce using rule 223 (union_type -> intersection_type .)
    LT              reduce using rule 223 (union_type -> intersection_type .)
    LEQ             reduce using rule 223 (union_type -> intersection_type .)
    GEQ             reduce using rule 223 (union_type -> intersection_type .)
    EQ              reduce using rule 223 (union_type -> intersection_type .)
    NEQ             reduce using rule 223 (union_type -> intersection_type .)
    AND             reduce using rule 223 (union_type -> intersection_type .)
    RANGE           reduce using rule 223 (union_type -> intersection_type .)
    OR              reduce using rule 223 (union_type -> intersection_type .)
    RBRACE          reduce using rule 223 (union_type -> intersection_type .)
    FATARROW        reduce using rule 223 (union_type -> intersection_type .)
    ARROW           reduce using rule 223 (union_type -> intersection_type .)
    LET             reduce using rule 223 (union_type -> intersection_type .)
    CONST           reduce using rule 223 (union_type -> intersection_type .)
    STRUCT          reduce using rule 223 (union_type -> intersection_type .)
    ENUM            reduce using rule 223 (union_type -> intersection_type .)
    INTERFACE       reduce using rule 223 (union_type -> intersection_type .)
    TYPE            reduce using rule 223 (union_type -> intersection_type .)
    TEST            reduce using rule 223 (union_type -> intersection_type .)
    IF              reduce using rule 223 (union_type -> intersection_type .)
    MATCH           reduce using rule 223 (union_type -> intersection_type .)
    CASE            reduce using rule 223 (union_type -> intersection_type .)
    FOR             reduce using rule 223 (union_type -> intersection_type .)
    WHILE           reduce using rule 223 (union_type -> intersection_type .)
    LOOP            reduce using rule 223 (union_type -> intersection_type .)
    BREAK           reduce using rule 223 (union_type -> intersection_type .)
    CONTINUE        reduce using rule 223 (union_type -> intersection_type .)
    RETURN          reduce using rule 223 (union_type -> intersection_type .)
    TRY             reduce using rule 223 (union_type -> intersection_type .)
    THROW           reduce using rule 223 (union_type -> intersection_type .)
    ASSERT          reduce using rule 223 (union_type -> intersection_type .)
    ROUTINE         reduce using rule 223 (union_type -> intersection_type .)
    AT              reduce using rule 223 (union_type -> intersection_type .)
    NUMBER          reduce using rule 223 (union_type -> intersection_type .)
    STRING          reduce using rule 223 (union_type -> intersection_type .)
    TRUE            reduce using rule 223 (union_type -> intersection_type .)
    FALSE           reduce using rule 223 (union_type -> intersection_type .)
    NULL            reduce using rule 223 (union_type -> intersection_type .)
    IDENTIFIER      reduce using rule 223 (union_type -> intersection_type .)
    LPAREN          reduce using rule 223 (union_type -> intersection_type .)
    LBRACKET        reduce using rule 223 (union_type -> intersection_type .)
    FN              reduce using rule 223 (union_type -> intersection_type .)
    ASYNC           reduce using rule 223 (union_type -> intersection_type .)
    PARALLEL        reduce using rule 223 (union_type -> intersection_type .)
    NOT             reduce using rule 223 (union_type -> intersection_type .)
    MINUS           reduce using rule 223 (union_type -> intersection_type .)
    AWAIT           reduce using rule 223 (union_type -> intersection_type .)
    AMPERSAND       shift and go to state 180


state 81

    (225) intersection_type -> primary_type .
    (228) primary_type -> primary_type . LBRACKET RBRACKET
    (230) primary_type -> primary_type . QUESTION

  ! shift/reduce conflict for LBRACKET resolved as shift
    AMPERSAND       reduce using rule 225 (intersection_type -> primary_type .)
    PIPE            reduce using rule 225 (intersection_type -> primary_type .)
    ASSIGN          reduce using rule 225 (intersection_type -> primary_type .)
    SEMICOLON       reduce using rule 225 (intersection_type -> primary_type .)
    COMMA           reduce using rule 225 (intersection_type -> primary_type .)
    LBRACE          reduce using rule 225 (intersection_type -> primary_type .)
    RBRACKET        reduce using rule 225 (intersection_type -> primary_type .)
    RPAREN          reduce using rule 225 (intersection_type -> primary_type .)
    GT              reduce using rule 225 (intersection_type -> primary_type .)
    LT              reduce using rule 225 (intersection_type -> primary_type .)
    LEQ             reduce using rule 225 (intersection_type -> primary_type .)
    GEQ             reduce using rule 225 (intersection_type -> primary_type .)
    EQ              reduce using rule 225 (intersection_type -> primary_type .)
    NEQ             reduce using rule 225 (intersection_type -> primary_type .)
    AND             reduce using rule 225 (intersection_type -> primary_type .)
    RANGE           reduce using rule 225 (intersection_type -> primary_type .)
    OR              reduce using rule 225 (intersection_type -> primary_type .)
    RBRACE          reduce using rule 225 (intersection_type -> primary_type .)
    FATARROW        reduce using rule 225 (intersection_type -> primary_type .)
    ARROW           reduce using rule 225 (intersection_type -> primary_type .)
    LET             reduce using rule 225 (intersection_type -> primary_type .)
    CONST           reduce using rule 225 (intersection_type -> primary_type .)
    STRUCT          reduce using rule 225 (intersection_type -> primary_type .)
    ENUM            reduce using rule 225 (intersection_type -> primary_type .)
    INTERFACE       reduce using rule 225 (intersection_type -> primary_type .)
    TYPE            reduce using rule 225 (intersection_type -> primary_type .)
    TEST            reduce using rule 225 (intersection_type -> primary_type .)
    IF              reduce using rule 225 (intersection_type -> primary_type .)
    MATCH           reduce using rule 225 (intersection_type -> primary_type .)
    CASE            reduce using rule 225 (intersection_type -> primary_type .)
    FOR             reduce using rule 225 (intersection_type -> primary_type .)
    WHILE           reduce using rule 225 (intersection_type -> primary_type .)
    LOOP            reduce using rule 225 (intersection_type -> primary_type .)
    BREAK           reduce using rule 225 (intersection_type -> primary_type .)
    CONTINUE        reduce using rule 225 (intersection_type -> primary_type .)
    RETURN          reduce using rule 225 (intersection_type -> primary_type .)
    TRY             reduce using rule 225 (intersection_type -> primary_type .)
    THROW           reduce using rule 225 (intersection_type -> primary_type .)
    ASSERT          reduce using rule 225 (intersection_type -> primary_type .)
    ROUTINE         reduce using rule 225 (intersection_type -> primary_type .)
    AT              reduce using rule 225 (intersection_type -> primary_type .)
    NUMBER          reduce using rule 225 (intersection_type -> primary_type .)
    STRING          reduce using rule 225 (intersection_type -> primary_type .)
    TRUE            reduce using rule 225 (intersection_type -> primary_type .)
    FALSE           reduce using rule 225 (intersection_type -> primary_type .)
    NULL            reduce using rule 225 (intersection_type -> primary_type .)
    IDENTIFIER      reduce using rule 225 (intersection_type -> primary_type .)
    LPAREN          reduce using rule 225 (intersection_type -> primary_type .)
    FN              reduce using rule 225 (intersection_type -> primary_type .)
    ASYNC           reduce using rule 225 (intersection_type -> primary_type .)
    PARALLEL        reduce using rule 225 (intersection_type -> primary_type .)
    NOT             reduce using rule 225 (intersection_type -> primary_type .)
    MINUS           reduce using rule 225 (intersection_type -> primary_type .)
    AWAIT           reduce using rule 225 (intersection_type -> primary_type .)
    LBRACKET        shift and go to state 181
    QUESTION        shift and go to state 182

  ! LBRACKET        [ reduce using rule 225 (intersection_type -> primary_type .) ]


state 82

    (227) primary_type -> qualified_name . type_arguments_opt
    (251) qualified_name -> qualified_name . DOT IDENTIFIER
    (232) type_arguments_opt -> . LT type_list GT
    (233) type_arguments_opt -> . empty
    (252) empty -> .

  ! shift/reduce conflict for LT resolved as shift
    DOT             shift and go to state 62
    LT              shift and go to state 184
    LBRACKET        reduce using rule 252 (empty -> .)
    QUESTION        reduce using rule 252 (empty -> .)
    AMPERSAND       reduce using rule 252 (empty -> .)
    PIPE            reduce using rule 252 (empty -> .)
    ASSIGN          reduce using rule 252 (empty -> .)
    SEMICOLON       reduce using rule 252 (empty -> .)
    COMMA           reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)
    RBRACKET        reduce using rule 252 (empty -> .)
    RPAREN          reduce using rule 252 (empty -> .)
    GT              reduce using rule 252 (empty -> .)
    LEQ             reduce using rule 252 (empty -> .)
    GEQ             reduce using rule 252 (empty -> .)
    EQ              reduce using rule 252 (empty -> .)
    NEQ             reduce using rule 252 (empty -> .)
    AND             reduce using rule 252 (empty -> .)
    RANGE           reduce using rule 252 (empty -> .)
    OR              reduce using rule 252 (empty -> .)
    RBRACE          reduce using rule 252 (empty -> .)
    FATARROW        reduce using rule 252 (empty -> .)
    ARROW           reduce using rule 252 (empty -> .)
    LET             reduce using rule 252 (empty -> .)
    CONST           reduce using rule 252 (empty -> .)
    STRUCT          reduce using rule 252 (empty -> .)
    ENUM            reduce using rule 252 (empty -> .)
    INTERFACE       reduce using rule 252 (empty -> .)
    TYPE            reduce using rule 252 (empty -> .)
    TEST            reduce using rule 252 (empty -> .)
    IF              reduce using rule 252 (empty -> .)
    MATCH           reduce using rule 252 (empty -> .)
    CASE            reduce using rule 252 (empty -> .)
    FOR             reduce using rule 252 (empty -> .)
    WHILE           reduce using rule 252 (empty -> .)
    LOOP            reduce using rule 252 (empty -> .)
    BREAK           reduce using rule 252 (empty -> .)
    CONTINUE        reduce using rule 252 (empty -> .)
    RETURN          reduce using rule 252 (empty -> .)
    TRY             reduce using rule 252 (empty -> .)
    THROW           reduce using rule 252 (empty -> .)
    ASSERT          reduce using rule 252 (empty -> .)
    ROUTINE         reduce using rule 252 (empty -> .)
    AT              reduce using rule 252 (empty -> .)
    NUMBER          reduce using rule 252 (empty -> .)
    STRING          reduce using rule 252 (empty -> .)
    TRUE            reduce using rule 252 (empty -> .)
    FALSE           reduce using rule 252 (empty -> .)
    NULL            reduce using rule 252 (empty -> .)
    IDENTIFIER      reduce using rule 252 (empty -> .)
    LPAREN          reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    PARALLEL        reduce using rule 252 (empty -> .)
    NOT             reduce using rule 252 (empty -> .)
    MINUS           reduce using rule 252 (empty -> .)
    AWAIT           reduce using rule 252 (empty -> .)

  ! LT              [ reduce using rule 252 (empty -> .) ]

    type_arguments_opt             shift and go to state 183
    empty                          shift and go to state 185

state 83

    (229) primary_type -> LBRACKET . type_list RBRACKET
    (234) type_list -> . type_list COMMA type
    (235) type_list -> . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type_list                      shift and go to state 186
    type                           shift and go to state 163
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 84

    (231) primary_type -> LPAREN . type RPAREN
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 187
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 85

    (81) variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt . initializer_opt SEMICOLON
    (86) initializer_opt -> . ASSIGN expression
    (87) initializer_opt -> . empty
    (252) empty -> .

    ASSIGN          shift and go to state 189
    SEMICOLON       reduce using rule 252 (empty -> .)

    initializer_opt                shift and go to state 188
    empty                          shift and go to state 190

state 86

    (212) primary_expression -> LBRACE . object_field_list_opt RBRACE
    (214) object_field_list_opt -> . object_field_list maybe_trailing_comma
    (215) object_field_list_opt -> . empty
    (216) object_field_list -> . object_field_list COMMA object_field
    (217) object_field_list -> . object_field
    (252) empty -> .
    (218) object_field -> . IDENTIFIER COLON expression

    RBRACE          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 195

    object_field_list_opt          shift and go to state 191
    object_field_list              shift and go to state 192
    empty                          shift and go to state 193
    object_field                   shift and go to state 194

state 87

    (91) block -> LBRACE statement_list_opt . RBRACE

    RBRACE          shift and go to state 196


state 88

    (92) statement_list_opt -> statement_list .
    (94) statement_list -> statement_list . statement
    (96) statement -> . variable_declaration
    (97) statement -> . constant_declaration
    (98) statement -> . function_declaration
    (99) statement -> . struct_declaration
    (100) statement -> . enum_declaration
    (101) statement -> . interface_declaration
    (102) statement -> . type_alias_declaration
    (103) statement -> . test_declaration
    (104) statement -> . if_statement
    (105) statement -> . match_statement
    (106) statement -> . match_case_statement
    (107) statement -> . for_statement
    (108) statement -> . while_statement
    (109) statement -> . loop_statement
    (110) statement -> . break_statement
    (111) statement -> . continue_statement
    (112) statement -> . return_statement
    (113) statement -> . try_statement
    (114) statement -> . throw_statement
    (115) statement -> . assert_statement
    (116) statement -> . routine_statement
    (117) statement -> . expression_statement
    (81) variable_declaration -> . LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (80) constant_declaration -> . CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
    (38) function_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (51) struct_declaration -> . STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (63) enum_declaration -> . ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (74) interface_declaration -> . INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (50) type_alias_declaration -> . TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
    (88) test_declaration -> . TEST STRING block
    (119) if_statement -> . IF condition block else_clause_opt
    (125) match_statement -> . MATCH expression match_block
    (132) match_case_statement -> . CASE pattern match_guard_opt match_arrow match_body optional_comma
    (142) for_statement -> . FOR pattern IN expression block
    (143) while_statement -> . WHILE condition block
    (144) loop_statement -> . LOOP block
    (145) break_statement -> . BREAK SEMICOLON
    (146) continue_statement -> . CONTINUE SEMICOLON
    (147) return_statement -> . RETURN expression SEMICOLON
    (148) return_statement -> . RETURN SEMICOLON
    (149) try_statement -> . TRY block catch_clause finally_clause_opt
    (156) throw_statement -> . THROW expression SEMICOLON
    (157) assert_statement -> . ASSERT expression SEMICOLON
    (158) routine_statement -> . ROUTINE routine_name_opt block
    (118) expression_statement -> . expression SEMICOLON
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (161) expression -> . assignment_expression
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (252) empty -> .
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (15) decorator -> . AT qualified_name decorator_args_opt
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
    RBRACE          reduce using rule 92 (statement_list_opt -> statement_list .)
    LET             shift and go to state 21
    CONST           shift and go to state 20
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    INTERFACE       shift and go to state 18
    TYPE            shift and go to state 19
    TEST            shift and go to state 22
    IF              shift and go to state 118
    MATCH           shift and go to state 119
    CASE            shift and go to state 120
    FOR             shift and go to state 121
    WHILE           shift and go to state 122
    LOOP            shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    TRY             shift and go to state 127
    THROW           shift and go to state 128
    ASSERT          shift and go to state 129
    ROUTINE         shift and go to state 130
    AT              shift and go to state 26
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

  ! ASYNC           [ reduce using rule 252 (empty -> .) ]
  ! FN              [ reduce using rule 252 (empty -> .) ]

    statement                      shift and go to state 197
    variable_declaration           shift and go to state 91
    constant_declaration           shift and go to state 92
    function_declaration           shift and go to state 93
    struct_declaration             shift and go to state 94
    enum_declaration               shift and go to state 95
    interface_declaration          shift and go to state 96
    type_alias_declaration         shift and go to state 97
    test_declaration               shift and go to state 98
    if_statement                   shift and go to state 99
    match_statement                shift and go to state 100
    match_case_statement           shift and go to state 101
    for_statement                  shift and go to state 102
    while_statement                shift and go to state 103
    loop_statement                 shift and go to state 104
    break_statement                shift and go to state 105
    continue_statement             shift and go to state 106
    return_statement               shift and go to state 107
    try_statement                  shift and go to state 108
    throw_statement                shift and go to state 109
    assert_statement               shift and go to state 110
    routine_statement              shift and go to state 111
    expression_statement           shift and go to state 112
    expression                     shift and go to state 114
    decorator_list_opt             shift and go to state 15
    decorator_list                 shift and go to state 23
    empty                          shift and go to state 24
    assignment_expression          shift and go to state 131
    decorator                      shift and go to state 25
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 89

    (93) statement_list_opt -> empty .
    (14) decorator_list_opt -> empty .

    RBRACE          reduce using rule 93 (statement_list_opt -> empty .)
    ASYNC           reduce using rule 14 (decorator_list_opt -> empty .)
    FN              reduce using rule 14 (decorator_list_opt -> empty .)


state 90

    (95) statement_list -> statement .

    LET             reduce using rule 95 (statement_list -> statement .)
    CONST           reduce using rule 95 (statement_list -> statement .)
    STRUCT          reduce using rule 95 (statement_list -> statement .)
    ENUM            reduce using rule 95 (statement_list -> statement .)
    INTERFACE       reduce using rule 95 (statement_list -> statement .)
    TYPE            reduce using rule 95 (statement_list -> statement .)
    TEST            reduce using rule 95 (statement_list -> statement .)
    IF              reduce using rule 95 (statement_list -> statement .)
    MATCH           reduce using rule 95 (statement_list -> statement .)
    CASE            reduce using rule 95 (statement_list -> statement .)
    FOR             reduce using rule 95 (statement_list -> statement .)
    WHILE           reduce using rule 95 (statement_list -> statement .)
    LOOP            reduce using rule 95 (statement_list -> statement .)
    BREAK           reduce using rule 95 (statement_list -> statement .)
    CONTINUE        reduce using rule 95 (statement_list -> statement .)
    RETURN          reduce using rule 95 (statement_list -> statement .)
    TRY             reduce using rule 95 (statement_list -> statement .)
    THROW           reduce using rule 95 (statement_list -> statement .)
    ASSERT          reduce using rule 95 (statement_list -> statement .)
    ROUTINE         reduce using rule 95 (statement_list -> statement .)
    AT              reduce using rule 95 (statement_list -> statement .)
    NUMBER          reduce using rule 95 (statement_list -> statement .)
    STRING          reduce using rule 95 (statement_list -> statement .)
    TRUE            reduce using rule 95 (statement_list -> statement .)
    FALSE           reduce using rule 95 (statement_list -> statement .)
    NULL            reduce using rule 95 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 95 (statement_list -> statement .)
    LPAREN          reduce using rule 95 (statement_list -> statement .)
    LBRACKET        reduce using rule 95 (statement_list -> statement .)
    LBRACE          reduce using rule 95 (statement_list -> statement .)
    FN              reduce using rule 95 (statement_list -> statement .)
    ASYNC           reduce using rule 95 (statement_list -> statement .)
    PARALLEL        reduce using rule 95 (statement_list -> statement .)
    NOT             reduce using rule 95 (statement_list -> statement .)
    MINUS           reduce using rule 95 (statement_list -> statement .)
    AWAIT           reduce using rule 95 (statement_list -> statement .)
    RBRACE          reduce using rule 95 (statement_list -> statement .)


state 91

    (96) statement -> variable_declaration .

    LET             reduce using rule 96 (statement -> variable_declaration .)
    CONST           reduce using rule 96 (statement -> variable_declaration .)
    STRUCT          reduce using rule 96 (statement -> variable_declaration .)
    ENUM            reduce using rule 96 (statement -> variable_declaration .)
    INTERFACE       reduce using rule 96 (statement -> variable_declaration .)
    TYPE            reduce using rule 96 (statement -> variable_declaration .)
    TEST            reduce using rule 96 (statement -> variable_declaration .)
    IF              reduce using rule 96 (statement -> variable_declaration .)
    MATCH           reduce using rule 96 (statement -> variable_declaration .)
    CASE            reduce using rule 96 (statement -> variable_declaration .)
    FOR             reduce using rule 96 (statement -> variable_declaration .)
    WHILE           reduce using rule 96 (statement -> variable_declaration .)
    LOOP            reduce using rule 96 (statement -> variable_declaration .)
    BREAK           reduce using rule 96 (statement -> variable_declaration .)
    CONTINUE        reduce using rule 96 (statement -> variable_declaration .)
    RETURN          reduce using rule 96 (statement -> variable_declaration .)
    TRY             reduce using rule 96 (statement -> variable_declaration .)
    THROW           reduce using rule 96 (statement -> variable_declaration .)
    ASSERT          reduce using rule 96 (statement -> variable_declaration .)
    ROUTINE         reduce using rule 96 (statement -> variable_declaration .)
    AT              reduce using rule 96 (statement -> variable_declaration .)
    NUMBER          reduce using rule 96 (statement -> variable_declaration .)
    STRING          reduce using rule 96 (statement -> variable_declaration .)
    TRUE            reduce using rule 96 (statement -> variable_declaration .)
    FALSE           reduce using rule 96 (statement -> variable_declaration .)
    NULL            reduce using rule 96 (statement -> variable_declaration .)
    IDENTIFIER      reduce using rule 96 (statement -> variable_declaration .)
    LPAREN          reduce using rule 96 (statement -> variable_declaration .)
    LBRACKET        reduce using rule 96 (statement -> variable_declaration .)
    LBRACE          reduce using rule 96 (statement -> variable_declaration .)
    FN              reduce using rule 96 (statement -> variable_declaration .)
    ASYNC           reduce using rule 96 (statement -> variable_declaration .)
    PARALLEL        reduce using rule 96 (statement -> variable_declaration .)
    NOT             reduce using rule 96 (statement -> variable_declaration .)
    MINUS           reduce using rule 96 (statement -> variable_declaration .)
    AWAIT           reduce using rule 96 (statement -> variable_declaration .)
    RBRACE          reduce using rule 96 (statement -> variable_declaration .)


state 92

    (97) statement -> constant_declaration .

    LET             reduce using rule 97 (statement -> constant_declaration .)
    CONST           reduce using rule 97 (statement -> constant_declaration .)
    STRUCT          reduce using rule 97 (statement -> constant_declaration .)
    ENUM            reduce using rule 97 (statement -> constant_declaration .)
    INTERFACE       reduce using rule 97 (statement -> constant_declaration .)
    TYPE            reduce using rule 97 (statement -> constant_declaration .)
    TEST            reduce using rule 97 (statement -> constant_declaration .)
    IF              reduce using rule 97 (statement -> constant_declaration .)
    MATCH           reduce using rule 97 (statement -> constant_declaration .)
    CASE            reduce using rule 97 (statement -> constant_declaration .)
    FOR             reduce using rule 97 (statement -> constant_declaration .)
    WHILE           reduce using rule 97 (statement -> constant_declaration .)
    LOOP            reduce using rule 97 (statement -> constant_declaration .)
    BREAK           reduce using rule 97 (statement -> constant_declaration .)
    CONTINUE        reduce using rule 97 (statement -> constant_declaration .)
    RETURN          reduce using rule 97 (statement -> constant_declaration .)
    TRY             reduce using rule 97 (statement -> constant_declaration .)
    THROW           reduce using rule 97 (statement -> constant_declaration .)
    ASSERT          reduce using rule 97 (statement -> constant_declaration .)
    ROUTINE         reduce using rule 97 (statement -> constant_declaration .)
    AT              reduce using rule 97 (statement -> constant_declaration .)
    NUMBER          reduce using rule 97 (statement -> constant_declaration .)
    STRING          reduce using rule 97 (statement -> constant_declaration .)
    TRUE            reduce using rule 97 (statement -> constant_declaration .)
    FALSE           reduce using rule 97 (statement -> constant_declaration .)
    NULL            reduce using rule 97 (statement -> constant_declaration .)
    IDENTIFIER      reduce using rule 97 (statement -> constant_declaration .)
    LPAREN          reduce using rule 97 (statement -> constant_declaration .)
    LBRACKET        reduce using rule 97 (statement -> constant_declaration .)
    LBRACE          reduce using rule 97 (statement -> constant_declaration .)
    FN              reduce using rule 97 (statement -> constant_declaration .)
    ASYNC           reduce using rule 97 (statement -> constant_declaration .)
    PARALLEL        reduce using rule 97 (statement -> constant_declaration .)
    NOT             reduce using rule 97 (statement -> constant_declaration .)
    MINUS           reduce using rule 97 (statement -> constant_declaration .)
    AWAIT           reduce using rule 97 (statement -> constant_declaration .)
    RBRACE          reduce using rule 97 (statement -> constant_declaration .)


state 93

    (98) statement -> function_declaration .

    LET             reduce using rule 98 (statement -> function_declaration .)
    CONST           reduce using rule 98 (statement -> function_declaration .)
    STRUCT          reduce using rule 98 (statement -> function_declaration .)
    ENUM            reduce using rule 98 (statement -> function_declaration .)
    INTERFACE       reduce using rule 98 (statement -> function_declaration .)
    TYPE            reduce using rule 98 (statement -> function_declaration .)
    TEST            reduce using rule 98 (statement -> function_declaration .)
    IF              reduce using rule 98 (statement -> function_declaration .)
    MATCH           reduce using rule 98 (statement -> function_declaration .)
    CASE            reduce using rule 98 (statement -> function_declaration .)
    FOR             reduce using rule 98 (statement -> function_declaration .)
    WHILE           reduce using rule 98 (statement -> function_declaration .)
    LOOP            reduce using rule 98 (statement -> function_declaration .)
    BREAK           reduce using rule 98 (statement -> function_declaration .)
    CONTINUE        reduce using rule 98 (statement -> function_declaration .)
    RETURN          reduce using rule 98 (statement -> function_declaration .)
    TRY             reduce using rule 98 (statement -> function_declaration .)
    THROW           reduce using rule 98 (statement -> function_declaration .)
    ASSERT          reduce using rule 98 (statement -> function_declaration .)
    ROUTINE         reduce using rule 98 (statement -> function_declaration .)
    AT              reduce using rule 98 (statement -> function_declaration .)
    NUMBER          reduce using rule 98 (statement -> function_declaration .)
    STRING          reduce using rule 98 (statement -> function_declaration .)
    TRUE            reduce using rule 98 (statement -> function_declaration .)
    FALSE           reduce using rule 98 (statement -> function_declaration .)
    NULL            reduce using rule 98 (statement -> function_declaration .)
    IDENTIFIER      reduce using rule 98 (statement -> function_declaration .)
    LPAREN          reduce using rule 98 (statement -> function_declaration .)
    LBRACKET        reduce using rule 98 (statement -> function_declaration .)
    LBRACE          reduce using rule 98 (statement -> function_declaration .)
    FN              reduce using rule 98 (statement -> function_declaration .)
    ASYNC           reduce using rule 98 (statement -> function_declaration .)
    PARALLEL        reduce using rule 98 (statement -> function_declaration .)
    NOT             reduce using rule 98 (statement -> function_declaration .)
    MINUS           reduce using rule 98 (statement -> function_declaration .)
    AWAIT           reduce using rule 98 (statement -> function_declaration .)
    RBRACE          reduce using rule 98 (statement -> function_declaration .)


state 94

    (99) statement -> struct_declaration .

    LET             reduce using rule 99 (statement -> struct_declaration .)
    CONST           reduce using rule 99 (statement -> struct_declaration .)
    STRUCT          reduce using rule 99 (statement -> struct_declaration .)
    ENUM            reduce using rule 99 (statement -> struct_declaration .)
    INTERFACE       reduce using rule 99 (statement -> struct_declaration .)
    TYPE            reduce using rule 99 (statement -> struct_declaration .)
    TEST            reduce using rule 99 (statement -> struct_declaration .)
    IF              reduce using rule 99 (statement -> struct_declaration .)
    MATCH           reduce using rule 99 (statement -> struct_declaration .)
    CASE            reduce using rule 99 (statement -> struct_declaration .)
    FOR             reduce using rule 99 (statement -> struct_declaration .)
    WHILE           reduce using rule 99 (statement -> struct_declaration .)
    LOOP            reduce using rule 99 (statement -> struct_declaration .)
    BREAK           reduce using rule 99 (statement -> struct_declaration .)
    CONTINUE        reduce using rule 99 (statement -> struct_declaration .)
    RETURN          reduce using rule 99 (statement -> struct_declaration .)
    TRY             reduce using rule 99 (statement -> struct_declaration .)
    THROW           reduce using rule 99 (statement -> struct_declaration .)
    ASSERT          reduce using rule 99 (statement -> struct_declaration .)
    ROUTINE         reduce using rule 99 (statement -> struct_declaration .)
    AT              reduce using rule 99 (statement -> struct_declaration .)
    NUMBER          reduce using rule 99 (statement -> struct_declaration .)
    STRING          reduce using rule 99 (statement -> struct_declaration .)
    TRUE            reduce using rule 99 (statement -> struct_declaration .)
    FALSE           reduce using rule 99 (statement -> struct_declaration .)
    NULL            reduce using rule 99 (statement -> struct_declaration .)
    IDENTIFIER      reduce using rule 99 (statement -> struct_declaration .)
    LPAREN          reduce using rule 99 (statement -> struct_declaration .)
    LBRACKET        reduce using rule 99 (statement -> struct_declaration .)
    LBRACE          reduce using rule 99 (statement -> struct_declaration .)
    FN              reduce using rule 99 (statement -> struct_declaration .)
    ASYNC           reduce using rule 99 (statement -> struct_declaration .)
    PARALLEL        reduce using rule 99 (statement -> struct_declaration .)
    NOT             reduce using rule 99 (statement -> struct_declaration .)
    MINUS           reduce using rule 99 (statement -> struct_declaration .)
    AWAIT           reduce using rule 99 (statement -> struct_declaration .)
    RBRACE          reduce using rule 99 (statement -> struct_declaration .)


state 95

    (100) statement -> enum_declaration .

    LET             reduce using rule 100 (statement -> enum_declaration .)
    CONST           reduce using rule 100 (statement -> enum_declaration .)
    STRUCT          reduce using rule 100 (statement -> enum_declaration .)
    ENUM            reduce using rule 100 (statement -> enum_declaration .)
    INTERFACE       reduce using rule 100 (statement -> enum_declaration .)
    TYPE            reduce using rule 100 (statement -> enum_declaration .)
    TEST            reduce using rule 100 (statement -> enum_declaration .)
    IF              reduce using rule 100 (statement -> enum_declaration .)
    MATCH           reduce using rule 100 (statement -> enum_declaration .)
    CASE            reduce using rule 100 (statement -> enum_declaration .)
    FOR             reduce using rule 100 (statement -> enum_declaration .)
    WHILE           reduce using rule 100 (statement -> enum_declaration .)
    LOOP            reduce using rule 100 (statement -> enum_declaration .)
    BREAK           reduce using rule 100 (statement -> enum_declaration .)
    CONTINUE        reduce using rule 100 (statement -> enum_declaration .)
    RETURN          reduce using rule 100 (statement -> enum_declaration .)
    TRY             reduce using rule 100 (statement -> enum_declaration .)
    THROW           reduce using rule 100 (statement -> enum_declaration .)
    ASSERT          reduce using rule 100 (statement -> enum_declaration .)
    ROUTINE         reduce using rule 100 (statement -> enum_declaration .)
    AT              reduce using rule 100 (statement -> enum_declaration .)
    NUMBER          reduce using rule 100 (statement -> enum_declaration .)
    STRING          reduce using rule 100 (statement -> enum_declaration .)
    TRUE            reduce using rule 100 (statement -> enum_declaration .)
    FALSE           reduce using rule 100 (statement -> enum_declaration .)
    NULL            reduce using rule 100 (statement -> enum_declaration .)
    IDENTIFIER      reduce using rule 100 (statement -> enum_declaration .)
    LPAREN          reduce using rule 100 (statement -> enum_declaration .)
    LBRACKET        reduce using rule 100 (statement -> enum_declaration .)
    LBRACE          reduce using rule 100 (statement -> enum_declaration .)
    FN              reduce using rule 100 (statement -> enum_declaration .)
    ASYNC           reduce using rule 100 (statement -> enum_declaration .)
    PARALLEL        reduce using rule 100 (statement -> enum_declaration .)
    NOT             reduce using rule 100 (statement -> enum_declaration .)
    MINUS           reduce using rule 100 (statement -> enum_declaration .)
    AWAIT           reduce using rule 100 (statement -> enum_declaration .)
    RBRACE          reduce using rule 100 (statement -> enum_declaration .)


state 96

    (101) statement -> interface_declaration .

    LET             reduce using rule 101 (statement -> interface_declaration .)
    CONST           reduce using rule 101 (statement -> interface_declaration .)
    STRUCT          reduce using rule 101 (statement -> interface_declaration .)
    ENUM            reduce using rule 101 (statement -> interface_declaration .)
    INTERFACE       reduce using rule 101 (statement -> interface_declaration .)
    TYPE            reduce using rule 101 (statement -> interface_declaration .)
    TEST            reduce using rule 101 (statement -> interface_declaration .)
    IF              reduce using rule 101 (statement -> interface_declaration .)
    MATCH           reduce using rule 101 (statement -> interface_declaration .)
    CASE            reduce using rule 101 (statement -> interface_declaration .)
    FOR             reduce using rule 101 (statement -> interface_declaration .)
    WHILE           reduce using rule 101 (statement -> interface_declaration .)
    LOOP            reduce using rule 101 (statement -> interface_declaration .)
    BREAK           reduce using rule 101 (statement -> interface_declaration .)
    CONTINUE        reduce using rule 101 (statement -> interface_declaration .)
    RETURN          reduce using rule 101 (statement -> interface_declaration .)
    TRY             reduce using rule 101 (statement -> interface_declaration .)
    THROW           reduce using rule 101 (statement -> interface_declaration .)
    ASSERT          reduce using rule 101 (statement -> interface_declaration .)
    ROUTINE         reduce using rule 101 (statement -> interface_declaration .)
    AT              reduce using rule 101 (statement -> interface_declaration .)
    NUMBER          reduce using rule 101 (statement -> interface_declaration .)
    STRING          reduce using rule 101 (statement -> interface_declaration .)
    TRUE            reduce using rule 101 (statement -> interface_declaration .)
    FALSE           reduce using rule 101 (statement -> interface_declaration .)
    NULL            reduce using rule 101 (statement -> interface_declaration .)
    IDENTIFIER      reduce using rule 101 (statement -> interface_declaration .)
    LPAREN          reduce using rule 101 (statement -> interface_declaration .)
    LBRACKET        reduce using rule 101 (statement -> interface_declaration .)
    LBRACE          reduce using rule 101 (statement -> interface_declaration .)
    FN              reduce using rule 101 (statement -> interface_declaration .)
    ASYNC           reduce using rule 101 (statement -> interface_declaration .)
    PARALLEL        reduce using rule 101 (statement -> interface_declaration .)
    NOT             reduce using rule 101 (statement -> interface_declaration .)
    MINUS           reduce using rule 101 (statement -> interface_declaration .)
    AWAIT           reduce using rule 101 (statement -> interface_declaration .)
    RBRACE          reduce using rule 101 (statement -> interface_declaration .)


state 97

    (102) statement -> type_alias_declaration .

    LET             reduce using rule 102 (statement -> type_alias_declaration .)
    CONST           reduce using rule 102 (statement -> type_alias_declaration .)
    STRUCT          reduce using rule 102 (statement -> type_alias_declaration .)
    ENUM            reduce using rule 102 (statement -> type_alias_declaration .)
    INTERFACE       reduce using rule 102 (statement -> type_alias_declaration .)
    TYPE            reduce using rule 102 (statement -> type_alias_declaration .)
    TEST            reduce using rule 102 (statement -> type_alias_declaration .)
    IF              reduce using rule 102 (statement -> type_alias_declaration .)
    MATCH           reduce using rule 102 (statement -> type_alias_declaration .)
    CASE            reduce using rule 102 (statement -> type_alias_declaration .)
    FOR             reduce using rule 102 (statement -> type_alias_declaration .)
    WHILE           reduce using rule 102 (statement -> type_alias_declaration .)
    LOOP            reduce using rule 102 (statement -> type_alias_declaration .)
    BREAK           reduce using rule 102 (statement -> type_alias_declaration .)
    CONTINUE        reduce using rule 102 (statement -> type_alias_declaration .)
    RETURN          reduce using rule 102 (statement -> type_alias_declaration .)
    TRY             reduce using rule 102 (statement -> type_alias_declaration .)
    THROW           reduce using rule 102 (statement -> type_alias_declaration .)
    ASSERT          reduce using rule 102 (statement -> type_alias_declaration .)
    ROUTINE         reduce using rule 102 (statement -> type_alias_declaration .)
    AT              reduce using rule 102 (statement -> type_alias_declaration .)
    NUMBER          reduce using rule 102 (statement -> type_alias_declaration .)
    STRING          reduce using rule 102 (statement -> type_alias_declaration .)
    TRUE            reduce using rule 102 (statement -> type_alias_declaration .)
    FALSE           reduce using rule 102 (statement -> type_alias_declaration .)
    NULL            reduce using rule 102 (statement -> type_alias_declaration .)
    IDENTIFIER      reduce using rule 102 (statement -> type_alias_declaration .)
    LPAREN          reduce using rule 102 (statement -> type_alias_declaration .)
    LBRACKET        reduce using rule 102 (statement -> type_alias_declaration .)
    LBRACE          reduce using rule 102 (statement -> type_alias_declaration .)
    FN              reduce using rule 102 (statement -> type_alias_declaration .)
    ASYNC           reduce using rule 102 (statement -> type_alias_declaration .)
    PARALLEL        reduce using rule 102 (statement -> type_alias_declaration .)
    NOT             reduce using rule 102 (statement -> type_alias_declaration .)
    MINUS           reduce using rule 102 (statement -> type_alias_declaration .)
    AWAIT           reduce using rule 102 (statement -> type_alias_declaration .)
    RBRACE          reduce using rule 102 (statement -> type_alias_declaration .)


state 98

    (103) statement -> test_declaration .

    LET             reduce using rule 103 (statement -> test_declaration .)
    CONST           reduce using rule 103 (statement -> test_declaration .)
    STRUCT          reduce using rule 103 (statement -> test_declaration .)
    ENUM            reduce using rule 103 (statement -> test_declaration .)
    INTERFACE       reduce using rule 103 (statement -> test_declaration .)
    TYPE            reduce using rule 103 (statement -> test_declaration .)
    TEST            reduce using rule 103 (statement -> test_declaration .)
    IF              reduce using rule 103 (statement -> test_declaration .)
    MATCH           reduce using rule 103 (statement -> test_declaration .)
    CASE            reduce using rule 103 (statement -> test_declaration .)
    FOR             reduce using rule 103 (statement -> test_declaration .)
    WHILE           reduce using rule 103 (statement -> test_declaration .)
    LOOP            reduce using rule 103 (statement -> test_declaration .)
    BREAK           reduce using rule 103 (statement -> test_declaration .)
    CONTINUE        reduce using rule 103 (statement -> test_declaration .)
    RETURN          reduce using rule 103 (statement -> test_declaration .)
    TRY             reduce using rule 103 (statement -> test_declaration .)
    THROW           reduce using rule 103 (statement -> test_declaration .)
    ASSERT          reduce using rule 103 (statement -> test_declaration .)
    ROUTINE         reduce using rule 103 (statement -> test_declaration .)
    AT              reduce using rule 103 (statement -> test_declaration .)
    NUMBER          reduce using rule 103 (statement -> test_declaration .)
    STRING          reduce using rule 103 (statement -> test_declaration .)
    TRUE            reduce using rule 103 (statement -> test_declaration .)
    FALSE           reduce using rule 103 (statement -> test_declaration .)
    NULL            reduce using rule 103 (statement -> test_declaration .)
    IDENTIFIER      reduce using rule 103 (statement -> test_declaration .)
    LPAREN          reduce using rule 103 (statement -> test_declaration .)
    LBRACKET        reduce using rule 103 (statement -> test_declaration .)
    LBRACE          reduce using rule 103 (statement -> test_declaration .)
    FN              reduce using rule 103 (statement -> test_declaration .)
    ASYNC           reduce using rule 103 (statement -> test_declaration .)
    PARALLEL        reduce using rule 103 (statement -> test_declaration .)
    NOT             reduce using rule 103 (statement -> test_declaration .)
    MINUS           reduce using rule 103 (statement -> test_declaration .)
    AWAIT           reduce using rule 103 (statement -> test_declaration .)
    RBRACE          reduce using rule 103 (statement -> test_declaration .)


state 99

    (104) statement -> if_statement .

    LET             reduce using rule 104 (statement -> if_statement .)
    CONST           reduce using rule 104 (statement -> if_statement .)
    STRUCT          reduce using rule 104 (statement -> if_statement .)
    ENUM            reduce using rule 104 (statement -> if_statement .)
    INTERFACE       reduce using rule 104 (statement -> if_statement .)
    TYPE            reduce using rule 104 (statement -> if_statement .)
    TEST            reduce using rule 104 (statement -> if_statement .)
    IF              reduce using rule 104 (statement -> if_statement .)
    MATCH           reduce using rule 104 (statement -> if_statement .)
    CASE            reduce using rule 104 (statement -> if_statement .)
    FOR             reduce using rule 104 (statement -> if_statement .)
    WHILE           reduce using rule 104 (statement -> if_statement .)
    LOOP            reduce using rule 104 (statement -> if_statement .)
    BREAK           reduce using rule 104 (statement -> if_statement .)
    CONTINUE        reduce using rule 104 (statement -> if_statement .)
    RETURN          reduce using rule 104 (statement -> if_statement .)
    TRY             reduce using rule 104 (statement -> if_statement .)
    THROW           reduce using rule 104 (statement -> if_statement .)
    ASSERT          reduce using rule 104 (statement -> if_statement .)
    ROUTINE         reduce using rule 104 (statement -> if_statement .)
    AT              reduce using rule 104 (statement -> if_statement .)
    NUMBER          reduce using rule 104 (statement -> if_statement .)
    STRING          reduce using rule 104 (statement -> if_statement .)
    TRUE            reduce using rule 104 (statement -> if_statement .)
    FALSE           reduce using rule 104 (statement -> if_statement .)
    NULL            reduce using rule 104 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 104 (statement -> if_statement .)
    LPAREN          reduce using rule 104 (statement -> if_statement .)
    LBRACKET        reduce using rule 104 (statement -> if_statement .)
    LBRACE          reduce using rule 104 (statement -> if_statement .)
    FN              reduce using rule 104 (statement -> if_statement .)
    ASYNC           reduce using rule 104 (statement -> if_statement .)
    PARALLEL        reduce using rule 104 (statement -> if_statement .)
    NOT             reduce using rule 104 (statement -> if_statement .)
    MINUS           reduce using rule 104 (statement -> if_statement .)
    AWAIT           reduce using rule 104 (statement -> if_statement .)
    RBRACE          reduce using rule 104 (statement -> if_statement .)


state 100

    (105) statement -> match_statement .

    LET             reduce using rule 105 (statement -> match_statement .)
    CONST           reduce using rule 105 (statement -> match_statement .)
    STRUCT          reduce using rule 105 (statement -> match_statement .)
    ENUM            reduce using rule 105 (statement -> match_statement .)
    INTERFACE       reduce using rule 105 (statement -> match_statement .)
    TYPE            reduce using rule 105 (statement -> match_statement .)
    TEST            reduce using rule 105 (statement -> match_statement .)
    IF              reduce using rule 105 (statement -> match_statement .)
    MATCH           reduce using rule 105 (statement -> match_statement .)
    CASE            reduce using rule 105 (statement -> match_statement .)
    FOR             reduce using rule 105 (statement -> match_statement .)
    WHILE           reduce using rule 105 (statement -> match_statement .)
    LOOP            reduce using rule 105 (statement -> match_statement .)
    BREAK           reduce using rule 105 (statement -> match_statement .)
    CONTINUE        reduce using rule 105 (statement -> match_statement .)
    RETURN          reduce using rule 105 (statement -> match_statement .)
    TRY             reduce using rule 105 (statement -> match_statement .)
    THROW           reduce using rule 105 (statement -> match_statement .)
    ASSERT          reduce using rule 105 (statement -> match_statement .)
    ROUTINE         reduce using rule 105 (statement -> match_statement .)
    AT              reduce using rule 105 (statement -> match_statement .)
    NUMBER          reduce using rule 105 (statement -> match_statement .)
    STRING          reduce using rule 105 (statement -> match_statement .)
    TRUE            reduce using rule 105 (statement -> match_statement .)
    FALSE           reduce using rule 105 (statement -> match_statement .)
    NULL            reduce using rule 105 (statement -> match_statement .)
    IDENTIFIER      reduce using rule 105 (statement -> match_statement .)
    LPAREN          reduce using rule 105 (statement -> match_statement .)
    LBRACKET        reduce using rule 105 (statement -> match_statement .)
    LBRACE          reduce using rule 105 (statement -> match_statement .)
    FN              reduce using rule 105 (statement -> match_statement .)
    ASYNC           reduce using rule 105 (statement -> match_statement .)
    PARALLEL        reduce using rule 105 (statement -> match_statement .)
    NOT             reduce using rule 105 (statement -> match_statement .)
    MINUS           reduce using rule 105 (statement -> match_statement .)
    AWAIT           reduce using rule 105 (statement -> match_statement .)
    RBRACE          reduce using rule 105 (statement -> match_statement .)


state 101

    (106) statement -> match_case_statement .

    LET             reduce using rule 106 (statement -> match_case_statement .)
    CONST           reduce using rule 106 (statement -> match_case_statement .)
    STRUCT          reduce using rule 106 (statement -> match_case_statement .)
    ENUM            reduce using rule 106 (statement -> match_case_statement .)
    INTERFACE       reduce using rule 106 (statement -> match_case_statement .)
    TYPE            reduce using rule 106 (statement -> match_case_statement .)
    TEST            reduce using rule 106 (statement -> match_case_statement .)
    IF              reduce using rule 106 (statement -> match_case_statement .)
    MATCH           reduce using rule 106 (statement -> match_case_statement .)
    CASE            reduce using rule 106 (statement -> match_case_statement .)
    FOR             reduce using rule 106 (statement -> match_case_statement .)
    WHILE           reduce using rule 106 (statement -> match_case_statement .)
    LOOP            reduce using rule 106 (statement -> match_case_statement .)
    BREAK           reduce using rule 106 (statement -> match_case_statement .)
    CONTINUE        reduce using rule 106 (statement -> match_case_statement .)
    RETURN          reduce using rule 106 (statement -> match_case_statement .)
    TRY             reduce using rule 106 (statement -> match_case_statement .)
    THROW           reduce using rule 106 (statement -> match_case_statement .)
    ASSERT          reduce using rule 106 (statement -> match_case_statement .)
    ROUTINE         reduce using rule 106 (statement -> match_case_statement .)
    AT              reduce using rule 106 (statement -> match_case_statement .)
    NUMBER          reduce using rule 106 (statement -> match_case_statement .)
    STRING          reduce using rule 106 (statement -> match_case_statement .)
    TRUE            reduce using rule 106 (statement -> match_case_statement .)
    FALSE           reduce using rule 106 (statement -> match_case_statement .)
    NULL            reduce using rule 106 (statement -> match_case_statement .)
    IDENTIFIER      reduce using rule 106 (statement -> match_case_statement .)
    LPAREN          reduce using rule 106 (statement -> match_case_statement .)
    LBRACKET        reduce using rule 106 (statement -> match_case_statement .)
    LBRACE          reduce using rule 106 (statement -> match_case_statement .)
    FN              reduce using rule 106 (statement -> match_case_statement .)
    ASYNC           reduce using rule 106 (statement -> match_case_statement .)
    PARALLEL        reduce using rule 106 (statement -> match_case_statement .)
    NOT             reduce using rule 106 (statement -> match_case_statement .)
    MINUS           reduce using rule 106 (statement -> match_case_statement .)
    AWAIT           reduce using rule 106 (statement -> match_case_statement .)
    RBRACE          reduce using rule 106 (statement -> match_case_statement .)


state 102

    (107) statement -> for_statement .

    LET             reduce using rule 107 (statement -> for_statement .)
    CONST           reduce using rule 107 (statement -> for_statement .)
    STRUCT          reduce using rule 107 (statement -> for_statement .)
    ENUM            reduce using rule 107 (statement -> for_statement .)
    INTERFACE       reduce using rule 107 (statement -> for_statement .)
    TYPE            reduce using rule 107 (statement -> for_statement .)
    TEST            reduce using rule 107 (statement -> for_statement .)
    IF              reduce using rule 107 (statement -> for_statement .)
    MATCH           reduce using rule 107 (statement -> for_statement .)
    CASE            reduce using rule 107 (statement -> for_statement .)
    FOR             reduce using rule 107 (statement -> for_statement .)
    WHILE           reduce using rule 107 (statement -> for_statement .)
    LOOP            reduce using rule 107 (statement -> for_statement .)
    BREAK           reduce using rule 107 (statement -> for_statement .)
    CONTINUE        reduce using rule 107 (statement -> for_statement .)
    RETURN          reduce using rule 107 (statement -> for_statement .)
    TRY             reduce using rule 107 (statement -> for_statement .)
    THROW           reduce using rule 107 (statement -> for_statement .)
    ASSERT          reduce using rule 107 (statement -> for_statement .)
    ROUTINE         reduce using rule 107 (statement -> for_statement .)
    AT              reduce using rule 107 (statement -> for_statement .)
    NUMBER          reduce using rule 107 (statement -> for_statement .)
    STRING          reduce using rule 107 (statement -> for_statement .)
    TRUE            reduce using rule 107 (statement -> for_statement .)
    FALSE           reduce using rule 107 (statement -> for_statement .)
    NULL            reduce using rule 107 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 107 (statement -> for_statement .)
    LPAREN          reduce using rule 107 (statement -> for_statement .)
    LBRACKET        reduce using rule 107 (statement -> for_statement .)
    LBRACE          reduce using rule 107 (statement -> for_statement .)
    FN              reduce using rule 107 (statement -> for_statement .)
    ASYNC           reduce using rule 107 (statement -> for_statement .)
    PARALLEL        reduce using rule 107 (statement -> for_statement .)
    NOT             reduce using rule 107 (statement -> for_statement .)
    MINUS           reduce using rule 107 (statement -> for_statement .)
    AWAIT           reduce using rule 107 (statement -> for_statement .)
    RBRACE          reduce using rule 107 (statement -> for_statement .)


state 103

    (108) statement -> while_statement .

    LET             reduce using rule 108 (statement -> while_statement .)
    CONST           reduce using rule 108 (statement -> while_statement .)
    STRUCT          reduce using rule 108 (statement -> while_statement .)
    ENUM            reduce using rule 108 (statement -> while_statement .)
    INTERFACE       reduce using rule 108 (statement -> while_statement .)
    TYPE            reduce using rule 108 (statement -> while_statement .)
    TEST            reduce using rule 108 (statement -> while_statement .)
    IF              reduce using rule 108 (statement -> while_statement .)
    MATCH           reduce using rule 108 (statement -> while_statement .)
    CASE            reduce using rule 108 (statement -> while_statement .)
    FOR             reduce using rule 108 (statement -> while_statement .)
    WHILE           reduce using rule 108 (statement -> while_statement .)
    LOOP            reduce using rule 108 (statement -> while_statement .)
    BREAK           reduce using rule 108 (statement -> while_statement .)
    CONTINUE        reduce using rule 108 (statement -> while_statement .)
    RETURN          reduce using rule 108 (statement -> while_statement .)
    TRY             reduce using rule 108 (statement -> while_statement .)
    THROW           reduce using rule 108 (statement -> while_statement .)
    ASSERT          reduce using rule 108 (statement -> while_statement .)
    ROUTINE         reduce using rule 108 (statement -> while_statement .)
    AT              reduce using rule 108 (statement -> while_statement .)
    NUMBER          reduce using rule 108 (statement -> while_statement .)
    STRING          reduce using rule 108 (statement -> while_statement .)
    TRUE            reduce using rule 108 (statement -> while_statement .)
    FALSE           reduce using rule 108 (statement -> while_statement .)
    NULL            reduce using rule 108 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 108 (statement -> while_statement .)
    LPAREN          reduce using rule 108 (statement -> while_statement .)
    LBRACKET        reduce using rule 108 (statement -> while_statement .)
    LBRACE          reduce using rule 108 (statement -> while_statement .)
    FN              reduce using rule 108 (statement -> while_statement .)
    ASYNC           reduce using rule 108 (statement -> while_statement .)
    PARALLEL        reduce using rule 108 (statement -> while_statement .)
    NOT             reduce using rule 108 (statement -> while_statement .)
    MINUS           reduce using rule 108 (statement -> while_statement .)
    AWAIT           reduce using rule 108 (statement -> while_statement .)
    RBRACE          reduce using rule 108 (statement -> while_statement .)


state 104

    (109) statement -> loop_statement .

    LET             reduce using rule 109 (statement -> loop_statement .)
    CONST           reduce using rule 109 (statement -> loop_statement .)
    STRUCT          reduce using rule 109 (statement -> loop_statement .)
    ENUM            reduce using rule 109 (statement -> loop_statement .)
    INTERFACE       reduce using rule 109 (statement -> loop_statement .)
    TYPE            reduce using rule 109 (statement -> loop_statement .)
    TEST            reduce using rule 109 (statement -> loop_statement .)
    IF              reduce using rule 109 (statement -> loop_statement .)
    MATCH           reduce using rule 109 (statement -> loop_statement .)
    CASE            reduce using rule 109 (statement -> loop_statement .)
    FOR             reduce using rule 109 (statement -> loop_statement .)
    WHILE           reduce using rule 109 (statement -> loop_statement .)
    LOOP            reduce using rule 109 (statement -> loop_statement .)
    BREAK           reduce using rule 109 (statement -> loop_statement .)
    CONTINUE        reduce using rule 109 (statement -> loop_statement .)
    RETURN          reduce using rule 109 (statement -> loop_statement .)
    TRY             reduce using rule 109 (statement -> loop_statement .)
    THROW           reduce using rule 109 (statement -> loop_statement .)
    ASSERT          reduce using rule 109 (statement -> loop_statement .)
    ROUTINE         reduce using rule 109 (statement -> loop_statement .)
    AT              reduce using rule 109 (statement -> loop_statement .)
    NUMBER          reduce using rule 109 (statement -> loop_statement .)
    STRING          reduce using rule 109 (statement -> loop_statement .)
    TRUE            reduce using rule 109 (statement -> loop_statement .)
    FALSE           reduce using rule 109 (statement -> loop_statement .)
    NULL            reduce using rule 109 (statement -> loop_statement .)
    IDENTIFIER      reduce using rule 109 (statement -> loop_statement .)
    LPAREN          reduce using rule 109 (statement -> loop_statement .)
    LBRACKET        reduce using rule 109 (statement -> loop_statement .)
    LBRACE          reduce using rule 109 (statement -> loop_statement .)
    FN              reduce using rule 109 (statement -> loop_statement .)
    ASYNC           reduce using rule 109 (statement -> loop_statement .)
    PARALLEL        reduce using rule 109 (statement -> loop_statement .)
    NOT             reduce using rule 109 (statement -> loop_statement .)
    MINUS           reduce using rule 109 (statement -> loop_statement .)
    AWAIT           reduce using rule 109 (statement -> loop_statement .)
    RBRACE          reduce using rule 109 (statement -> loop_statement .)


state 105

    (110) statement -> break_statement .

    LET             reduce using rule 110 (statement -> break_statement .)
    CONST           reduce using rule 110 (statement -> break_statement .)
    STRUCT          reduce using rule 110 (statement -> break_statement .)
    ENUM            reduce using rule 110 (statement -> break_statement .)
    INTERFACE       reduce using rule 110 (statement -> break_statement .)
    TYPE            reduce using rule 110 (statement -> break_statement .)
    TEST            reduce using rule 110 (statement -> break_statement .)
    IF              reduce using rule 110 (statement -> break_statement .)
    MATCH           reduce using rule 110 (statement -> break_statement .)
    CASE            reduce using rule 110 (statement -> break_statement .)
    FOR             reduce using rule 110 (statement -> break_statement .)
    WHILE           reduce using rule 110 (statement -> break_statement .)
    LOOP            reduce using rule 110 (statement -> break_statement .)
    BREAK           reduce using rule 110 (statement -> break_statement .)
    CONTINUE        reduce using rule 110 (statement -> break_statement .)
    RETURN          reduce using rule 110 (statement -> break_statement .)
    TRY             reduce using rule 110 (statement -> break_statement .)
    THROW           reduce using rule 110 (statement -> break_statement .)
    ASSERT          reduce using rule 110 (statement -> break_statement .)
    ROUTINE         reduce using rule 110 (statement -> break_statement .)
    AT              reduce using rule 110 (statement -> break_statement .)
    NUMBER          reduce using rule 110 (statement -> break_statement .)
    STRING          reduce using rule 110 (statement -> break_statement .)
    TRUE            reduce using rule 110 (statement -> break_statement .)
    FALSE           reduce using rule 110 (statement -> break_statement .)
    NULL            reduce using rule 110 (statement -> break_statement .)
    IDENTIFIER      reduce using rule 110 (statement -> break_statement .)
    LPAREN          reduce using rule 110 (statement -> break_statement .)
    LBRACKET        reduce using rule 110 (statement -> break_statement .)
    LBRACE          reduce using rule 110 (statement -> break_statement .)
    FN              reduce using rule 110 (statement -> break_statement .)
    ASYNC           reduce using rule 110 (statement -> break_statement .)
    PARALLEL        reduce using rule 110 (statement -> break_statement .)
    NOT             reduce using rule 110 (statement -> break_statement .)
    MINUS           reduce using rule 110 (statement -> break_statement .)
    AWAIT           reduce using rule 110 (statement -> break_statement .)
    RBRACE          reduce using rule 110 (statement -> break_statement .)


state 106

    (111) statement -> continue_statement .

    LET             reduce using rule 111 (statement -> continue_statement .)
    CONST           reduce using rule 111 (statement -> continue_statement .)
    STRUCT          reduce using rule 111 (statement -> continue_statement .)
    ENUM            reduce using rule 111 (statement -> continue_statement .)
    INTERFACE       reduce using rule 111 (statement -> continue_statement .)
    TYPE            reduce using rule 111 (statement -> continue_statement .)
    TEST            reduce using rule 111 (statement -> continue_statement .)
    IF              reduce using rule 111 (statement -> continue_statement .)
    MATCH           reduce using rule 111 (statement -> continue_statement .)
    CASE            reduce using rule 111 (statement -> continue_statement .)
    FOR             reduce using rule 111 (statement -> continue_statement .)
    WHILE           reduce using rule 111 (statement -> continue_statement .)
    LOOP            reduce using rule 111 (statement -> continue_statement .)
    BREAK           reduce using rule 111 (statement -> continue_statement .)
    CONTINUE        reduce using rule 111 (statement -> continue_statement .)
    RETURN          reduce using rule 111 (statement -> continue_statement .)
    TRY             reduce using rule 111 (statement -> continue_statement .)
    THROW           reduce using rule 111 (statement -> continue_statement .)
    ASSERT          reduce using rule 111 (statement -> continue_statement .)
    ROUTINE         reduce using rule 111 (statement -> continue_statement .)
    AT              reduce using rule 111 (statement -> continue_statement .)
    NUMBER          reduce using rule 111 (statement -> continue_statement .)
    STRING          reduce using rule 111 (statement -> continue_statement .)
    TRUE            reduce using rule 111 (statement -> continue_statement .)
    FALSE           reduce using rule 111 (statement -> continue_statement .)
    NULL            reduce using rule 111 (statement -> continue_statement .)
    IDENTIFIER      reduce using rule 111 (statement -> continue_statement .)
    LPAREN          reduce using rule 111 (statement -> continue_statement .)
    LBRACKET        reduce using rule 111 (statement -> continue_statement .)
    LBRACE          reduce using rule 111 (statement -> continue_statement .)
    FN              reduce using rule 111 (statement -> continue_statement .)
    ASYNC           reduce using rule 111 (statement -> continue_statement .)
    PARALLEL        reduce using rule 111 (statement -> continue_statement .)
    NOT             reduce using rule 111 (statement -> continue_statement .)
    MINUS           reduce using rule 111 (statement -> continue_statement .)
    AWAIT           reduce using rule 111 (statement -> continue_statement .)
    RBRACE          reduce using rule 111 (statement -> continue_statement .)


state 107

    (112) statement -> return_statement .

    LET             reduce using rule 112 (statement -> return_statement .)
    CONST           reduce using rule 112 (statement -> return_statement .)
    STRUCT          reduce using rule 112 (statement -> return_statement .)
    ENUM            reduce using rule 112 (statement -> return_statement .)
    INTERFACE       reduce using rule 112 (statement -> return_statement .)
    TYPE            reduce using rule 112 (statement -> return_statement .)
    TEST            reduce using rule 112 (statement -> return_statement .)
    IF              reduce using rule 112 (statement -> return_statement .)
    MATCH           reduce using rule 112 (statement -> return_statement .)
    CASE            reduce using rule 112 (statement -> return_statement .)
    FOR             reduce using rule 112 (statement -> return_statement .)
    WHILE           reduce using rule 112 (statement -> return_statement .)
    LOOP            reduce using rule 112 (statement -> return_statement .)
    BREAK           reduce using rule 112 (statement -> return_statement .)
    CONTINUE        reduce using rule 112 (statement -> return_statement .)
    RETURN          reduce using rule 112 (statement -> return_statement .)
    TRY             reduce using rule 112 (statement -> return_statement .)
    THROW           reduce using rule 112 (statement -> return_statement .)
    ASSERT          reduce using rule 112 (statement -> return_statement .)
    ROUTINE         reduce using rule 112 (statement -> return_statement .)
    AT              reduce using rule 112 (statement -> return_statement .)
    NUMBER          reduce using rule 112 (statement -> return_statement .)
    STRING          reduce using rule 112 (statement -> return_statement .)
    TRUE            reduce using rule 112 (statement -> return_statement .)
    FALSE           reduce using rule 112 (statement -> return_statement .)
    NULL            reduce using rule 112 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 112 (statement -> return_statement .)
    LPAREN          reduce using rule 112 (statement -> return_statement .)
    LBRACKET        reduce using rule 112 (statement -> return_statement .)
    LBRACE          reduce using rule 112 (statement -> return_statement .)
    FN              reduce using rule 112 (statement -> return_statement .)
    ASYNC           reduce using rule 112 (statement -> return_statement .)
    PARALLEL        reduce using rule 112 (statement -> return_statement .)
    NOT             reduce using rule 112 (statement -> return_statement .)
    MINUS           reduce using rule 112 (statement -> return_statement .)
    AWAIT           reduce using rule 112 (statement -> return_statement .)
    RBRACE          reduce using rule 112 (statement -> return_statement .)


state 108

    (113) statement -> try_statement .

    LET             reduce using rule 113 (statement -> try_statement .)
    CONST           reduce using rule 113 (statement -> try_statement .)
    STRUCT          reduce using rule 113 (statement -> try_statement .)
    ENUM            reduce using rule 113 (statement -> try_statement .)
    INTERFACE       reduce using rule 113 (statement -> try_statement .)
    TYPE            reduce using rule 113 (statement -> try_statement .)
    TEST            reduce using rule 113 (statement -> try_statement .)
    IF              reduce using rule 113 (statement -> try_statement .)
    MATCH           reduce using rule 113 (statement -> try_statement .)
    CASE            reduce using rule 113 (statement -> try_statement .)
    FOR             reduce using rule 113 (statement -> try_statement .)
    WHILE           reduce using rule 113 (statement -> try_statement .)
    LOOP            reduce using rule 113 (statement -> try_statement .)
    BREAK           reduce using rule 113 (statement -> try_statement .)
    CONTINUE        reduce using rule 113 (statement -> try_statement .)
    RETURN          reduce using rule 113 (statement -> try_statement .)
    TRY             reduce using rule 113 (statement -> try_statement .)
    THROW           reduce using rule 113 (statement -> try_statement .)
    ASSERT          reduce using rule 113 (statement -> try_statement .)
    ROUTINE         reduce using rule 113 (statement -> try_statement .)
    AT              reduce using rule 113 (statement -> try_statement .)
    NUMBER          reduce using rule 113 (statement -> try_statement .)
    STRING          reduce using rule 113 (statement -> try_statement .)
    TRUE            reduce using rule 113 (statement -> try_statement .)
    FALSE           reduce using rule 113 (statement -> try_statement .)
    NULL            reduce using rule 113 (statement -> try_statement .)
    IDENTIFIER      reduce using rule 113 (statement -> try_statement .)
    LPAREN          reduce using rule 113 (statement -> try_statement .)
    LBRACKET        reduce using rule 113 (statement -> try_statement .)
    LBRACE          reduce using rule 113 (statement -> try_statement .)
    FN              reduce using rule 113 (statement -> try_statement .)
    ASYNC           reduce using rule 113 (statement -> try_statement .)
    PARALLEL        reduce using rule 113 (statement -> try_statement .)
    NOT             reduce using rule 113 (statement -> try_statement .)
    MINUS           reduce using rule 113 (statement -> try_statement .)
    AWAIT           reduce using rule 113 (statement -> try_statement .)
    RBRACE          reduce using rule 113 (statement -> try_statement .)


state 109

    (114) statement -> throw_statement .

    LET             reduce using rule 114 (statement -> throw_statement .)
    CONST           reduce using rule 114 (statement -> throw_statement .)
    STRUCT          reduce using rule 114 (statement -> throw_statement .)
    ENUM            reduce using rule 114 (statement -> throw_statement .)
    INTERFACE       reduce using rule 114 (statement -> throw_statement .)
    TYPE            reduce using rule 114 (statement -> throw_statement .)
    TEST            reduce using rule 114 (statement -> throw_statement .)
    IF              reduce using rule 114 (statement -> throw_statement .)
    MATCH           reduce using rule 114 (statement -> throw_statement .)
    CASE            reduce using rule 114 (statement -> throw_statement .)
    FOR             reduce using rule 114 (statement -> throw_statement .)
    WHILE           reduce using rule 114 (statement -> throw_statement .)
    LOOP            reduce using rule 114 (statement -> throw_statement .)
    BREAK           reduce using rule 114 (statement -> throw_statement .)
    CONTINUE        reduce using rule 114 (statement -> throw_statement .)
    RETURN          reduce using rule 114 (statement -> throw_statement .)
    TRY             reduce using rule 114 (statement -> throw_statement .)
    THROW           reduce using rule 114 (statement -> throw_statement .)
    ASSERT          reduce using rule 114 (statement -> throw_statement .)
    ROUTINE         reduce using rule 114 (statement -> throw_statement .)
    AT              reduce using rule 114 (statement -> throw_statement .)
    NUMBER          reduce using rule 114 (statement -> throw_statement .)
    STRING          reduce using rule 114 (statement -> throw_statement .)
    TRUE            reduce using rule 114 (statement -> throw_statement .)
    FALSE           reduce using rule 114 (statement -> throw_statement .)
    NULL            reduce using rule 114 (statement -> throw_statement .)
    IDENTIFIER      reduce using rule 114 (statement -> throw_statement .)
    LPAREN          reduce using rule 114 (statement -> throw_statement .)
    LBRACKET        reduce using rule 114 (statement -> throw_statement .)
    LBRACE          reduce using rule 114 (statement -> throw_statement .)
    FN              reduce using rule 114 (statement -> throw_statement .)
    ASYNC           reduce using rule 114 (statement -> throw_statement .)
    PARALLEL        reduce using rule 114 (statement -> throw_statement .)
    NOT             reduce using rule 114 (statement -> throw_statement .)
    MINUS           reduce using rule 114 (statement -> throw_statement .)
    AWAIT           reduce using rule 114 (statement -> throw_statement .)
    RBRACE          reduce using rule 114 (statement -> throw_statement .)


state 110

    (115) statement -> assert_statement .

    LET             reduce using rule 115 (statement -> assert_statement .)
    CONST           reduce using rule 115 (statement -> assert_statement .)
    STRUCT          reduce using rule 115 (statement -> assert_statement .)
    ENUM            reduce using rule 115 (statement -> assert_statement .)
    INTERFACE       reduce using rule 115 (statement -> assert_statement .)
    TYPE            reduce using rule 115 (statement -> assert_statement .)
    TEST            reduce using rule 115 (statement -> assert_statement .)
    IF              reduce using rule 115 (statement -> assert_statement .)
    MATCH           reduce using rule 115 (statement -> assert_statement .)
    CASE            reduce using rule 115 (statement -> assert_statement .)
    FOR             reduce using rule 115 (statement -> assert_statement .)
    WHILE           reduce using rule 115 (statement -> assert_statement .)
    LOOP            reduce using rule 115 (statement -> assert_statement .)
    BREAK           reduce using rule 115 (statement -> assert_statement .)
    CONTINUE        reduce using rule 115 (statement -> assert_statement .)
    RETURN          reduce using rule 115 (statement -> assert_statement .)
    TRY             reduce using rule 115 (statement -> assert_statement .)
    THROW           reduce using rule 115 (statement -> assert_statement .)
    ASSERT          reduce using rule 115 (statement -> assert_statement .)
    ROUTINE         reduce using rule 115 (statement -> assert_statement .)
    AT              reduce using rule 115 (statement -> assert_statement .)
    NUMBER          reduce using rule 115 (statement -> assert_statement .)
    STRING          reduce using rule 115 (statement -> assert_statement .)
    TRUE            reduce using rule 115 (statement -> assert_statement .)
    FALSE           reduce using rule 115 (statement -> assert_statement .)
    NULL            reduce using rule 115 (statement -> assert_statement .)
    IDENTIFIER      reduce using rule 115 (statement -> assert_statement .)
    LPAREN          reduce using rule 115 (statement -> assert_statement .)
    LBRACKET        reduce using rule 115 (statement -> assert_statement .)
    LBRACE          reduce using rule 115 (statement -> assert_statement .)
    FN              reduce using rule 115 (statement -> assert_statement .)
    ASYNC           reduce using rule 115 (statement -> assert_statement .)
    PARALLEL        reduce using rule 115 (statement -> assert_statement .)
    NOT             reduce using rule 115 (statement -> assert_statement .)
    MINUS           reduce using rule 115 (statement -> assert_statement .)
    AWAIT           reduce using rule 115 (statement -> assert_statement .)
    RBRACE          reduce using rule 115 (statement -> assert_statement .)


state 111

    (116) statement -> routine_statement .

    LET             reduce using rule 116 (statement -> routine_statement .)
    CONST           reduce using rule 116 (statement -> routine_statement .)
    STRUCT          reduce using rule 116 (statement -> routine_statement .)
    ENUM            reduce using rule 116 (statement -> routine_statement .)
    INTERFACE       reduce using rule 116 (statement -> routine_statement .)
    TYPE            reduce using rule 116 (statement -> routine_statement .)
    TEST            reduce using rule 116 (statement -> routine_statement .)
    IF              reduce using rule 116 (statement -> routine_statement .)
    MATCH           reduce using rule 116 (statement -> routine_statement .)
    CASE            reduce using rule 116 (statement -> routine_statement .)
    FOR             reduce using rule 116 (statement -> routine_statement .)
    WHILE           reduce using rule 116 (statement -> routine_statement .)
    LOOP            reduce using rule 116 (statement -> routine_statement .)
    BREAK           reduce using rule 116 (statement -> routine_statement .)
    CONTINUE        reduce using rule 116 (statement -> routine_statement .)
    RETURN          reduce using rule 116 (statement -> routine_statement .)
    TRY             reduce using rule 116 (statement -> routine_statement .)
    THROW           reduce using rule 116 (statement -> routine_statement .)
    ASSERT          reduce using rule 116 (statement -> routine_statement .)
    ROUTINE         reduce using rule 116 (statement -> routine_statement .)
    AT              reduce using rule 116 (statement -> routine_statement .)
    NUMBER          reduce using rule 116 (statement -> routine_statement .)
    STRING          reduce using rule 116 (statement -> routine_statement .)
    TRUE            reduce using rule 116 (statement -> routine_statement .)
    FALSE           reduce using rule 116 (statement -> routine_statement .)
    NULL            reduce using rule 116 (statement -> routine_statement .)
    IDENTIFIER      reduce using rule 116 (statement -> routine_statement .)
    LPAREN          reduce using rule 116 (statement -> routine_statement .)
    LBRACKET        reduce using rule 116 (statement -> routine_statement .)
    LBRACE          reduce using rule 116 (statement -> routine_statement .)
    FN              reduce using rule 116 (statement -> routine_statement .)
    ASYNC           reduce using rule 116 (statement -> routine_statement .)
    PARALLEL        reduce using rule 116 (statement -> routine_statement .)
    NOT             reduce using rule 116 (statement -> routine_statement .)
    MINUS           reduce using rule 116 (statement -> routine_statement .)
    AWAIT           reduce using rule 116 (statement -> routine_statement .)
    RBRACE          reduce using rule 116 (statement -> routine_statement .)


state 112

    (117) statement -> expression_statement .

    LET             reduce using rule 117 (statement -> expression_statement .)
    CONST           reduce using rule 117 (statement -> expression_statement .)
    STRUCT          reduce using rule 117 (statement -> expression_statement .)
    ENUM            reduce using rule 117 (statement -> expression_statement .)
    INTERFACE       reduce using rule 117 (statement -> expression_statement .)
    TYPE            reduce using rule 117 (statement -> expression_statement .)
    TEST            reduce using rule 117 (statement -> expression_statement .)
    IF              reduce using rule 117 (statement -> expression_statement .)
    MATCH           reduce using rule 117 (statement -> expression_statement .)
    CASE            reduce using rule 117 (statement -> expression_statement .)
    FOR             reduce using rule 117 (statement -> expression_statement .)
    WHILE           reduce using rule 117 (statement -> expression_statement .)
    LOOP            reduce using rule 117 (statement -> expression_statement .)
    BREAK           reduce using rule 117 (statement -> expression_statement .)
    CONTINUE        reduce using rule 117 (statement -> expression_statement .)
    RETURN          reduce using rule 117 (statement -> expression_statement .)
    TRY             reduce using rule 117 (statement -> expression_statement .)
    THROW           reduce using rule 117 (statement -> expression_statement .)
    ASSERT          reduce using rule 117 (statement -> expression_statement .)
    ROUTINE         reduce using rule 117 (statement -> expression_statement .)
    AT              reduce using rule 117 (statement -> expression_statement .)
    NUMBER          reduce using rule 117 (statement -> expression_statement .)
    STRING          reduce using rule 117 (statement -> expression_statement .)
    TRUE            reduce using rule 117 (statement -> expression_statement .)
    FALSE           reduce using rule 117 (statement -> expression_statement .)
    NULL            reduce using rule 117 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 117 (statement -> expression_statement .)
    LPAREN          reduce using rule 117 (statement -> expression_statement .)
    LBRACKET        reduce using rule 117 (statement -> expression_statement .)
    LBRACE          reduce using rule 117 (statement -> expression_statement .)
    FN              reduce using rule 117 (statement -> expression_statement .)
    ASYNC           reduce using rule 117 (statement -> expression_statement .)
    PARALLEL        reduce using rule 117 (statement -> expression_statement .)
    NOT             reduce using rule 117 (statement -> expression_statement .)
    MINUS           reduce using rule 117 (statement -> expression_statement .)
    AWAIT           reduce using rule 117 (statement -> expression_statement .)
    RBRACE          reduce using rule 117 (statement -> expression_statement .)


state 113

    (205) primary_expression -> IDENTIFIER .
    (213) primary_expression -> IDENTIFIER . LBRACE object_field_list_opt RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MULTIPLY_ASSIGN reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MODULO_ASSIGN   reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    IS              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    GEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    NEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RANGE           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 205 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    FATARROW        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LET             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    CONST           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    STRUCT          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ENUM            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    INTERFACE       reduce using rule 205 (primary_expression -> IDENTIFIER .)
    TYPE            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    TEST            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    IF              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MATCH           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    CASE            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    FOR             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    WHILE           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LOOP            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    BREAK           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    CONTINUE        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RETURN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    TRY             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    THROW           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ASSERT          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ROUTINE         reduce using rule 205 (primary_expression -> IDENTIFIER .)
    AT              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    NUMBER          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    STRING          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    TRUE            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    FALSE           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    NULL            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 205 (primary_expression -> IDENTIFIER .)
    FN              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ASYNC           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    PARALLEL        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    NOT             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    AWAIT           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LBRACE          shift and go to state 198

  ! LBRACE          [ reduce using rule 205 (primary_expression -> IDENTIFIER .) ]


state 114

    (118) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 199


state 115

    (219) primary_expression -> FN . LPAREN parameter_list_opt RPAREN return_type_opt block

    LPAREN          shift and go to state 200


state 116

    (206) primary_expression -> LPAREN . expression RPAREN
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 201
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 117

    (201) primary_expression -> STRING .

    LPAREN          reduce using rule 201 (primary_expression -> STRING .)
    DOT             reduce using rule 201 (primary_expression -> STRING .)
    LBRACKET        reduce using rule 201 (primary_expression -> STRING .)
    ASSIGN          reduce using rule 201 (primary_expression -> STRING .)
    PLUS_ASSIGN     reduce using rule 201 (primary_expression -> STRING .)
    MINUS_ASSIGN    reduce using rule 201 (primary_expression -> STRING .)
    MULTIPLY_ASSIGN reduce using rule 201 (primary_expression -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 201 (primary_expression -> STRING .)
    MODULO_ASSIGN   reduce using rule 201 (primary_expression -> STRING .)
    MULTIPLY        reduce using rule 201 (primary_expression -> STRING .)
    DIVIDE          reduce using rule 201 (primary_expression -> STRING .)
    MODULO          reduce using rule 201 (primary_expression -> STRING .)
    IS              reduce using rule 201 (primary_expression -> STRING .)
    PLUS            reduce using rule 201 (primary_expression -> STRING .)
    MINUS           reduce using rule 201 (primary_expression -> STRING .)
    LT              reduce using rule 201 (primary_expression -> STRING .)
    GT              reduce using rule 201 (primary_expression -> STRING .)
    LEQ             reduce using rule 201 (primary_expression -> STRING .)
    GEQ             reduce using rule 201 (primary_expression -> STRING .)
    EQ              reduce using rule 201 (primary_expression -> STRING .)
    NEQ             reduce using rule 201 (primary_expression -> STRING .)
    AND             reduce using rule 201 (primary_expression -> STRING .)
    RANGE           reduce using rule 201 (primary_expression -> STRING .)
    OR              reduce using rule 201 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 201 (primary_expression -> STRING .)
    COMMA           reduce using rule 201 (primary_expression -> STRING .)
    RPAREN          reduce using rule 201 (primary_expression -> STRING .)
    LBRACE          reduce using rule 201 (primary_expression -> STRING .)
    RBRACKET        reduce using rule 201 (primary_expression -> STRING .)
    RBRACE          reduce using rule 201 (primary_expression -> STRING .)
    FATARROW        reduce using rule 201 (primary_expression -> STRING .)
    ARROW           reduce using rule 201 (primary_expression -> STRING .)
    LET             reduce using rule 201 (primary_expression -> STRING .)
    CONST           reduce using rule 201 (primary_expression -> STRING .)
    STRUCT          reduce using rule 201 (primary_expression -> STRING .)
    ENUM            reduce using rule 201 (primary_expression -> STRING .)
    INTERFACE       reduce using rule 201 (primary_expression -> STRING .)
    TYPE            reduce using rule 201 (primary_expression -> STRING .)
    TEST            reduce using rule 201 (primary_expression -> STRING .)
    IF              reduce using rule 201 (primary_expression -> STRING .)
    MATCH           reduce using rule 201 (primary_expression -> STRING .)
    CASE            reduce using rule 201 (primary_expression -> STRING .)
    FOR             reduce using rule 201 (primary_expression -> STRING .)
    WHILE           reduce using rule 201 (primary_expression -> STRING .)
    LOOP            reduce using rule 201 (primary_expression -> STRING .)
    BREAK           reduce using rule 201 (primary_expression -> STRING .)
    CONTINUE        reduce using rule 201 (primary_expression -> STRING .)
    RETURN          reduce using rule 201 (primary_expression -> STRING .)
    TRY             reduce using rule 201 (primary_expression -> STRING .)
    THROW           reduce using rule 201 (primary_expression -> STRING .)
    ASSERT          reduce using rule 201 (primary_expression -> STRING .)
    ROUTINE         reduce using rule 201 (primary_expression -> STRING .)
    AT              reduce using rule 201 (primary_expression -> STRING .)
    NUMBER          reduce using rule 201 (primary_expression -> STRING .)
    STRING          reduce using rule 201 (primary_expression -> STRING .)
    TRUE            reduce using rule 201 (primary_expression -> STRING .)
    FALSE           reduce using rule 201 (primary_expression -> STRING .)
    NULL            reduce using rule 201 (primary_expression -> STRING .)
    IDENTIFIER      reduce using rule 201 (primary_expression -> STRING .)
    FN              reduce using rule 201 (primary_expression -> STRING .)
    ASYNC           reduce using rule 201 (primary_expression -> STRING .)
    PARALLEL        reduce using rule 201 (primary_expression -> STRING .)
    NOT             reduce using rule 201 (primary_expression -> STRING .)
    AWAIT           reduce using rule 201 (primary_expression -> STRING .)


state 118

    (119) if_statement -> IF . condition block else_clause_opt
    (120) condition -> . LPAREN expression RPAREN
    (121) condition -> . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    LPAREN          shift and go to state 203
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    condition                      shift and go to state 202
    expression                     shift and go to state 204
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 119

    (125) match_statement -> MATCH . expression match_block
    (137) primary_expression -> MATCH . expression match_block
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 205
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 120

    (132) match_case_statement -> CASE . pattern match_guard_opt match_arrow match_body optional_comma
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    pattern                        shift and go to state 206
    qualified_name                 shift and go to state 214

state 121

    (142) for_statement -> FOR . pattern IN expression block
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    pattern                        shift and go to state 215
    qualified_name                 shift and go to state 214

state 122

    (143) while_statement -> WHILE . condition block
    (120) condition -> . LPAREN expression RPAREN
    (121) condition -> . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    LPAREN          shift and go to state 203
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    condition                      shift and go to state 216
    expression                     shift and go to state 204
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 123

    (144) loop_statement -> LOOP . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 217

state 124

    (145) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 218


state 125

    (146) continue_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 219


state 126

    (147) return_statement -> RETURN . expression SEMICOLON
    (148) return_statement -> RETURN . SEMICOLON
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    SEMICOLON       shift and go to state 221
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 220
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 127

    (149) try_statement -> TRY . block catch_clause finally_clause_opt
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 222

state 128

    (156) throw_statement -> THROW . expression SEMICOLON
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 223
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 129

    (157) assert_statement -> ASSERT . expression SEMICOLON
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 224
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 130

    (158) routine_statement -> ROUTINE . routine_name_opt block
    (159) routine_name_opt -> . STRING
    (160) routine_name_opt -> . empty
    (252) empty -> .

    STRING          shift and go to state 226
    LBRACE          reduce using rule 252 (empty -> .)

    routine_name_opt               shift and go to state 225
    empty                          shift and go to state 227

state 131

    (161) expression -> assignment_expression .

    SEMICOLON       reduce using rule 161 (expression -> assignment_expression .)
    COMMA           reduce using rule 161 (expression -> assignment_expression .)
    RPAREN          reduce using rule 161 (expression -> assignment_expression .)
    LBRACE          reduce using rule 161 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 161 (expression -> assignment_expression .)
    RBRACE          reduce using rule 161 (expression -> assignment_expression .)
    FATARROW        reduce using rule 161 (expression -> assignment_expression .)
    ARROW           reduce using rule 161 (expression -> assignment_expression .)
    LET             reduce using rule 161 (expression -> assignment_expression .)
    CONST           reduce using rule 161 (expression -> assignment_expression .)
    STRUCT          reduce using rule 161 (expression -> assignment_expression .)
    ENUM            reduce using rule 161 (expression -> assignment_expression .)
    INTERFACE       reduce using rule 161 (expression -> assignment_expression .)
    TYPE            reduce using rule 161 (expression -> assignment_expression .)
    TEST            reduce using rule 161 (expression -> assignment_expression .)
    IF              reduce using rule 161 (expression -> assignment_expression .)
    MATCH           reduce using rule 161 (expression -> assignment_expression .)
    CASE            reduce using rule 161 (expression -> assignment_expression .)
    FOR             reduce using rule 161 (expression -> assignment_expression .)
    WHILE           reduce using rule 161 (expression -> assignment_expression .)
    LOOP            reduce using rule 161 (expression -> assignment_expression .)
    BREAK           reduce using rule 161 (expression -> assignment_expression .)
    CONTINUE        reduce using rule 161 (expression -> assignment_expression .)
    RETURN          reduce using rule 161 (expression -> assignment_expression .)
    TRY             reduce using rule 161 (expression -> assignment_expression .)
    THROW           reduce using rule 161 (expression -> assignment_expression .)
    ASSERT          reduce using rule 161 (expression -> assignment_expression .)
    ROUTINE         reduce using rule 161 (expression -> assignment_expression .)
    AT              reduce using rule 161 (expression -> assignment_expression .)
    NUMBER          reduce using rule 161 (expression -> assignment_expression .)
    STRING          reduce using rule 161 (expression -> assignment_expression .)
    TRUE            reduce using rule 161 (expression -> assignment_expression .)
    FALSE           reduce using rule 161 (expression -> assignment_expression .)
    NULL            reduce using rule 161 (expression -> assignment_expression .)
    IDENTIFIER      reduce using rule 161 (expression -> assignment_expression .)
    LPAREN          reduce using rule 161 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 161 (expression -> assignment_expression .)
    FN              reduce using rule 161 (expression -> assignment_expression .)
    ASYNC           reduce using rule 161 (expression -> assignment_expression .)
    PARALLEL        reduce using rule 161 (expression -> assignment_expression .)
    NOT             reduce using rule 161 (expression -> assignment_expression .)
    MINUS           reduce using rule 161 (expression -> assignment_expression .)
    AWAIT           reduce using rule 161 (expression -> assignment_expression .)


state 132

    (162) assignment_expression -> range_expression .

    SEMICOLON       reduce using rule 162 (assignment_expression -> range_expression .)
    COMMA           reduce using rule 162 (assignment_expression -> range_expression .)
    RPAREN          reduce using rule 162 (assignment_expression -> range_expression .)
    LBRACE          reduce using rule 162 (assignment_expression -> range_expression .)
    RBRACKET        reduce using rule 162 (assignment_expression -> range_expression .)
    RBRACE          reduce using rule 162 (assignment_expression -> range_expression .)
    FATARROW        reduce using rule 162 (assignment_expression -> range_expression .)
    ARROW           reduce using rule 162 (assignment_expression -> range_expression .)
    LET             reduce using rule 162 (assignment_expression -> range_expression .)
    CONST           reduce using rule 162 (assignment_expression -> range_expression .)
    STRUCT          reduce using rule 162 (assignment_expression -> range_expression .)
    ENUM            reduce using rule 162 (assignment_expression -> range_expression .)
    INTERFACE       reduce using rule 162 (assignment_expression -> range_expression .)
    TYPE            reduce using rule 162 (assignment_expression -> range_expression .)
    TEST            reduce using rule 162 (assignment_expression -> range_expression .)
    IF              reduce using rule 162 (assignment_expression -> range_expression .)
    MATCH           reduce using rule 162 (assignment_expression -> range_expression .)
    CASE            reduce using rule 162 (assignment_expression -> range_expression .)
    FOR             reduce using rule 162 (assignment_expression -> range_expression .)
    WHILE           reduce using rule 162 (assignment_expression -> range_expression .)
    LOOP            reduce using rule 162 (assignment_expression -> range_expression .)
    BREAK           reduce using rule 162 (assignment_expression -> range_expression .)
    CONTINUE        reduce using rule 162 (assignment_expression -> range_expression .)
    RETURN          reduce using rule 162 (assignment_expression -> range_expression .)
    TRY             reduce using rule 162 (assignment_expression -> range_expression .)
    THROW           reduce using rule 162 (assignment_expression -> range_expression .)
    ASSERT          reduce using rule 162 (assignment_expression -> range_expression .)
    ROUTINE         reduce using rule 162 (assignment_expression -> range_expression .)
    AT              reduce using rule 162 (assignment_expression -> range_expression .)
    NUMBER          reduce using rule 162 (assignment_expression -> range_expression .)
    STRING          reduce using rule 162 (assignment_expression -> range_expression .)
    TRUE            reduce using rule 162 (assignment_expression -> range_expression .)
    FALSE           reduce using rule 162 (assignment_expression -> range_expression .)
    NULL            reduce using rule 162 (assignment_expression -> range_expression .)
    IDENTIFIER      reduce using rule 162 (assignment_expression -> range_expression .)
    LPAREN          reduce using rule 162 (assignment_expression -> range_expression .)
    LBRACKET        reduce using rule 162 (assignment_expression -> range_expression .)
    FN              reduce using rule 162 (assignment_expression -> range_expression .)
    ASYNC           reduce using rule 162 (assignment_expression -> range_expression .)
    PARALLEL        reduce using rule 162 (assignment_expression -> range_expression .)
    NOT             reduce using rule 162 (assignment_expression -> range_expression .)
    MINUS           reduce using rule 162 (assignment_expression -> range_expression .)
    AWAIT           reduce using rule 162 (assignment_expression -> range_expression .)


state 133

    (163) assignment_expression -> postfix_expression . assignment_operator assignment_expression
    (196) postfix_expression -> postfix_expression . LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (198) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (195) unary_expression -> postfix_expression .
    (164) assignment_operator -> . ASSIGN
    (165) assignment_operator -> . PLUS_ASSIGN
    (166) assignment_operator -> . MINUS_ASSIGN
    (167) assignment_operator -> . MULTIPLY_ASSIGN
    (168) assignment_operator -> . DIVIDE_ASSIGN
    (169) assignment_operator -> . MODULO_ASSIGN

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    LPAREN          shift and go to state 229
    DOT             shift and go to state 230
    LBRACKET        shift and go to state 231
    MULTIPLY        reduce using rule 195 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 195 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 195 (unary_expression -> postfix_expression .)
    IS              reduce using rule 195 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 195 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 195 (unary_expression -> postfix_expression .)
    LT              reduce using rule 195 (unary_expression -> postfix_expression .)
    GT              reduce using rule 195 (unary_expression -> postfix_expression .)
    LEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    GEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 195 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    AND             reduce using rule 195 (unary_expression -> postfix_expression .)
    RANGE           reduce using rule 195 (unary_expression -> postfix_expression .)
    OR              reduce using rule 195 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 195 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 195 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 195 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 195 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 195 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 195 (unary_expression -> postfix_expression .)
    FATARROW        reduce using rule 195 (unary_expression -> postfix_expression .)
    ARROW           reduce using rule 195 (unary_expression -> postfix_expression .)
    LET             reduce using rule 195 (unary_expression -> postfix_expression .)
    CONST           reduce using rule 195 (unary_expression -> postfix_expression .)
    STRUCT          reduce using rule 195 (unary_expression -> postfix_expression .)
    ENUM            reduce using rule 195 (unary_expression -> postfix_expression .)
    INTERFACE       reduce using rule 195 (unary_expression -> postfix_expression .)
    TYPE            reduce using rule 195 (unary_expression -> postfix_expression .)
    TEST            reduce using rule 195 (unary_expression -> postfix_expression .)
    IF              reduce using rule 195 (unary_expression -> postfix_expression .)
    MATCH           reduce using rule 195 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 195 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 195 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 195 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 195 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 195 (unary_expression -> postfix_expression .)
    CONTINUE        reduce using rule 195 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 195 (unary_expression -> postfix_expression .)
    TRY             reduce using rule 195 (unary_expression -> postfix_expression .)
    THROW           reduce using rule 195 (unary_expression -> postfix_expression .)
    ASSERT          reduce using rule 195 (unary_expression -> postfix_expression .)
    ROUTINE         reduce using rule 195 (unary_expression -> postfix_expression .)
    AT              reduce using rule 195 (unary_expression -> postfix_expression .)
    NUMBER          reduce using rule 195 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 195 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 195 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 195 (unary_expression -> postfix_expression .)
    NULL            reduce using rule 195 (unary_expression -> postfix_expression .)
    IDENTIFIER      reduce using rule 195 (unary_expression -> postfix_expression .)
    FN              reduce using rule 195 (unary_expression -> postfix_expression .)
    ASYNC           reduce using rule 195 (unary_expression -> postfix_expression .)
    PARALLEL        reduce using rule 195 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 195 (unary_expression -> postfix_expression .)
    AWAIT           reduce using rule 195 (unary_expression -> postfix_expression .)
    ASSIGN          shift and go to state 232
    PLUS_ASSIGN     shift and go to state 233
    MINUS_ASSIGN    shift and go to state 234
    MULTIPLY_ASSIGN shift and go to state 235
    DIVIDE_ASSIGN   shift and go to state 236
    MODULO_ASSIGN   shift and go to state 237

  ! LPAREN          [ reduce using rule 195 (unary_expression -> postfix_expression .) ]
  ! LBRACKET        [ reduce using rule 195 (unary_expression -> postfix_expression .) ]

    assignment_operator            shift and go to state 228

state 134

    (170) range_expression -> logical_or_expression . RANGE logical_or_expression
    (171) range_expression -> logical_or_expression .
    (172) logical_or_expression -> logical_or_expression . OR logical_and_expression

    RANGE           shift and go to state 238
    SEMICOLON       reduce using rule 171 (range_expression -> logical_or_expression .)
    COMMA           reduce using rule 171 (range_expression -> logical_or_expression .)
    RPAREN          reduce using rule 171 (range_expression -> logical_or_expression .)
    LBRACE          reduce using rule 171 (range_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 171 (range_expression -> logical_or_expression .)
    RBRACE          reduce using rule 171 (range_expression -> logical_or_expression .)
    FATARROW        reduce using rule 171 (range_expression -> logical_or_expression .)
    ARROW           reduce using rule 171 (range_expression -> logical_or_expression .)
    LET             reduce using rule 171 (range_expression -> logical_or_expression .)
    CONST           reduce using rule 171 (range_expression -> logical_or_expression .)
    STRUCT          reduce using rule 171 (range_expression -> logical_or_expression .)
    ENUM            reduce using rule 171 (range_expression -> logical_or_expression .)
    INTERFACE       reduce using rule 171 (range_expression -> logical_or_expression .)
    TYPE            reduce using rule 171 (range_expression -> logical_or_expression .)
    TEST            reduce using rule 171 (range_expression -> logical_or_expression .)
    IF              reduce using rule 171 (range_expression -> logical_or_expression .)
    MATCH           reduce using rule 171 (range_expression -> logical_or_expression .)
    CASE            reduce using rule 171 (range_expression -> logical_or_expression .)
    FOR             reduce using rule 171 (range_expression -> logical_or_expression .)
    WHILE           reduce using rule 171 (range_expression -> logical_or_expression .)
    LOOP            reduce using rule 171 (range_expression -> logical_or_expression .)
    BREAK           reduce using rule 171 (range_expression -> logical_or_expression .)
    CONTINUE        reduce using rule 171 (range_expression -> logical_or_expression .)
    RETURN          reduce using rule 171 (range_expression -> logical_or_expression .)
    TRY             reduce using rule 171 (range_expression -> logical_or_expression .)
    THROW           reduce using rule 171 (range_expression -> logical_or_expression .)
    ASSERT          reduce using rule 171 (range_expression -> logical_or_expression .)
    ROUTINE         reduce using rule 171 (range_expression -> logical_or_expression .)
    AT              reduce using rule 171 (range_expression -> logical_or_expression .)
    NUMBER          reduce using rule 171 (range_expression -> logical_or_expression .)
    STRING          reduce using rule 171 (range_expression -> logical_or_expression .)
    TRUE            reduce using rule 171 (range_expression -> logical_or_expression .)
    FALSE           reduce using rule 171 (range_expression -> logical_or_expression .)
    NULL            reduce using rule 171 (range_expression -> logical_or_expression .)
    IDENTIFIER      reduce using rule 171 (range_expression -> logical_or_expression .)
    LPAREN          reduce using rule 171 (range_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 171 (range_expression -> logical_or_expression .)
    FN              reduce using rule 171 (range_expression -> logical_or_expression .)
    ASYNC           reduce using rule 171 (range_expression -> logical_or_expression .)
    PARALLEL        reduce using rule 171 (range_expression -> logical_or_expression .)
    NOT             reduce using rule 171 (range_expression -> logical_or_expression .)
    MINUS           reduce using rule 171 (range_expression -> logical_or_expression .)
    AWAIT           reduce using rule 171 (range_expression -> logical_or_expression .)
    OR              shift and go to state 239


state 135

    (207) primary_expression -> LBRACKET . expression_list_opt RBRACKET
    (208) expression_list_opt -> . expression_list
    (209) expression_list_opt -> . empty
    (210) expression_list -> . expression_list COMMA expression
    (211) expression_list -> . expression
    (252) empty -> .
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    RBRACKET        reduce using rule 252 (empty -> .)
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression_list_opt            shift and go to state 240
    expression_list                shift and go to state 241
    empty                          shift and go to state 242
    expression                     shift and go to state 243
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 136

    (199) postfix_expression -> primary_expression .

    LPAREN          reduce using rule 199 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 199 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 199 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 199 (postfix_expression -> primary_expression .)
    PLUS_ASSIGN     reduce using rule 199 (postfix_expression -> primary_expression .)
    MINUS_ASSIGN    reduce using rule 199 (postfix_expression -> primary_expression .)
    MULTIPLY_ASSIGN reduce using rule 199 (postfix_expression -> primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 199 (postfix_expression -> primary_expression .)
    MODULO_ASSIGN   reduce using rule 199 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 199 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 199 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 199 (postfix_expression -> primary_expression .)
    IS              reduce using rule 199 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 199 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 199 (postfix_expression -> primary_expression .)
    LT              reduce using rule 199 (postfix_expression -> primary_expression .)
    GT              reduce using rule 199 (postfix_expression -> primary_expression .)
    LEQ             reduce using rule 199 (postfix_expression -> primary_expression .)
    GEQ             reduce using rule 199 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 199 (postfix_expression -> primary_expression .)
    NEQ             reduce using rule 199 (postfix_expression -> primary_expression .)
    AND             reduce using rule 199 (postfix_expression -> primary_expression .)
    RANGE           reduce using rule 199 (postfix_expression -> primary_expression .)
    OR              reduce using rule 199 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 199 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 199 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 199 (postfix_expression -> primary_expression .)
    LBRACE          reduce using rule 199 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 199 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 199 (postfix_expression -> primary_expression .)
    FATARROW        reduce using rule 199 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 199 (postfix_expression -> primary_expression .)
    LET             reduce using rule 199 (postfix_expression -> primary_expression .)
    CONST           reduce using rule 199 (postfix_expression -> primary_expression .)
    STRUCT          reduce using rule 199 (postfix_expression -> primary_expression .)
    ENUM            reduce using rule 199 (postfix_expression -> primary_expression .)
    INTERFACE       reduce using rule 199 (postfix_expression -> primary_expression .)
    TYPE            reduce using rule 199 (postfix_expression -> primary_expression .)
    TEST            reduce using rule 199 (postfix_expression -> primary_expression .)
    IF              reduce using rule 199 (postfix_expression -> primary_expression .)
    MATCH           reduce using rule 199 (postfix_expression -> primary_expression .)
    CASE            reduce using rule 199 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 199 (postfix_expression -> primary_expression .)
    WHILE           reduce using rule 199 (postfix_expression -> primary_expression .)
    LOOP            reduce using rule 199 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 199 (postfix_expression -> primary_expression .)
    CONTINUE        reduce using rule 199 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 199 (postfix_expression -> primary_expression .)
    TRY             reduce using rule 199 (postfix_expression -> primary_expression .)
    THROW           reduce using rule 199 (postfix_expression -> primary_expression .)
    ASSERT          reduce using rule 199 (postfix_expression -> primary_expression .)
    ROUTINE         reduce using rule 199 (postfix_expression -> primary_expression .)
    AT              reduce using rule 199 (postfix_expression -> primary_expression .)
    NUMBER          reduce using rule 199 (postfix_expression -> primary_expression .)
    STRING          reduce using rule 199 (postfix_expression -> primary_expression .)
    TRUE            reduce using rule 199 (postfix_expression -> primary_expression .)
    FALSE           reduce using rule 199 (postfix_expression -> primary_expression .)
    NULL            reduce using rule 199 (postfix_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 199 (postfix_expression -> primary_expression .)
    FN              reduce using rule 199 (postfix_expression -> primary_expression .)
    ASYNC           reduce using rule 199 (postfix_expression -> primary_expression .)
    PARALLEL        reduce using rule 199 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 199 (postfix_expression -> primary_expression .)
    AWAIT           reduce using rule 199 (postfix_expression -> primary_expression .)


state 137

    (173) logical_or_expression -> logical_and_expression .
    (174) logical_and_expression -> logical_and_expression . AND equality_expression

    RANGE           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    FATARROW        reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    ARROW           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    LET             reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    CONST           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    STRUCT          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    ENUM            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    INTERFACE       reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    TYPE            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    TEST            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    MATCH           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    FOR             reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    CONTINUE        reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    TRY             reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    THROW           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    ASSERT          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    ROUTINE         reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    AT              reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    NUMBER          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    NULL            reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    IDENTIFIER      reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    FN              reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    ASYNC           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    PARALLEL        reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    NOT             reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    AWAIT           reduce using rule 173 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 244


state 138

    (200) primary_expression -> NUMBER .

    LPAREN          reduce using rule 200 (primary_expression -> NUMBER .)
    DOT             reduce using rule 200 (primary_expression -> NUMBER .)
    LBRACKET        reduce using rule 200 (primary_expression -> NUMBER .)
    ASSIGN          reduce using rule 200 (primary_expression -> NUMBER .)
    PLUS_ASSIGN     reduce using rule 200 (primary_expression -> NUMBER .)
    MINUS_ASSIGN    reduce using rule 200 (primary_expression -> NUMBER .)
    MULTIPLY_ASSIGN reduce using rule 200 (primary_expression -> NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 200 (primary_expression -> NUMBER .)
    MODULO_ASSIGN   reduce using rule 200 (primary_expression -> NUMBER .)
    MULTIPLY        reduce using rule 200 (primary_expression -> NUMBER .)
    DIVIDE          reduce using rule 200 (primary_expression -> NUMBER .)
    MODULO          reduce using rule 200 (primary_expression -> NUMBER .)
    IS              reduce using rule 200 (primary_expression -> NUMBER .)
    PLUS            reduce using rule 200 (primary_expression -> NUMBER .)
    MINUS           reduce using rule 200 (primary_expression -> NUMBER .)
    LT              reduce using rule 200 (primary_expression -> NUMBER .)
    GT              reduce using rule 200 (primary_expression -> NUMBER .)
    LEQ             reduce using rule 200 (primary_expression -> NUMBER .)
    GEQ             reduce using rule 200 (primary_expression -> NUMBER .)
    EQ              reduce using rule 200 (primary_expression -> NUMBER .)
    NEQ             reduce using rule 200 (primary_expression -> NUMBER .)
    AND             reduce using rule 200 (primary_expression -> NUMBER .)
    RANGE           reduce using rule 200 (primary_expression -> NUMBER .)
    OR              reduce using rule 200 (primary_expression -> NUMBER .)
    SEMICOLON       reduce using rule 200 (primary_expression -> NUMBER .)
    COMMA           reduce using rule 200 (primary_expression -> NUMBER .)
    RPAREN          reduce using rule 200 (primary_expression -> NUMBER .)
    LBRACE          reduce using rule 200 (primary_expression -> NUMBER .)
    RBRACKET        reduce using rule 200 (primary_expression -> NUMBER .)
    RBRACE          reduce using rule 200 (primary_expression -> NUMBER .)
    FATARROW        reduce using rule 200 (primary_expression -> NUMBER .)
    ARROW           reduce using rule 200 (primary_expression -> NUMBER .)
    LET             reduce using rule 200 (primary_expression -> NUMBER .)
    CONST           reduce using rule 200 (primary_expression -> NUMBER .)
    STRUCT          reduce using rule 200 (primary_expression -> NUMBER .)
    ENUM            reduce using rule 200 (primary_expression -> NUMBER .)
    INTERFACE       reduce using rule 200 (primary_expression -> NUMBER .)
    TYPE            reduce using rule 200 (primary_expression -> NUMBER .)
    TEST            reduce using rule 200 (primary_expression -> NUMBER .)
    IF              reduce using rule 200 (primary_expression -> NUMBER .)
    MATCH           reduce using rule 200 (primary_expression -> NUMBER .)
    CASE            reduce using rule 200 (primary_expression -> NUMBER .)
    FOR             reduce using rule 200 (primary_expression -> NUMBER .)
    WHILE           reduce using rule 200 (primary_expression -> NUMBER .)
    LOOP            reduce using rule 200 (primary_expression -> NUMBER .)
    BREAK           reduce using rule 200 (primary_expression -> NUMBER .)
    CONTINUE        reduce using rule 200 (primary_expression -> NUMBER .)
    RETURN          reduce using rule 200 (primary_expression -> NUMBER .)
    TRY             reduce using rule 200 (primary_expression -> NUMBER .)
    THROW           reduce using rule 200 (primary_expression -> NUMBER .)
    ASSERT          reduce using rule 200 (primary_expression -> NUMBER .)
    ROUTINE         reduce using rule 200 (primary_expression -> NUMBER .)
    AT              reduce using rule 200 (primary_expression -> NUMBER .)
    NUMBER          reduce using rule 200 (primary_expression -> NUMBER .)
    STRING          reduce using rule 200 (primary_expression -> NUMBER .)
    TRUE            reduce using rule 200 (primary_expression -> NUMBER .)
    FALSE           reduce using rule 200 (primary_expression -> NUMBER .)
    NULL            reduce using rule 200 (primary_expression -> NUMBER .)
    IDENTIFIER      reduce using rule 200 (primary_expression -> NUMBER .)
    FN              reduce using rule 200 (primary_expression -> NUMBER .)
    ASYNC           reduce using rule 200 (primary_expression -> NUMBER .)
    PARALLEL        reduce using rule 200 (primary_expression -> NUMBER .)
    NOT             reduce using rule 200 (primary_expression -> NUMBER .)
    AWAIT           reduce using rule 200 (primary_expression -> NUMBER .)


state 139

    (202) primary_expression -> TRUE .

    LPAREN          reduce using rule 202 (primary_expression -> TRUE .)
    DOT             reduce using rule 202 (primary_expression -> TRUE .)
    LBRACKET        reduce using rule 202 (primary_expression -> TRUE .)
    ASSIGN          reduce using rule 202 (primary_expression -> TRUE .)
    PLUS_ASSIGN     reduce using rule 202 (primary_expression -> TRUE .)
    MINUS_ASSIGN    reduce using rule 202 (primary_expression -> TRUE .)
    MULTIPLY_ASSIGN reduce using rule 202 (primary_expression -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 202 (primary_expression -> TRUE .)
    MODULO_ASSIGN   reduce using rule 202 (primary_expression -> TRUE .)
    MULTIPLY        reduce using rule 202 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 202 (primary_expression -> TRUE .)
    MODULO          reduce using rule 202 (primary_expression -> TRUE .)
    IS              reduce using rule 202 (primary_expression -> TRUE .)
    PLUS            reduce using rule 202 (primary_expression -> TRUE .)
    MINUS           reduce using rule 202 (primary_expression -> TRUE .)
    LT              reduce using rule 202 (primary_expression -> TRUE .)
    GT              reduce using rule 202 (primary_expression -> TRUE .)
    LEQ             reduce using rule 202 (primary_expression -> TRUE .)
    GEQ             reduce using rule 202 (primary_expression -> TRUE .)
    EQ              reduce using rule 202 (primary_expression -> TRUE .)
    NEQ             reduce using rule 202 (primary_expression -> TRUE .)
    AND             reduce using rule 202 (primary_expression -> TRUE .)
    RANGE           reduce using rule 202 (primary_expression -> TRUE .)
    OR              reduce using rule 202 (primary_expression -> TRUE .)
    SEMICOLON       reduce using rule 202 (primary_expression -> TRUE .)
    COMMA           reduce using rule 202 (primary_expression -> TRUE .)
    RPAREN          reduce using rule 202 (primary_expression -> TRUE .)
    LBRACE          reduce using rule 202 (primary_expression -> TRUE .)
    RBRACKET        reduce using rule 202 (primary_expression -> TRUE .)
    RBRACE          reduce using rule 202 (primary_expression -> TRUE .)
    FATARROW        reduce using rule 202 (primary_expression -> TRUE .)
    ARROW           reduce using rule 202 (primary_expression -> TRUE .)
    LET             reduce using rule 202 (primary_expression -> TRUE .)
    CONST           reduce using rule 202 (primary_expression -> TRUE .)
    STRUCT          reduce using rule 202 (primary_expression -> TRUE .)
    ENUM            reduce using rule 202 (primary_expression -> TRUE .)
    INTERFACE       reduce using rule 202 (primary_expression -> TRUE .)
    TYPE            reduce using rule 202 (primary_expression -> TRUE .)
    TEST            reduce using rule 202 (primary_expression -> TRUE .)
    IF              reduce using rule 202 (primary_expression -> TRUE .)
    MATCH           reduce using rule 202 (primary_expression -> TRUE .)
    CASE            reduce using rule 202 (primary_expression -> TRUE .)
    FOR             reduce using rule 202 (primary_expression -> TRUE .)
    WHILE           reduce using rule 202 (primary_expression -> TRUE .)
    LOOP            reduce using rule 202 (primary_expression -> TRUE .)
    BREAK           reduce using rule 202 (primary_expression -> TRUE .)
    CONTINUE        reduce using rule 202 (primary_expression -> TRUE .)
    RETURN          reduce using rule 202 (primary_expression -> TRUE .)
    TRY             reduce using rule 202 (primary_expression -> TRUE .)
    THROW           reduce using rule 202 (primary_expression -> TRUE .)
    ASSERT          reduce using rule 202 (primary_expression -> TRUE .)
    ROUTINE         reduce using rule 202 (primary_expression -> TRUE .)
    AT              reduce using rule 202 (primary_expression -> TRUE .)
    NUMBER          reduce using rule 202 (primary_expression -> TRUE .)
    STRING          reduce using rule 202 (primary_expression -> TRUE .)
    TRUE            reduce using rule 202 (primary_expression -> TRUE .)
    FALSE           reduce using rule 202 (primary_expression -> TRUE .)
    NULL            reduce using rule 202 (primary_expression -> TRUE .)
    IDENTIFIER      reduce using rule 202 (primary_expression -> TRUE .)
    FN              reduce using rule 202 (primary_expression -> TRUE .)
    ASYNC           reduce using rule 202 (primary_expression -> TRUE .)
    PARALLEL        reduce using rule 202 (primary_expression -> TRUE .)
    NOT             reduce using rule 202 (primary_expression -> TRUE .)
    AWAIT           reduce using rule 202 (primary_expression -> TRUE .)


state 140

    (203) primary_expression -> FALSE .

    LPAREN          reduce using rule 203 (primary_expression -> FALSE .)
    DOT             reduce using rule 203 (primary_expression -> FALSE .)
    LBRACKET        reduce using rule 203 (primary_expression -> FALSE .)
    ASSIGN          reduce using rule 203 (primary_expression -> FALSE .)
    PLUS_ASSIGN     reduce using rule 203 (primary_expression -> FALSE .)
    MINUS_ASSIGN    reduce using rule 203 (primary_expression -> FALSE .)
    MULTIPLY_ASSIGN reduce using rule 203 (primary_expression -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 203 (primary_expression -> FALSE .)
    MODULO_ASSIGN   reduce using rule 203 (primary_expression -> FALSE .)
    MULTIPLY        reduce using rule 203 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 203 (primary_expression -> FALSE .)
    MODULO          reduce using rule 203 (primary_expression -> FALSE .)
    IS              reduce using rule 203 (primary_expression -> FALSE .)
    PLUS            reduce using rule 203 (primary_expression -> FALSE .)
    MINUS           reduce using rule 203 (primary_expression -> FALSE .)
    LT              reduce using rule 203 (primary_expression -> FALSE .)
    GT              reduce using rule 203 (primary_expression -> FALSE .)
    LEQ             reduce using rule 203 (primary_expression -> FALSE .)
    GEQ             reduce using rule 203 (primary_expression -> FALSE .)
    EQ              reduce using rule 203 (primary_expression -> FALSE .)
    NEQ             reduce using rule 203 (primary_expression -> FALSE .)
    AND             reduce using rule 203 (primary_expression -> FALSE .)
    RANGE           reduce using rule 203 (primary_expression -> FALSE .)
    OR              reduce using rule 203 (primary_expression -> FALSE .)
    SEMICOLON       reduce using rule 203 (primary_expression -> FALSE .)
    COMMA           reduce using rule 203 (primary_expression -> FALSE .)
    RPAREN          reduce using rule 203 (primary_expression -> FALSE .)
    LBRACE          reduce using rule 203 (primary_expression -> FALSE .)
    RBRACKET        reduce using rule 203 (primary_expression -> FALSE .)
    RBRACE          reduce using rule 203 (primary_expression -> FALSE .)
    FATARROW        reduce using rule 203 (primary_expression -> FALSE .)
    ARROW           reduce using rule 203 (primary_expression -> FALSE .)
    LET             reduce using rule 203 (primary_expression -> FALSE .)
    CONST           reduce using rule 203 (primary_expression -> FALSE .)
    STRUCT          reduce using rule 203 (primary_expression -> FALSE .)
    ENUM            reduce using rule 203 (primary_expression -> FALSE .)
    INTERFACE       reduce using rule 203 (primary_expression -> FALSE .)
    TYPE            reduce using rule 203 (primary_expression -> FALSE .)
    TEST            reduce using rule 203 (primary_expression -> FALSE .)
    IF              reduce using rule 203 (primary_expression -> FALSE .)
    MATCH           reduce using rule 203 (primary_expression -> FALSE .)
    CASE            reduce using rule 203 (primary_expression -> FALSE .)
    FOR             reduce using rule 203 (primary_expression -> FALSE .)
    WHILE           reduce using rule 203 (primary_expression -> FALSE .)
    LOOP            reduce using rule 203 (primary_expression -> FALSE .)
    BREAK           reduce using rule 203 (primary_expression -> FALSE .)
    CONTINUE        reduce using rule 203 (primary_expression -> FALSE .)
    RETURN          reduce using rule 203 (primary_expression -> FALSE .)
    TRY             reduce using rule 203 (primary_expression -> FALSE .)
    THROW           reduce using rule 203 (primary_expression -> FALSE .)
    ASSERT          reduce using rule 203 (primary_expression -> FALSE .)
    ROUTINE         reduce using rule 203 (primary_expression -> FALSE .)
    AT              reduce using rule 203 (primary_expression -> FALSE .)
    NUMBER          reduce using rule 203 (primary_expression -> FALSE .)
    STRING          reduce using rule 203 (primary_expression -> FALSE .)
    TRUE            reduce using rule 203 (primary_expression -> FALSE .)
    FALSE           reduce using rule 203 (primary_expression -> FALSE .)
    NULL            reduce using rule 203 (primary_expression -> FALSE .)
    IDENTIFIER      reduce using rule 203 (primary_expression -> FALSE .)
    FN              reduce using rule 203 (primary_expression -> FALSE .)
    ASYNC           reduce using rule 203 (primary_expression -> FALSE .)
    PARALLEL        reduce using rule 203 (primary_expression -> FALSE .)
    NOT             reduce using rule 203 (primary_expression -> FALSE .)
    AWAIT           reduce using rule 203 (primary_expression -> FALSE .)


state 141

    (204) primary_expression -> NULL .

    LPAREN          reduce using rule 204 (primary_expression -> NULL .)
    DOT             reduce using rule 204 (primary_expression -> NULL .)
    LBRACKET        reduce using rule 204 (primary_expression -> NULL .)
    ASSIGN          reduce using rule 204 (primary_expression -> NULL .)
    PLUS_ASSIGN     reduce using rule 204 (primary_expression -> NULL .)
    MINUS_ASSIGN    reduce using rule 204 (primary_expression -> NULL .)
    MULTIPLY_ASSIGN reduce using rule 204 (primary_expression -> NULL .)
    DIVIDE_ASSIGN   reduce using rule 204 (primary_expression -> NULL .)
    MODULO_ASSIGN   reduce using rule 204 (primary_expression -> NULL .)
    MULTIPLY        reduce using rule 204 (primary_expression -> NULL .)
    DIVIDE          reduce using rule 204 (primary_expression -> NULL .)
    MODULO          reduce using rule 204 (primary_expression -> NULL .)
    IS              reduce using rule 204 (primary_expression -> NULL .)
    PLUS            reduce using rule 204 (primary_expression -> NULL .)
    MINUS           reduce using rule 204 (primary_expression -> NULL .)
    LT              reduce using rule 204 (primary_expression -> NULL .)
    GT              reduce using rule 204 (primary_expression -> NULL .)
    LEQ             reduce using rule 204 (primary_expression -> NULL .)
    GEQ             reduce using rule 204 (primary_expression -> NULL .)
    EQ              reduce using rule 204 (primary_expression -> NULL .)
    NEQ             reduce using rule 204 (primary_expression -> NULL .)
    AND             reduce using rule 204 (primary_expression -> NULL .)
    RANGE           reduce using rule 204 (primary_expression -> NULL .)
    OR              reduce using rule 204 (primary_expression -> NULL .)
    SEMICOLON       reduce using rule 204 (primary_expression -> NULL .)
    COMMA           reduce using rule 204 (primary_expression -> NULL .)
    RPAREN          reduce using rule 204 (primary_expression -> NULL .)
    LBRACE          reduce using rule 204 (primary_expression -> NULL .)
    RBRACKET        reduce using rule 204 (primary_expression -> NULL .)
    RBRACE          reduce using rule 204 (primary_expression -> NULL .)
    FATARROW        reduce using rule 204 (primary_expression -> NULL .)
    ARROW           reduce using rule 204 (primary_expression -> NULL .)
    LET             reduce using rule 204 (primary_expression -> NULL .)
    CONST           reduce using rule 204 (primary_expression -> NULL .)
    STRUCT          reduce using rule 204 (primary_expression -> NULL .)
    ENUM            reduce using rule 204 (primary_expression -> NULL .)
    INTERFACE       reduce using rule 204 (primary_expression -> NULL .)
    TYPE            reduce using rule 204 (primary_expression -> NULL .)
    TEST            reduce using rule 204 (primary_expression -> NULL .)
    IF              reduce using rule 204 (primary_expression -> NULL .)
    MATCH           reduce using rule 204 (primary_expression -> NULL .)
    CASE            reduce using rule 204 (primary_expression -> NULL .)
    FOR             reduce using rule 204 (primary_expression -> NULL .)
    WHILE           reduce using rule 204 (primary_expression -> NULL .)
    LOOP            reduce using rule 204 (primary_expression -> NULL .)
    BREAK           reduce using rule 204 (primary_expression -> NULL .)
    CONTINUE        reduce using rule 204 (primary_expression -> NULL .)
    RETURN          reduce using rule 204 (primary_expression -> NULL .)
    TRY             reduce using rule 204 (primary_expression -> NULL .)
    THROW           reduce using rule 204 (primary_expression -> NULL .)
    ASSERT          reduce using rule 204 (primary_expression -> NULL .)
    ROUTINE         reduce using rule 204 (primary_expression -> NULL .)
    AT              reduce using rule 204 (primary_expression -> NULL .)
    NUMBER          reduce using rule 204 (primary_expression -> NULL .)
    STRING          reduce using rule 204 (primary_expression -> NULL .)
    TRUE            reduce using rule 204 (primary_expression -> NULL .)
    FALSE           reduce using rule 204 (primary_expression -> NULL .)
    NULL            reduce using rule 204 (primary_expression -> NULL .)
    IDENTIFIER      reduce using rule 204 (primary_expression -> NULL .)
    FN              reduce using rule 204 (primary_expression -> NULL .)
    ASYNC           reduce using rule 204 (primary_expression -> NULL .)
    PARALLEL        reduce using rule 204 (primary_expression -> NULL .)
    NOT             reduce using rule 204 (primary_expression -> NULL .)
    AWAIT           reduce using rule 204 (primary_expression -> NULL .)


state 142

    (220) primary_expression -> ASYNC . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 245

state 143

    (221) primary_expression -> PARALLEL . LBRACKET argument_list_opt RBRACKET

    LBRACKET        shift and go to state 246


state 144

    (175) logical_and_expression -> equality_expression .
    (176) equality_expression -> equality_expression . EQ relational_expression
    (177) equality_expression -> equality_expression . NEQ relational_expression

    AND             reduce using rule 175 (logical_and_expression -> equality_expression .)
    RANGE           reduce using rule 175 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 175 (logical_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 175 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 175 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 175 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 175 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 175 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 175 (logical_and_expression -> equality_expression .)
    FATARROW        reduce using rule 175 (logical_and_expression -> equality_expression .)
    ARROW           reduce using rule 175 (logical_and_expression -> equality_expression .)
    LET             reduce using rule 175 (logical_and_expression -> equality_expression .)
    CONST           reduce using rule 175 (logical_and_expression -> equality_expression .)
    STRUCT          reduce using rule 175 (logical_and_expression -> equality_expression .)
    ENUM            reduce using rule 175 (logical_and_expression -> equality_expression .)
    INTERFACE       reduce using rule 175 (logical_and_expression -> equality_expression .)
    TYPE            reduce using rule 175 (logical_and_expression -> equality_expression .)
    TEST            reduce using rule 175 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 175 (logical_and_expression -> equality_expression .)
    MATCH           reduce using rule 175 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 175 (logical_and_expression -> equality_expression .)
    FOR             reduce using rule 175 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 175 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 175 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 175 (logical_and_expression -> equality_expression .)
    CONTINUE        reduce using rule 175 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 175 (logical_and_expression -> equality_expression .)
    TRY             reduce using rule 175 (logical_and_expression -> equality_expression .)
    THROW           reduce using rule 175 (logical_and_expression -> equality_expression .)
    ASSERT          reduce using rule 175 (logical_and_expression -> equality_expression .)
    ROUTINE         reduce using rule 175 (logical_and_expression -> equality_expression .)
    AT              reduce using rule 175 (logical_and_expression -> equality_expression .)
    NUMBER          reduce using rule 175 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 175 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 175 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 175 (logical_and_expression -> equality_expression .)
    NULL            reduce using rule 175 (logical_and_expression -> equality_expression .)
    IDENTIFIER      reduce using rule 175 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 175 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 175 (logical_and_expression -> equality_expression .)
    FN              reduce using rule 175 (logical_and_expression -> equality_expression .)
    ASYNC           reduce using rule 175 (logical_and_expression -> equality_expression .)
    PARALLEL        reduce using rule 175 (logical_and_expression -> equality_expression .)
    NOT             reduce using rule 175 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 175 (logical_and_expression -> equality_expression .)
    AWAIT           reduce using rule 175 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 247
    NEQ             shift and go to state 248


state 145

    (178) equality_expression -> relational_expression .
    (179) relational_expression -> relational_expression . LT additive_expression
    (180) relational_expression -> relational_expression . GT additive_expression
    (181) relational_expression -> relational_expression . LEQ additive_expression
    (182) relational_expression -> relational_expression . GEQ additive_expression

    EQ              reduce using rule 178 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 178 (equality_expression -> relational_expression .)
    AND             reduce using rule 178 (equality_expression -> relational_expression .)
    RANGE           reduce using rule 178 (equality_expression -> relational_expression .)
    OR              reduce using rule 178 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 178 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 178 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 178 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 178 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 178 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 178 (equality_expression -> relational_expression .)
    FATARROW        reduce using rule 178 (equality_expression -> relational_expression .)
    ARROW           reduce using rule 178 (equality_expression -> relational_expression .)
    LET             reduce using rule 178 (equality_expression -> relational_expression .)
    CONST           reduce using rule 178 (equality_expression -> relational_expression .)
    STRUCT          reduce using rule 178 (equality_expression -> relational_expression .)
    ENUM            reduce using rule 178 (equality_expression -> relational_expression .)
    INTERFACE       reduce using rule 178 (equality_expression -> relational_expression .)
    TYPE            reduce using rule 178 (equality_expression -> relational_expression .)
    TEST            reduce using rule 178 (equality_expression -> relational_expression .)
    IF              reduce using rule 178 (equality_expression -> relational_expression .)
    MATCH           reduce using rule 178 (equality_expression -> relational_expression .)
    CASE            reduce using rule 178 (equality_expression -> relational_expression .)
    FOR             reduce using rule 178 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 178 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 178 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 178 (equality_expression -> relational_expression .)
    CONTINUE        reduce using rule 178 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 178 (equality_expression -> relational_expression .)
    TRY             reduce using rule 178 (equality_expression -> relational_expression .)
    THROW           reduce using rule 178 (equality_expression -> relational_expression .)
    ASSERT          reduce using rule 178 (equality_expression -> relational_expression .)
    ROUTINE         reduce using rule 178 (equality_expression -> relational_expression .)
    AT              reduce using rule 178 (equality_expression -> relational_expression .)
    NUMBER          reduce using rule 178 (equality_expression -> relational_expression .)
    STRING          reduce using rule 178 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 178 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 178 (equality_expression -> relational_expression .)
    NULL            reduce using rule 178 (equality_expression -> relational_expression .)
    IDENTIFIER      reduce using rule 178 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 178 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 178 (equality_expression -> relational_expression .)
    FN              reduce using rule 178 (equality_expression -> relational_expression .)
    ASYNC           reduce using rule 178 (equality_expression -> relational_expression .)
    PARALLEL        reduce using rule 178 (equality_expression -> relational_expression .)
    NOT             reduce using rule 178 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 178 (equality_expression -> relational_expression .)
    AWAIT           reduce using rule 178 (equality_expression -> relational_expression .)
    LT              shift and go to state 249
    GT              shift and go to state 250
    LEQ             shift and go to state 251
    GEQ             shift and go to state 252


state 146

    (183) relational_expression -> additive_expression . IS type
    (184) relational_expression -> additive_expression .
    (185) additive_expression -> additive_expression . PLUS multiplicative_expression
    (186) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for MINUS resolved as shift
    IS              shift and go to state 253
    LT              reduce using rule 184 (relational_expression -> additive_expression .)
    GT              reduce using rule 184 (relational_expression -> additive_expression .)
    LEQ             reduce using rule 184 (relational_expression -> additive_expression .)
    GEQ             reduce using rule 184 (relational_expression -> additive_expression .)
    EQ              reduce using rule 184 (relational_expression -> additive_expression .)
    NEQ             reduce using rule 184 (relational_expression -> additive_expression .)
    AND             reduce using rule 184 (relational_expression -> additive_expression .)
    RANGE           reduce using rule 184 (relational_expression -> additive_expression .)
    OR              reduce using rule 184 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 184 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 184 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 184 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 184 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 184 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 184 (relational_expression -> additive_expression .)
    FATARROW        reduce using rule 184 (relational_expression -> additive_expression .)
    ARROW           reduce using rule 184 (relational_expression -> additive_expression .)
    LET             reduce using rule 184 (relational_expression -> additive_expression .)
    CONST           reduce using rule 184 (relational_expression -> additive_expression .)
    STRUCT          reduce using rule 184 (relational_expression -> additive_expression .)
    ENUM            reduce using rule 184 (relational_expression -> additive_expression .)
    INTERFACE       reduce using rule 184 (relational_expression -> additive_expression .)
    TYPE            reduce using rule 184 (relational_expression -> additive_expression .)
    TEST            reduce using rule 184 (relational_expression -> additive_expression .)
    IF              reduce using rule 184 (relational_expression -> additive_expression .)
    MATCH           reduce using rule 184 (relational_expression -> additive_expression .)
    CASE            reduce using rule 184 (relational_expression -> additive_expression .)
    FOR             reduce using rule 184 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 184 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 184 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 184 (relational_expression -> additive_expression .)
    CONTINUE        reduce using rule 184 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 184 (relational_expression -> additive_expression .)
    TRY             reduce using rule 184 (relational_expression -> additive_expression .)
    THROW           reduce using rule 184 (relational_expression -> additive_expression .)
    ASSERT          reduce using rule 184 (relational_expression -> additive_expression .)
    ROUTINE         reduce using rule 184 (relational_expression -> additive_expression .)
    AT              reduce using rule 184 (relational_expression -> additive_expression .)
    NUMBER          reduce using rule 184 (relational_expression -> additive_expression .)
    STRING          reduce using rule 184 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 184 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 184 (relational_expression -> additive_expression .)
    NULL            reduce using rule 184 (relational_expression -> additive_expression .)
    IDENTIFIER      reduce using rule 184 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 184 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 184 (relational_expression -> additive_expression .)
    FN              reduce using rule 184 (relational_expression -> additive_expression .)
    ASYNC           reduce using rule 184 (relational_expression -> additive_expression .)
    PARALLEL        reduce using rule 184 (relational_expression -> additive_expression .)
    NOT             reduce using rule 184 (relational_expression -> additive_expression .)
    AWAIT           reduce using rule 184 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 254
    MINUS           shift and go to state 255

  ! MINUS           [ reduce using rule 184 (relational_expression -> additive_expression .) ]


state 147

    (187) additive_expression -> multiplicative_expression .
    (188) multiplicative_expression -> multiplicative_expression . MULTIPLY unary_expression
    (189) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (190) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    IS              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    PLUS            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LEQ             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    GEQ             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    RANGE           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 187 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 187 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    FATARROW        reduce using rule 187 (additive_expression -> multiplicative_expression .)
    ARROW           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LET             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    CONST           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    STRUCT          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    ENUM            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    INTERFACE       reduce using rule 187 (additive_expression -> multiplicative_expression .)
    TYPE            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    TEST            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    MATCH           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    FOR             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    CONTINUE        reduce using rule 187 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    TRY             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    THROW           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    ASSERT          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    ROUTINE         reduce using rule 187 (additive_expression -> multiplicative_expression .)
    AT              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    NUMBER          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    NULL            reduce using rule 187 (additive_expression -> multiplicative_expression .)
    IDENTIFIER      reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 187 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 187 (additive_expression -> multiplicative_expression .)
    FN              reduce using rule 187 (additive_expression -> multiplicative_expression .)
    ASYNC           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    PARALLEL        reduce using rule 187 (additive_expression -> multiplicative_expression .)
    NOT             reduce using rule 187 (additive_expression -> multiplicative_expression .)
    AWAIT           reduce using rule 187 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 256
    DIVIDE          shift and go to state 257
    MODULO          shift and go to state 258


state 148

    (193) unary_expression -> MINUS . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 259
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 149

    (191) multiplicative_expression -> unary_expression .

    MULTIPLY        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    MODULO          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    IS              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LEQ             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    GEQ             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    NEQ             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    RANGE           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 191 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LBRACE          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    RBRACKET        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    RBRACE          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    FATARROW        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    ARROW           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LET             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    CONST           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    STRUCT          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    ENUM            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    INTERFACE       reduce using rule 191 (multiplicative_expression -> unary_expression .)
    TYPE            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    TEST            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    IF              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    MATCH           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    CASE            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    FOR             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    WHILE           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LOOP            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    BREAK           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    CONTINUE        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    RETURN          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    TRY             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    THROW           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    ASSERT          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    ROUTINE         reduce using rule 191 (multiplicative_expression -> unary_expression .)
    AT              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    NUMBER          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    STRING          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    TRUE            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    FALSE           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    NULL            reduce using rule 191 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LPAREN          reduce using rule 191 (multiplicative_expression -> unary_expression .)
    LBRACKET        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    FN              reduce using rule 191 (multiplicative_expression -> unary_expression .)
    ASYNC           reduce using rule 191 (multiplicative_expression -> unary_expression .)
    PARALLEL        reduce using rule 191 (multiplicative_expression -> unary_expression .)
    NOT             reduce using rule 191 (multiplicative_expression -> unary_expression .)
    AWAIT           reduce using rule 191 (multiplicative_expression -> unary_expression .)


state 150

    (192) unary_expression -> NOT . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 261
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 151

    (194) unary_expression -> AWAIT . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 262
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 152

    (251) qualified_name -> qualified_name DOT IDENTIFIER .

    DOT             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LPAREN          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    AT              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ASYNC           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    FN              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LT              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LBRACKET        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    QUESTION        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    AMPERSAND       reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    PIPE            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ASSIGN          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    COMMA           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LBRACE          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    RBRACKET        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    RPAREN          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    GT              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LEQ             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    GEQ             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    EQ              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    NEQ             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    AND             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    RANGE           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    OR              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    RBRACE          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    FATARROW        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ARROW           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LET             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    CONST           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    STRUCT          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ENUM            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    INTERFACE       reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    TYPE            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    TEST            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    IF              reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    MATCH           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    CASE            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    FOR             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    WHILE           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    LOOP            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    BREAK           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    CONTINUE        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    RETURN          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    TRY             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    THROW           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ASSERT          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    ROUTINE         reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    NUMBER          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    STRING          reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    TRUE            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    FALSE           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    NULL            reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    PARALLEL        reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    NOT             reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    MINUS           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)
    AWAIT           reduce using rule 251 (qualified_name -> qualified_name DOT IDENTIFIER .)


state 153

    (16) decorator_args_opt -> LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 263


state 154

    (18) argument_list_opt -> argument_list .
    (20) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 18 (argument_list_opt -> argument_list .)
    RBRACKET        reduce using rule 18 (argument_list_opt -> argument_list .)
    COMMA           shift and go to state 264


state 155

    (19) argument_list_opt -> empty .

    RPAREN          reduce using rule 19 (argument_list_opt -> empty .)
    RBRACKET        reduce using rule 19 (argument_list_opt -> empty .)


state 156

    (21) argument_list -> expression .

    COMMA           reduce using rule 21 (argument_list -> expression .)
    RPAREN          reduce using rule 21 (argument_list -> expression .)
    RBRACKET        reduce using rule 21 (argument_list -> expression .)


state 157

    (137) primary_expression -> MATCH . expression match_block
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 265
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 158

    (6) import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM . STRING SEMICOLON

    STRING          shift and go to state 266


state 159

    (9) import_list -> import_list COMMA IDENTIFIER .

    COMMA           reduce using rule 9 (import_list -> import_list COMMA IDENTIFIER .)
    RBRACE          reduce using rule 9 (import_list -> import_list COMMA IDENTIFIER .)


state 160

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt . LPAREN parameter_list_opt RPAREN return_type_opt block

    LPAREN          shift and go to state 267


state 161

    (51) struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE . struct_member_list_opt RBRACE
    (54) struct_member_list_opt -> . struct_member_list
    (55) struct_member_list_opt -> . empty
    (56) struct_member_list -> . struct_member_list struct_member
    (57) struct_member_list -> . struct_member
    (252) empty -> .
    (58) struct_member -> . field_declaration
    (59) struct_member -> . method_declaration
    (60) field_declaration -> . MUT IDENTIFIER ARROW type SEMICOLON
    (61) field_declaration -> . IDENTIFIER ARROW type SEMICOLON
    (62) method_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (15) decorator -> . AT qualified_name decorator_args_opt

    RBRACE          reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    MUT             shift and go to state 275
    IDENTIFIER      shift and go to state 268
    AT              shift and go to state 26

    struct_member_list_opt         shift and go to state 269
    struct_member_list             shift and go to state 270
    empty                          shift and go to state 271
    struct_member                  shift and go to state 272
    field_declaration              shift and go to state 273
    method_declaration             shift and go to state 274
    decorator_list_opt             shift and go to state 276
    decorator_list                 shift and go to state 23
    decorator                      shift and go to state 25

state 162

    (52) implements_opt -> IMPLEMENTS type_list .
    (234) type_list -> type_list . COMMA type

    LBRACE          reduce using rule 52 (implements_opt -> IMPLEMENTS type_list .)
    COMMA           shift and go to state 277


state 163

    (235) type_list -> type .

    COMMA           reduce using rule 235 (type_list -> type .)
    LBRACE          reduce using rule 235 (type_list -> type .)
    RBRACKET        reduce using rule 235 (type_list -> type .)
    GT              reduce using rule 235 (type_list -> type .)


state 164

    (24) type_parameters_opt -> LT type_parameter_list GT .

    IMPLEMENTS      reduce using rule 24 (type_parameters_opt -> LT type_parameter_list GT .)
    LBRACE          reduce using rule 24 (type_parameters_opt -> LT type_parameter_list GT .)
    ASSIGN          reduce using rule 24 (type_parameters_opt -> LT type_parameter_list GT .)
    LPAREN          reduce using rule 24 (type_parameters_opt -> LT type_parameter_list GT .)


state 165

    (26) type_parameter_list -> type_parameter_list COMMA . type_parameter
    (28) type_parameter -> . IDENTIFIER
    (29) type_parameter -> . IDENTIFIER EXTENDS type

    IDENTIFIER      shift and go to state 73

    type_parameter                 shift and go to state 278

state 166

    (29) type_parameter -> IDENTIFIER EXTENDS . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 279
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 167

    (68) enum_variant -> IDENTIFIER . LBRACE enum_variant_fields_opt RBRACE
    (69) enum_variant -> IDENTIFIER .

    LBRACE          shift and go to state 280
    COMMA           reduce using rule 69 (enum_variant -> IDENTIFIER .)
    RBRACE          reduce using rule 69 (enum_variant -> IDENTIFIER .)


state 168

    (63) enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt . RBRACE

    RBRACE          shift and go to state 281


state 169

    (64) enum_variant_list_opt -> enum_variant_list . maybe_trailing_comma
    (66) enum_variant_list -> enum_variant_list . COMMA enum_variant
    (89) maybe_trailing_comma -> . COMMA
    (90) maybe_trailing_comma -> . empty
    (252) empty -> .

    COMMA           shift and go to state 283
    RBRACE          reduce using rule 252 (empty -> .)

    maybe_trailing_comma           shift and go to state 282
    empty                          shift and go to state 284

state 170

    (65) enum_variant_list_opt -> empty .

    RBRACE          reduce using rule 65 (enum_variant_list_opt -> empty .)


state 171

    (67) enum_variant_list -> enum_variant .

    COMMA           reduce using rule 67 (enum_variant_list -> enum_variant .)
    RBRACE          reduce using rule 67 (enum_variant_list -> enum_variant .)


state 172

    (74) interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt . RBRACE

    RBRACE          shift and go to state 285


state 173

    (75) interface_member_list_opt -> interface_member_list .
    (77) interface_member_list -> interface_member_list . interface_member
    (79) interface_member -> . FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON

    RBRACE          reduce using rule 75 (interface_member_list_opt -> interface_member_list .)
    FN              shift and go to state 176

    interface_member               shift and go to state 286

state 174

    (76) interface_member_list_opt -> empty .

    RBRACE          reduce using rule 76 (interface_member_list_opt -> empty .)


state 175

    (78) interface_member_list -> interface_member .

    FN              reduce using rule 78 (interface_member_list -> interface_member .)
    RBRACE          reduce using rule 78 (interface_member_list -> interface_member .)


state 176

    (79) interface_member -> FN . IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON

    IDENTIFIER      shift and go to state 287


state 177

    (50) type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type . SEMICOLON

    SEMICOLON       shift and go to state 288


state 178

    (80) constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 289


state 179

    (224) union_type -> union_type PIPE . intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    intersection_type              shift and go to state 290
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 180

    (226) intersection_type -> intersection_type AMPERSAND . primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    primary_type                   shift and go to state 291
    qualified_name                 shift and go to state 82

state 181

    (228) primary_type -> primary_type LBRACKET . RBRACKET

    RBRACKET        shift and go to state 292


state 182

    (230) primary_type -> primary_type QUESTION .

    LBRACKET        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    QUESTION        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    AMPERSAND       reduce using rule 230 (primary_type -> primary_type QUESTION .)
    PIPE            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ASSIGN          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    SEMICOLON       reduce using rule 230 (primary_type -> primary_type QUESTION .)
    COMMA           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LBRACE          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    RBRACKET        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    RPAREN          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    GT              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LT              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LEQ             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    GEQ             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    EQ              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    NEQ             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    AND             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    RANGE           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    OR              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    RBRACE          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    FATARROW        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ARROW           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LET             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    CONST           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    STRUCT          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ENUM            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    INTERFACE       reduce using rule 230 (primary_type -> primary_type QUESTION .)
    TYPE            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    TEST            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    IF              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    MATCH           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    CASE            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    FOR             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    WHILE           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LOOP            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    BREAK           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    CONTINUE        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    RETURN          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    TRY             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    THROW           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ASSERT          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ROUTINE         reduce using rule 230 (primary_type -> primary_type QUESTION .)
    AT              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    NUMBER          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    STRING          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    TRUE            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    FALSE           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    NULL            reduce using rule 230 (primary_type -> primary_type QUESTION .)
    IDENTIFIER      reduce using rule 230 (primary_type -> primary_type QUESTION .)
    LPAREN          reduce using rule 230 (primary_type -> primary_type QUESTION .)
    FN              reduce using rule 230 (primary_type -> primary_type QUESTION .)
    ASYNC           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    PARALLEL        reduce using rule 230 (primary_type -> primary_type QUESTION .)
    NOT             reduce using rule 230 (primary_type -> primary_type QUESTION .)
    MINUS           reduce using rule 230 (primary_type -> primary_type QUESTION .)
    AWAIT           reduce using rule 230 (primary_type -> primary_type QUESTION .)


state 183

    (227) primary_type -> qualified_name type_arguments_opt .

    LBRACKET        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    QUESTION        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    AMPERSAND       reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    PIPE            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ASSIGN          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    SEMICOLON       reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    COMMA           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LBRACE          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    RBRACKET        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    RPAREN          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    GT              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LT              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LEQ             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    GEQ             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    EQ              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    NEQ             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    AND             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    RANGE           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    OR              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    RBRACE          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    FATARROW        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ARROW           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LET             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    CONST           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    STRUCT          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ENUM            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    INTERFACE       reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    TYPE            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    TEST            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    IF              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    MATCH           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    CASE            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    FOR             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    WHILE           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LOOP            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    BREAK           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    CONTINUE        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    RETURN          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    TRY             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    THROW           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ASSERT          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ROUTINE         reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    AT              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    NUMBER          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    STRING          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    TRUE            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    FALSE           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    NULL            reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    IDENTIFIER      reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    LPAREN          reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    FN              reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    ASYNC           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    PARALLEL        reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    NOT             reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    MINUS           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)
    AWAIT           reduce using rule 227 (primary_type -> qualified_name type_arguments_opt .)


state 184

    (232) type_arguments_opt -> LT . type_list GT
    (234) type_list -> . type_list COMMA type
    (235) type_list -> . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type_list                      shift and go to state 293
    type                           shift and go to state 163
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 185

    (233) type_arguments_opt -> empty .

    LBRACKET        reduce using rule 233 (type_arguments_opt -> empty .)
    QUESTION        reduce using rule 233 (type_arguments_opt -> empty .)
    AMPERSAND       reduce using rule 233 (type_arguments_opt -> empty .)
    PIPE            reduce using rule 233 (type_arguments_opt -> empty .)
    ASSIGN          reduce using rule 233 (type_arguments_opt -> empty .)
    SEMICOLON       reduce using rule 233 (type_arguments_opt -> empty .)
    COMMA           reduce using rule 233 (type_arguments_opt -> empty .)
    LBRACE          reduce using rule 233 (type_arguments_opt -> empty .)
    RBRACKET        reduce using rule 233 (type_arguments_opt -> empty .)
    RPAREN          reduce using rule 233 (type_arguments_opt -> empty .)
    GT              reduce using rule 233 (type_arguments_opt -> empty .)
    LT              reduce using rule 233 (type_arguments_opt -> empty .)
    LEQ             reduce using rule 233 (type_arguments_opt -> empty .)
    GEQ             reduce using rule 233 (type_arguments_opt -> empty .)
    EQ              reduce using rule 233 (type_arguments_opt -> empty .)
    NEQ             reduce using rule 233 (type_arguments_opt -> empty .)
    AND             reduce using rule 233 (type_arguments_opt -> empty .)
    RANGE           reduce using rule 233 (type_arguments_opt -> empty .)
    OR              reduce using rule 233 (type_arguments_opt -> empty .)
    RBRACE          reduce using rule 233 (type_arguments_opt -> empty .)
    FATARROW        reduce using rule 233 (type_arguments_opt -> empty .)
    ARROW           reduce using rule 233 (type_arguments_opt -> empty .)
    LET             reduce using rule 233 (type_arguments_opt -> empty .)
    CONST           reduce using rule 233 (type_arguments_opt -> empty .)
    STRUCT          reduce using rule 233 (type_arguments_opt -> empty .)
    ENUM            reduce using rule 233 (type_arguments_opt -> empty .)
    INTERFACE       reduce using rule 233 (type_arguments_opt -> empty .)
    TYPE            reduce using rule 233 (type_arguments_opt -> empty .)
    TEST            reduce using rule 233 (type_arguments_opt -> empty .)
    IF              reduce using rule 233 (type_arguments_opt -> empty .)
    MATCH           reduce using rule 233 (type_arguments_opt -> empty .)
    CASE            reduce using rule 233 (type_arguments_opt -> empty .)
    FOR             reduce using rule 233 (type_arguments_opt -> empty .)
    WHILE           reduce using rule 233 (type_arguments_opt -> empty .)
    LOOP            reduce using rule 233 (type_arguments_opt -> empty .)
    BREAK           reduce using rule 233 (type_arguments_opt -> empty .)
    CONTINUE        reduce using rule 233 (type_arguments_opt -> empty .)
    RETURN          reduce using rule 233 (type_arguments_opt -> empty .)
    TRY             reduce using rule 233 (type_arguments_opt -> empty .)
    THROW           reduce using rule 233 (type_arguments_opt -> empty .)
    ASSERT          reduce using rule 233 (type_arguments_opt -> empty .)
    ROUTINE         reduce using rule 233 (type_arguments_opt -> empty .)
    AT              reduce using rule 233 (type_arguments_opt -> empty .)
    NUMBER          reduce using rule 233 (type_arguments_opt -> empty .)
    STRING          reduce using rule 233 (type_arguments_opt -> empty .)
    TRUE            reduce using rule 233 (type_arguments_opt -> empty .)
    FALSE           reduce using rule 233 (type_arguments_opt -> empty .)
    NULL            reduce using rule 233 (type_arguments_opt -> empty .)
    IDENTIFIER      reduce using rule 233 (type_arguments_opt -> empty .)
    LPAREN          reduce using rule 233 (type_arguments_opt -> empty .)
    FN              reduce using rule 233 (type_arguments_opt -> empty .)
    ASYNC           reduce using rule 233 (type_arguments_opt -> empty .)
    PARALLEL        reduce using rule 233 (type_arguments_opt -> empty .)
    NOT             reduce using rule 233 (type_arguments_opt -> empty .)
    MINUS           reduce using rule 233 (type_arguments_opt -> empty .)
    AWAIT           reduce using rule 233 (type_arguments_opt -> empty .)


state 186

    (229) primary_type -> LBRACKET type_list . RBRACKET
    (234) type_list -> type_list . COMMA type

    RBRACKET        shift and go to state 294
    COMMA           shift and go to state 277


state 187

    (231) primary_type -> LPAREN type . RPAREN

    RPAREN          shift and go to state 295


state 188

    (81) variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt . SEMICOLON

    SEMICOLON       shift and go to state 296


state 189

    (86) initializer_opt -> ASSIGN . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 297
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 190

    (87) initializer_opt -> empty .

    SEMICOLON       reduce using rule 87 (initializer_opt -> empty .)


state 191

    (212) primary_expression -> LBRACE object_field_list_opt . RBRACE

    RBRACE          shift and go to state 298


state 192

    (214) object_field_list_opt -> object_field_list . maybe_trailing_comma
    (216) object_field_list -> object_field_list . COMMA object_field
    (89) maybe_trailing_comma -> . COMMA
    (90) maybe_trailing_comma -> . empty
    (252) empty -> .

    COMMA           shift and go to state 300
    RBRACE          reduce using rule 252 (empty -> .)

    maybe_trailing_comma           shift and go to state 299
    empty                          shift and go to state 284

state 193

    (215) object_field_list_opt -> empty .

    RBRACE          reduce using rule 215 (object_field_list_opt -> empty .)


state 194

    (217) object_field_list -> object_field .

    COMMA           reduce using rule 217 (object_field_list -> object_field .)
    RBRACE          reduce using rule 217 (object_field_list -> object_field .)


state 195

    (218) object_field -> IDENTIFIER . COLON expression

    COLON           shift and go to state 301


state 196

    (91) block -> LBRACE statement_list_opt RBRACE .

    IMPORT          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    STRUCT          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ENUM            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    INTERFACE       reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    TYPE            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    CONST           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LET             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    TEST            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    AT              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ASYNC           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    FN              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    $end            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    IF              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MATCH           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    CASE            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    FOR             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    WHILE           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LOOP            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    BREAK           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    CONTINUE        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    RETURN          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    TRY             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    THROW           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ASSERT          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ROUTINE         reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    NUMBER          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    STRING          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    TRUE            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    FALSE           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    NULL            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LPAREN          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LBRACKET        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LBRACE          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    PARALLEL        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    NOT             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MINUS           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    AWAIT           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    RBRACE          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    CATCH           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    FINALLY         reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    DOT             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ASSIGN          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    PLUS_ASSIGN     reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MINUS_ASSIGN    reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MULTIPLY_ASSIGN reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    DIVIDE_ASSIGN   reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MODULO_ASSIGN   reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MULTIPLY        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    DIVIDE          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MODULO          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    IS              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    PLUS            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LT              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    GT              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    LEQ             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    GEQ             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    EQ              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    NEQ             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    AND             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    RANGE           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    OR              reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    SEMICOLON       reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    COMMA           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    RPAREN          reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    RBRACKET        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    FATARROW        reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ARROW           reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    ELSE            reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)
    MUT             reduce using rule 91 (block -> LBRACE statement_list_opt RBRACE .)


state 197

    (94) statement_list -> statement_list statement .

    LET             reduce using rule 94 (statement_list -> statement_list statement .)
    CONST           reduce using rule 94 (statement_list -> statement_list statement .)
    STRUCT          reduce using rule 94 (statement_list -> statement_list statement .)
    ENUM            reduce using rule 94 (statement_list -> statement_list statement .)
    INTERFACE       reduce using rule 94 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 94 (statement_list -> statement_list statement .)
    TEST            reduce using rule 94 (statement_list -> statement_list statement .)
    IF              reduce using rule 94 (statement_list -> statement_list statement .)
    MATCH           reduce using rule 94 (statement_list -> statement_list statement .)
    CASE            reduce using rule 94 (statement_list -> statement_list statement .)
    FOR             reduce using rule 94 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 94 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 94 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 94 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 94 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 94 (statement_list -> statement_list statement .)
    TRY             reduce using rule 94 (statement_list -> statement_list statement .)
    THROW           reduce using rule 94 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 94 (statement_list -> statement_list statement .)
    ROUTINE         reduce using rule 94 (statement_list -> statement_list statement .)
    AT              reduce using rule 94 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 94 (statement_list -> statement_list statement .)
    STRING          reduce using rule 94 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 94 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 94 (statement_list -> statement_list statement .)
    NULL            reduce using rule 94 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 94 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 94 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 94 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 94 (statement_list -> statement_list statement .)
    FN              reduce using rule 94 (statement_list -> statement_list statement .)
    ASYNC           reduce using rule 94 (statement_list -> statement_list statement .)
    PARALLEL        reduce using rule 94 (statement_list -> statement_list statement .)
    NOT             reduce using rule 94 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 94 (statement_list -> statement_list statement .)
    AWAIT           reduce using rule 94 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 94 (statement_list -> statement_list statement .)


state 198

    (213) primary_expression -> IDENTIFIER LBRACE . object_field_list_opt RBRACE
    (214) object_field_list_opt -> . object_field_list maybe_trailing_comma
    (215) object_field_list_opt -> . empty
    (216) object_field_list -> . object_field_list COMMA object_field
    (217) object_field_list -> . object_field
    (252) empty -> .
    (218) object_field -> . IDENTIFIER COLON expression

    RBRACE          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 195

    object_field_list_opt          shift and go to state 302
    object_field_list              shift and go to state 192
    empty                          shift and go to state 193
    object_field                   shift and go to state 194

state 199

    (118) expression_statement -> expression SEMICOLON .

    LET             reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    CONST           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    STRUCT          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    ENUM            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    INTERFACE       reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    TYPE            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    TEST            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    MATCH           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    LOOP            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    TRY             reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    THROW           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    ASSERT          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    ROUTINE         reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    AT              reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    LBRACKET        reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    FN              reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    ASYNC           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    PARALLEL        reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    AWAIT           reduce using rule 118 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 118 (expression_statement -> expression SEMICOLON .)


state 200

    (219) primary_expression -> FN LPAREN . parameter_list_opt RPAREN return_type_opt block
    (39) parameter_list_opt -> . parameter_list
    (40) parameter_list_opt -> . empty
    (41) parameter_list -> . parameter_list COMMA parameter
    (42) parameter_list -> . parameter
    (252) empty -> .
    (43) parameter -> . IDENTIFIER parameter_type_opt parameter_default_opt

    RPAREN          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 307

    parameter_list_opt             shift and go to state 303
    parameter_list                 shift and go to state 304
    empty                          shift and go to state 305
    parameter                      shift and go to state 306

state 201

    (206) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 308


state 202

    (119) if_statement -> IF condition . block else_clause_opt
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 309

state 203

    (120) condition -> LPAREN . expression RPAREN
    (206) primary_expression -> LPAREN . expression RPAREN
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 310
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 204

    (121) condition -> expression .

    LBRACE          reduce using rule 121 (condition -> expression .)


state 205

    (125) match_statement -> MATCH expression . match_block
    (137) primary_expression -> MATCH expression . match_block
    (126) match_block -> . LBRACE match_case_list RBRACE

    LBRACE          shift and go to state 312

    match_block                    shift and go to state 311

state 206

    (132) match_case_statement -> CASE pattern . match_guard_opt match_arrow match_body optional_comma
    (138) match_guard_opt -> . IF expression
    (139) match_guard_opt -> . empty
    (252) empty -> .

    IF              shift and go to state 314
    FATARROW        reduce using rule 252 (empty -> .)
    ARROW           reduce using rule 252 (empty -> .)

    match_guard_opt                shift and go to state 313
    empty                          shift and go to state 315

state 207

    (236) pattern -> IDENTIFIER .
    (250) qualified_name -> IDENTIFIER .

    IF              reduce using rule 236 (pattern -> IDENTIFIER .)
    FATARROW        reduce using rule 236 (pattern -> IDENTIFIER .)
    ARROW           reduce using rule 236 (pattern -> IDENTIFIER .)
    IN              reduce using rule 236 (pattern -> IDENTIFIER .)
    COMMA           reduce using rule 236 (pattern -> IDENTIFIER .)
    RBRACE          reduce using rule 236 (pattern -> IDENTIFIER .)
    RPAREN          reduce using rule 236 (pattern -> IDENTIFIER .)
    LBRACE          reduce using rule 250 (qualified_name -> IDENTIFIER .)
    DOT             reduce using rule 250 (qualified_name -> IDENTIFIER .)


state 208

    (237) pattern -> NUMBER .

    IF              reduce using rule 237 (pattern -> NUMBER .)
    FATARROW        reduce using rule 237 (pattern -> NUMBER .)
    ARROW           reduce using rule 237 (pattern -> NUMBER .)
    IN              reduce using rule 237 (pattern -> NUMBER .)
    COMMA           reduce using rule 237 (pattern -> NUMBER .)
    RBRACE          reduce using rule 237 (pattern -> NUMBER .)
    RPAREN          reduce using rule 237 (pattern -> NUMBER .)


state 209

    (238) pattern -> STRING .

    IF              reduce using rule 238 (pattern -> STRING .)
    FATARROW        reduce using rule 238 (pattern -> STRING .)
    ARROW           reduce using rule 238 (pattern -> STRING .)
    IN              reduce using rule 238 (pattern -> STRING .)
    COMMA           reduce using rule 238 (pattern -> STRING .)
    RBRACE          reduce using rule 238 (pattern -> STRING .)
    RPAREN          reduce using rule 238 (pattern -> STRING .)


state 210

    (239) pattern -> TRUE .

    IF              reduce using rule 239 (pattern -> TRUE .)
    FATARROW        reduce using rule 239 (pattern -> TRUE .)
    ARROW           reduce using rule 239 (pattern -> TRUE .)
    IN              reduce using rule 239 (pattern -> TRUE .)
    COMMA           reduce using rule 239 (pattern -> TRUE .)
    RBRACE          reduce using rule 239 (pattern -> TRUE .)
    RPAREN          reduce using rule 239 (pattern -> TRUE .)


state 211

    (240) pattern -> FALSE .

    IF              reduce using rule 240 (pattern -> FALSE .)
    FATARROW        reduce using rule 240 (pattern -> FALSE .)
    ARROW           reduce using rule 240 (pattern -> FALSE .)
    IN              reduce using rule 240 (pattern -> FALSE .)
    COMMA           reduce using rule 240 (pattern -> FALSE .)
    RBRACE          reduce using rule 240 (pattern -> FALSE .)
    RPAREN          reduce using rule 240 (pattern -> FALSE .)


state 212

    (241) pattern -> NULL .

    IF              reduce using rule 241 (pattern -> NULL .)
    FATARROW        reduce using rule 241 (pattern -> NULL .)
    ARROW           reduce using rule 241 (pattern -> NULL .)
    IN              reduce using rule 241 (pattern -> NULL .)
    COMMA           reduce using rule 241 (pattern -> NULL .)
    RBRACE          reduce using rule 241 (pattern -> NULL .)
    RPAREN          reduce using rule 241 (pattern -> NULL .)


state 213

    (242) pattern -> MINUS . NUMBER

    NUMBER          shift and go to state 316


state 214

    (243) pattern -> qualified_name . LBRACE pattern_field_list_opt RBRACE
    (251) qualified_name -> qualified_name . DOT IDENTIFIER

    LBRACE          shift and go to state 317
    DOT             shift and go to state 62


state 215

    (142) for_statement -> FOR pattern . IN expression block

    IN              shift and go to state 318


state 216

    (143) while_statement -> WHILE condition . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 319

state 217

    (144) loop_statement -> LOOP block .

    LET             reduce using rule 144 (loop_statement -> LOOP block .)
    CONST           reduce using rule 144 (loop_statement -> LOOP block .)
    STRUCT          reduce using rule 144 (loop_statement -> LOOP block .)
    ENUM            reduce using rule 144 (loop_statement -> LOOP block .)
    INTERFACE       reduce using rule 144 (loop_statement -> LOOP block .)
    TYPE            reduce using rule 144 (loop_statement -> LOOP block .)
    TEST            reduce using rule 144 (loop_statement -> LOOP block .)
    IF              reduce using rule 144 (loop_statement -> LOOP block .)
    MATCH           reduce using rule 144 (loop_statement -> LOOP block .)
    CASE            reduce using rule 144 (loop_statement -> LOOP block .)
    FOR             reduce using rule 144 (loop_statement -> LOOP block .)
    WHILE           reduce using rule 144 (loop_statement -> LOOP block .)
    LOOP            reduce using rule 144 (loop_statement -> LOOP block .)
    BREAK           reduce using rule 144 (loop_statement -> LOOP block .)
    CONTINUE        reduce using rule 144 (loop_statement -> LOOP block .)
    RETURN          reduce using rule 144 (loop_statement -> LOOP block .)
    TRY             reduce using rule 144 (loop_statement -> LOOP block .)
    THROW           reduce using rule 144 (loop_statement -> LOOP block .)
    ASSERT          reduce using rule 144 (loop_statement -> LOOP block .)
    ROUTINE         reduce using rule 144 (loop_statement -> LOOP block .)
    AT              reduce using rule 144 (loop_statement -> LOOP block .)
    NUMBER          reduce using rule 144 (loop_statement -> LOOP block .)
    STRING          reduce using rule 144 (loop_statement -> LOOP block .)
    TRUE            reduce using rule 144 (loop_statement -> LOOP block .)
    FALSE           reduce using rule 144 (loop_statement -> LOOP block .)
    NULL            reduce using rule 144 (loop_statement -> LOOP block .)
    IDENTIFIER      reduce using rule 144 (loop_statement -> LOOP block .)
    LPAREN          reduce using rule 144 (loop_statement -> LOOP block .)
    LBRACKET        reduce using rule 144 (loop_statement -> LOOP block .)
    LBRACE          reduce using rule 144 (loop_statement -> LOOP block .)
    FN              reduce using rule 144 (loop_statement -> LOOP block .)
    ASYNC           reduce using rule 144 (loop_statement -> LOOP block .)
    PARALLEL        reduce using rule 144 (loop_statement -> LOOP block .)
    NOT             reduce using rule 144 (loop_statement -> LOOP block .)
    MINUS           reduce using rule 144 (loop_statement -> LOOP block .)
    AWAIT           reduce using rule 144 (loop_statement -> LOOP block .)
    RBRACE          reduce using rule 144 (loop_statement -> LOOP block .)


state 218

    (145) break_statement -> BREAK SEMICOLON .

    LET             reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    ENUM            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    INTERFACE       reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    TYPE            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    TEST            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    MATCH           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    LOOP            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    TRY             reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    THROW           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    ASSERT          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    ROUTINE         reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    AT              reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    NULL            reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    LBRACKET        reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    LBRACE          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    FN              reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    ASYNC           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    PARALLEL        reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    AWAIT           reduce using rule 145 (break_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 145 (break_statement -> BREAK SEMICOLON .)


state 219

    (146) continue_statement -> CONTINUE SEMICOLON .

    LET             reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    ENUM            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    INTERFACE       reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    TEST            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    MATCH           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    LOOP            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    TRY             reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    THROW           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    ASSERT          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    ROUTINE         reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    AT              reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACKET        reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    LBRACE          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    FN              reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    ASYNC           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    PARALLEL        reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    AWAIT           reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 146 (continue_statement -> CONTINUE SEMICOLON .)


state 220

    (147) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 320


state 221

    (148) return_statement -> RETURN SEMICOLON .

    LET             reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    CONST           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    ENUM            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    INTERFACE       reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    TYPE            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    TEST            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    MATCH           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    LOOP            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    TRY             reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    THROW           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    ASSERT          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    ROUTINE         reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    AT              reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    STRING          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    NULL            reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    LBRACKET        reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    LBRACE          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    FN              reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    ASYNC           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    PARALLEL        reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    AWAIT           reduce using rule 148 (return_statement -> RETURN SEMICOLON .)
    RBRACE          reduce using rule 148 (return_statement -> RETURN SEMICOLON .)


state 222

    (149) try_statement -> TRY block . catch_clause finally_clause_opt
    (150) catch_clause -> . CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block
    (151) catch_clause -> . empty
    (252) empty -> .

    CATCH           shift and go to state 322
    FINALLY         reduce using rule 252 (empty -> .)
    LET             reduce using rule 252 (empty -> .)
    CONST           reduce using rule 252 (empty -> .)
    STRUCT          reduce using rule 252 (empty -> .)
    ENUM            reduce using rule 252 (empty -> .)
    INTERFACE       reduce using rule 252 (empty -> .)
    TYPE            reduce using rule 252 (empty -> .)
    TEST            reduce using rule 252 (empty -> .)
    IF              reduce using rule 252 (empty -> .)
    MATCH           reduce using rule 252 (empty -> .)
    CASE            reduce using rule 252 (empty -> .)
    FOR             reduce using rule 252 (empty -> .)
    WHILE           reduce using rule 252 (empty -> .)
    LOOP            reduce using rule 252 (empty -> .)
    BREAK           reduce using rule 252 (empty -> .)
    CONTINUE        reduce using rule 252 (empty -> .)
    RETURN          reduce using rule 252 (empty -> .)
    TRY             reduce using rule 252 (empty -> .)
    THROW           reduce using rule 252 (empty -> .)
    ASSERT          reduce using rule 252 (empty -> .)
    ROUTINE         reduce using rule 252 (empty -> .)
    AT              reduce using rule 252 (empty -> .)
    NUMBER          reduce using rule 252 (empty -> .)
    STRING          reduce using rule 252 (empty -> .)
    TRUE            reduce using rule 252 (empty -> .)
    FALSE           reduce using rule 252 (empty -> .)
    NULL            reduce using rule 252 (empty -> .)
    IDENTIFIER      reduce using rule 252 (empty -> .)
    LPAREN          reduce using rule 252 (empty -> .)
    LBRACKET        reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    PARALLEL        reduce using rule 252 (empty -> .)
    NOT             reduce using rule 252 (empty -> .)
    MINUS           reduce using rule 252 (empty -> .)
    AWAIT           reduce using rule 252 (empty -> .)
    RBRACE          reduce using rule 252 (empty -> .)

    catch_clause                   shift and go to state 321
    empty                          shift and go to state 323

state 223

    (156) throw_statement -> THROW expression . SEMICOLON

    SEMICOLON       shift and go to state 324


state 224

    (157) assert_statement -> ASSERT expression . SEMICOLON

    SEMICOLON       shift and go to state 325


state 225

    (158) routine_statement -> ROUTINE routine_name_opt . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 326

state 226

    (159) routine_name_opt -> STRING .

    LBRACE          reduce using rule 159 (routine_name_opt -> STRING .)


state 227

    (160) routine_name_opt -> empty .

    LBRACE          reduce using rule 160 (routine_name_opt -> empty .)


state 228

    (163) assignment_expression -> postfix_expression assignment_operator . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    postfix_expression             shift and go to state 133
    assignment_expression          shift and go to state 327
    range_expression               shift and go to state 132
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 229

    (196) postfix_expression -> postfix_expression LPAREN . argument_list_opt RPAREN
    (18) argument_list_opt -> . argument_list
    (19) argument_list_opt -> . empty
    (20) argument_list -> . argument_list COMMA expression
    (21) argument_list -> . expression
    (252) empty -> .
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    RPAREN          reduce using rule 252 (empty -> .)
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    postfix_expression             shift and go to state 133
    argument_list_opt              shift and go to state 328
    argument_list                  shift and go to state 154
    empty                          shift and go to state 155
    expression                     shift and go to state 156
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 230

    (197) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 329


state 231

    (198) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    postfix_expression             shift and go to state 133
    expression                     shift and go to state 330
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 232

    (164) assignment_operator -> ASSIGN .

    MATCH           reduce using rule 164 (assignment_operator -> ASSIGN .)
    NUMBER          reduce using rule 164 (assignment_operator -> ASSIGN .)
    STRING          reduce using rule 164 (assignment_operator -> ASSIGN .)
    TRUE            reduce using rule 164 (assignment_operator -> ASSIGN .)
    FALSE           reduce using rule 164 (assignment_operator -> ASSIGN .)
    NULL            reduce using rule 164 (assignment_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 164 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 164 (assignment_operator -> ASSIGN .)
    LBRACKET        reduce using rule 164 (assignment_operator -> ASSIGN .)
    LBRACE          reduce using rule 164 (assignment_operator -> ASSIGN .)
    FN              reduce using rule 164 (assignment_operator -> ASSIGN .)
    ASYNC           reduce using rule 164 (assignment_operator -> ASSIGN .)
    PARALLEL        reduce using rule 164 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 164 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 164 (assignment_operator -> ASSIGN .)
    AWAIT           reduce using rule 164 (assignment_operator -> ASSIGN .)


state 233

    (165) assignment_operator -> PLUS_ASSIGN .

    MATCH           reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    NUMBER          reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    STRING          reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    NULL            reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    IDENTIFIER      reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    LPAREN          reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    LBRACKET        reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    LBRACE          reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    FN              reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    ASYNC           reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    PARALLEL        reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    NOT             reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    MINUS           reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)
    AWAIT           reduce using rule 165 (assignment_operator -> PLUS_ASSIGN .)


state 234

    (166) assignment_operator -> MINUS_ASSIGN .

    MATCH           reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    NUMBER          reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    STRING          reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    TRUE            reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    FALSE           reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    NULL            reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    IDENTIFIER      reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    LPAREN          reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    LBRACKET        reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    LBRACE          reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    FN              reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    ASYNC           reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    PARALLEL        reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    NOT             reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    MINUS           reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)
    AWAIT           reduce using rule 166 (assignment_operator -> MINUS_ASSIGN .)


state 235

    (167) assignment_operator -> MULTIPLY_ASSIGN .

    MATCH           reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    NUMBER          reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    STRING          reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    TRUE            reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    FALSE           reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    NULL            reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    IDENTIFIER      reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    LPAREN          reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    LBRACKET        reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    LBRACE          reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    FN              reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    ASYNC           reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    PARALLEL        reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    NOT             reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    MINUS           reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)
    AWAIT           reduce using rule 167 (assignment_operator -> MULTIPLY_ASSIGN .)


state 236

    (168) assignment_operator -> DIVIDE_ASSIGN .

    MATCH           reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    NUMBER          reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING          reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    NULL            reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    IDENTIFIER      reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    LPAREN          reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    LBRACKET        reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    LBRACE          reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    FN              reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    ASYNC           reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    PARALLEL        reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    NOT             reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUS           reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)
    AWAIT           reduce using rule 168 (assignment_operator -> DIVIDE_ASSIGN .)


state 237

    (169) assignment_operator -> MODULO_ASSIGN .

    MATCH           reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    NUMBER          reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    STRING          reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    TRUE            reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    FALSE           reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    NULL            reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    IDENTIFIER      reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    LPAREN          reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    LBRACKET        reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    LBRACE          reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    FN              reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    ASYNC           reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    PARALLEL        reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    NOT             reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    MINUS           reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)
    AWAIT           reduce using rule 169 (assignment_operator -> MODULO_ASSIGN .)


state 238

    (170) range_expression -> logical_or_expression RANGE . logical_or_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    logical_or_expression          shift and go to state 331
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 239

    (172) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    logical_and_expression         shift and go to state 332
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 240

    (207) primary_expression -> LBRACKET expression_list_opt . RBRACKET

    RBRACKET        shift and go to state 333


state 241

    (208) expression_list_opt -> expression_list .
    (210) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 208 (expression_list_opt -> expression_list .)
    COMMA           shift and go to state 334


state 242

    (209) expression_list_opt -> empty .

    RBRACKET        reduce using rule 209 (expression_list_opt -> empty .)


state 243

    (211) expression_list -> expression .

    COMMA           reduce using rule 211 (expression_list -> expression .)
    RBRACKET        reduce using rule 211 (expression_list -> expression .)


state 244

    (174) logical_and_expression -> logical_and_expression AND . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    equality_expression            shift and go to state 335
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 245

    (220) primary_expression -> ASYNC block .

    LPAREN          reduce using rule 220 (primary_expression -> ASYNC block .)
    DOT             reduce using rule 220 (primary_expression -> ASYNC block .)
    LBRACKET        reduce using rule 220 (primary_expression -> ASYNC block .)
    ASSIGN          reduce using rule 220 (primary_expression -> ASYNC block .)
    PLUS_ASSIGN     reduce using rule 220 (primary_expression -> ASYNC block .)
    MINUS_ASSIGN    reduce using rule 220 (primary_expression -> ASYNC block .)
    MULTIPLY_ASSIGN reduce using rule 220 (primary_expression -> ASYNC block .)
    DIVIDE_ASSIGN   reduce using rule 220 (primary_expression -> ASYNC block .)
    MODULO_ASSIGN   reduce using rule 220 (primary_expression -> ASYNC block .)
    MULTIPLY        reduce using rule 220 (primary_expression -> ASYNC block .)
    DIVIDE          reduce using rule 220 (primary_expression -> ASYNC block .)
    MODULO          reduce using rule 220 (primary_expression -> ASYNC block .)
    IS              reduce using rule 220 (primary_expression -> ASYNC block .)
    PLUS            reduce using rule 220 (primary_expression -> ASYNC block .)
    MINUS           reduce using rule 220 (primary_expression -> ASYNC block .)
    LT              reduce using rule 220 (primary_expression -> ASYNC block .)
    GT              reduce using rule 220 (primary_expression -> ASYNC block .)
    LEQ             reduce using rule 220 (primary_expression -> ASYNC block .)
    GEQ             reduce using rule 220 (primary_expression -> ASYNC block .)
    EQ              reduce using rule 220 (primary_expression -> ASYNC block .)
    NEQ             reduce using rule 220 (primary_expression -> ASYNC block .)
    AND             reduce using rule 220 (primary_expression -> ASYNC block .)
    RANGE           reduce using rule 220 (primary_expression -> ASYNC block .)
    OR              reduce using rule 220 (primary_expression -> ASYNC block .)
    SEMICOLON       reduce using rule 220 (primary_expression -> ASYNC block .)
    COMMA           reduce using rule 220 (primary_expression -> ASYNC block .)
    RPAREN          reduce using rule 220 (primary_expression -> ASYNC block .)
    LBRACE          reduce using rule 220 (primary_expression -> ASYNC block .)
    RBRACKET        reduce using rule 220 (primary_expression -> ASYNC block .)
    RBRACE          reduce using rule 220 (primary_expression -> ASYNC block .)
    FATARROW        reduce using rule 220 (primary_expression -> ASYNC block .)
    ARROW           reduce using rule 220 (primary_expression -> ASYNC block .)
    LET             reduce using rule 220 (primary_expression -> ASYNC block .)
    CONST           reduce using rule 220 (primary_expression -> ASYNC block .)
    STRUCT          reduce using rule 220 (primary_expression -> ASYNC block .)
    ENUM            reduce using rule 220 (primary_expression -> ASYNC block .)
    INTERFACE       reduce using rule 220 (primary_expression -> ASYNC block .)
    TYPE            reduce using rule 220 (primary_expression -> ASYNC block .)
    TEST            reduce using rule 220 (primary_expression -> ASYNC block .)
    IF              reduce using rule 220 (primary_expression -> ASYNC block .)
    MATCH           reduce using rule 220 (primary_expression -> ASYNC block .)
    CASE            reduce using rule 220 (primary_expression -> ASYNC block .)
    FOR             reduce using rule 220 (primary_expression -> ASYNC block .)
    WHILE           reduce using rule 220 (primary_expression -> ASYNC block .)
    LOOP            reduce using rule 220 (primary_expression -> ASYNC block .)
    BREAK           reduce using rule 220 (primary_expression -> ASYNC block .)
    CONTINUE        reduce using rule 220 (primary_expression -> ASYNC block .)
    RETURN          reduce using rule 220 (primary_expression -> ASYNC block .)
    TRY             reduce using rule 220 (primary_expression -> ASYNC block .)
    THROW           reduce using rule 220 (primary_expression -> ASYNC block .)
    ASSERT          reduce using rule 220 (primary_expression -> ASYNC block .)
    ROUTINE         reduce using rule 220 (primary_expression -> ASYNC block .)
    AT              reduce using rule 220 (primary_expression -> ASYNC block .)
    NUMBER          reduce using rule 220 (primary_expression -> ASYNC block .)
    STRING          reduce using rule 220 (primary_expression -> ASYNC block .)
    TRUE            reduce using rule 220 (primary_expression -> ASYNC block .)
    FALSE           reduce using rule 220 (primary_expression -> ASYNC block .)
    NULL            reduce using rule 220 (primary_expression -> ASYNC block .)
    IDENTIFIER      reduce using rule 220 (primary_expression -> ASYNC block .)
    FN              reduce using rule 220 (primary_expression -> ASYNC block .)
    ASYNC           reduce using rule 220 (primary_expression -> ASYNC block .)
    PARALLEL        reduce using rule 220 (primary_expression -> ASYNC block .)
    NOT             reduce using rule 220 (primary_expression -> ASYNC block .)
    AWAIT           reduce using rule 220 (primary_expression -> ASYNC block .)


state 246

    (221) primary_expression -> PARALLEL LBRACKET . argument_list_opt RBRACKET
    (18) argument_list_opt -> . argument_list
    (19) argument_list_opt -> . empty
    (20) argument_list -> . argument_list COMMA expression
    (21) argument_list -> . expression
    (252) empty -> .
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    RBRACKET        reduce using rule 252 (empty -> .)
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    argument_list_opt              shift and go to state 336
    argument_list                  shift and go to state 154
    empty                          shift and go to state 155
    expression                     shift and go to state 156
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 247

    (176) equality_expression -> equality_expression EQ . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    relational_expression          shift and go to state 337
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 248

    (177) equality_expression -> equality_expression NEQ . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    relational_expression          shift and go to state 338
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 249

    (179) relational_expression -> relational_expression LT . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    additive_expression            shift and go to state 339
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 250

    (180) relational_expression -> relational_expression GT . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    additive_expression            shift and go to state 340
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 251

    (181) relational_expression -> relational_expression LEQ . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    additive_expression            shift and go to state 341
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 252

    (182) relational_expression -> relational_expression GEQ . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    additive_expression            shift and go to state 342
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 253

    (183) relational_expression -> additive_expression IS . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 343
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 254

    (185) additive_expression -> additive_expression PLUS . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    multiplicative_expression      shift and go to state 344
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 255

    (186) additive_expression -> additive_expression MINUS . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    multiplicative_expression      shift and go to state 345
    unary_expression               shift and go to state 149
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 256

    (188) multiplicative_expression -> multiplicative_expression MULTIPLY . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 346
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 257

    (189) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 347
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 258

    (190) multiplicative_expression -> multiplicative_expression MODULO . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET

    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143

    unary_expression               shift and go to state 348
    postfix_expression             shift and go to state 260
    primary_expression             shift and go to state 136

state 259

    (193) unary_expression -> MINUS unary_expression .

    MULTIPLY        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    IS              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LEQ             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    GEQ             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    NEQ             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    RANGE           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    FATARROW        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    ARROW           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LET             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    CONST           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    STRUCT          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    ENUM            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    INTERFACE       reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    TYPE            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    TEST            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    MATCH           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    FOR             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    CONTINUE        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    TRY             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    THROW           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    ASSERT          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    ROUTINE         reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    AT              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    NUMBER          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    NULL            reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    IDENTIFIER      reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    FN              reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    ASYNC           reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    PARALLEL        reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    NOT             reduce using rule 193 (unary_expression -> MINUS unary_expression .)
    AWAIT           reduce using rule 193 (unary_expression -> MINUS unary_expression .)


state 260

    (195) unary_expression -> postfix_expression .
    (196) postfix_expression -> postfix_expression . LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (198) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    MULTIPLY        reduce using rule 195 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 195 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 195 (unary_expression -> postfix_expression .)
    IS              reduce using rule 195 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 195 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 195 (unary_expression -> postfix_expression .)
    LT              reduce using rule 195 (unary_expression -> postfix_expression .)
    GT              reduce using rule 195 (unary_expression -> postfix_expression .)
    LEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    GEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 195 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 195 (unary_expression -> postfix_expression .)
    AND             reduce using rule 195 (unary_expression -> postfix_expression .)
    RANGE           reduce using rule 195 (unary_expression -> postfix_expression .)
    OR              reduce using rule 195 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 195 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 195 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 195 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 195 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 195 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 195 (unary_expression -> postfix_expression .)
    FATARROW        reduce using rule 195 (unary_expression -> postfix_expression .)
    ARROW           reduce using rule 195 (unary_expression -> postfix_expression .)
    LET             reduce using rule 195 (unary_expression -> postfix_expression .)
    CONST           reduce using rule 195 (unary_expression -> postfix_expression .)
    STRUCT          reduce using rule 195 (unary_expression -> postfix_expression .)
    ENUM            reduce using rule 195 (unary_expression -> postfix_expression .)
    INTERFACE       reduce using rule 195 (unary_expression -> postfix_expression .)
    TYPE            reduce using rule 195 (unary_expression -> postfix_expression .)
    TEST            reduce using rule 195 (unary_expression -> postfix_expression .)
    IF              reduce using rule 195 (unary_expression -> postfix_expression .)
    MATCH           reduce using rule 195 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 195 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 195 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 195 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 195 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 195 (unary_expression -> postfix_expression .)
    CONTINUE        reduce using rule 195 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 195 (unary_expression -> postfix_expression .)
    TRY             reduce using rule 195 (unary_expression -> postfix_expression .)
    THROW           reduce using rule 195 (unary_expression -> postfix_expression .)
    ASSERT          reduce using rule 195 (unary_expression -> postfix_expression .)
    ROUTINE         reduce using rule 195 (unary_expression -> postfix_expression .)
    AT              reduce using rule 195 (unary_expression -> postfix_expression .)
    NUMBER          reduce using rule 195 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 195 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 195 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 195 (unary_expression -> postfix_expression .)
    NULL            reduce using rule 195 (unary_expression -> postfix_expression .)
    IDENTIFIER      reduce using rule 195 (unary_expression -> postfix_expression .)
    FN              reduce using rule 195 (unary_expression -> postfix_expression .)
    ASYNC           reduce using rule 195 (unary_expression -> postfix_expression .)
    PARALLEL        reduce using rule 195 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 195 (unary_expression -> postfix_expression .)
    AWAIT           reduce using rule 195 (unary_expression -> postfix_expression .)
    LPAREN          shift and go to state 229
    DOT             shift and go to state 230
    LBRACKET        shift and go to state 231

  ! LPAREN          [ reduce using rule 195 (unary_expression -> postfix_expression .) ]
  ! LBRACKET        [ reduce using rule 195 (unary_expression -> postfix_expression .) ]


state 261

    (192) unary_expression -> NOT unary_expression .

    MULTIPLY        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    DIVIDE          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    MODULO          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    IS              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LT              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    GT              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LEQ             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    GEQ             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    EQ              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    NEQ             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    RANGE           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 192 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LBRACE          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    RBRACKET        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    RBRACE          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    FATARROW        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    ARROW           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LET             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    CONST           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    STRUCT          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    ENUM            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    INTERFACE       reduce using rule 192 (unary_expression -> NOT unary_expression .)
    TYPE            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    TEST            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    IF              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    MATCH           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    CASE            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    FOR             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    WHILE           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LOOP            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    BREAK           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    CONTINUE        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    RETURN          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    TRY             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    THROW           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    ASSERT          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    ROUTINE         reduce using rule 192 (unary_expression -> NOT unary_expression .)
    AT              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    NUMBER          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    STRING          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    TRUE            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    FALSE           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    NULL            reduce using rule 192 (unary_expression -> NOT unary_expression .)
    IDENTIFIER      reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LPAREN          reduce using rule 192 (unary_expression -> NOT unary_expression .)
    LBRACKET        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    FN              reduce using rule 192 (unary_expression -> NOT unary_expression .)
    ASYNC           reduce using rule 192 (unary_expression -> NOT unary_expression .)
    PARALLEL        reduce using rule 192 (unary_expression -> NOT unary_expression .)
    NOT             reduce using rule 192 (unary_expression -> NOT unary_expression .)
    AWAIT           reduce using rule 192 (unary_expression -> NOT unary_expression .)


state 262

    (194) unary_expression -> AWAIT unary_expression .

    MULTIPLY        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    DIVIDE          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    MODULO          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    IS              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    PLUS            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    MINUS           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LT              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    GT              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LEQ             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    GEQ             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    EQ              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    NEQ             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    AND             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    RANGE           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    OR              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    SEMICOLON       reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    COMMA           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    RPAREN          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LBRACE          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    RBRACKET        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    RBRACE          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    FATARROW        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    ARROW           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LET             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    CONST           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    STRUCT          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    ENUM            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    INTERFACE       reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    TYPE            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    TEST            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    IF              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    MATCH           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    CASE            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    FOR             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    WHILE           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LOOP            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    BREAK           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    CONTINUE        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    RETURN          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    TRY             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    THROW           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    ASSERT          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    ROUTINE         reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    AT              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    NUMBER          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    STRING          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    TRUE            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    FALSE           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    NULL            reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    IDENTIFIER      reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LPAREN          reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    LBRACKET        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    FN              reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    ASYNC           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    PARALLEL        reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    NOT             reduce using rule 194 (unary_expression -> AWAIT unary_expression .)
    AWAIT           reduce using rule 194 (unary_expression -> AWAIT unary_expression .)


state 263

    (16) decorator_args_opt -> LPAREN argument_list_opt RPAREN .

    AT              reduce using rule 16 (decorator_args_opt -> LPAREN argument_list_opt RPAREN .)
    ASYNC           reduce using rule 16 (decorator_args_opt -> LPAREN argument_list_opt RPAREN .)
    FN              reduce using rule 16 (decorator_args_opt -> LPAREN argument_list_opt RPAREN .)


state 264

    (20) argument_list -> argument_list COMMA . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 349
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 265

    (137) primary_expression -> MATCH expression . match_block
    (126) match_block -> . LBRACE match_case_list RBRACE

    LBRACE          shift and go to state 312

    match_block                    shift and go to state 350

state 266

    (6) import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING . SEMICOLON

    SEMICOLON       shift and go to state 351


state 267

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN . parameter_list_opt RPAREN return_type_opt block
    (39) parameter_list_opt -> . parameter_list
    (40) parameter_list_opt -> . empty
    (41) parameter_list -> . parameter_list COMMA parameter
    (42) parameter_list -> . parameter
    (252) empty -> .
    (43) parameter -> . IDENTIFIER parameter_type_opt parameter_default_opt

    RPAREN          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 307

    parameter_list_opt             shift and go to state 352
    parameter_list                 shift and go to state 304
    empty                          shift and go to state 305
    parameter                      shift and go to state 306

state 268

    (61) field_declaration -> IDENTIFIER . ARROW type SEMICOLON

    ARROW           shift and go to state 353


state 269

    (51) struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt . RBRACE

    RBRACE          shift and go to state 354


state 270

    (54) struct_member_list_opt -> struct_member_list .
    (56) struct_member_list -> struct_member_list . struct_member
    (58) struct_member -> . field_declaration
    (59) struct_member -> . method_declaration
    (60) field_declaration -> . MUT IDENTIFIER ARROW type SEMICOLON
    (61) field_declaration -> . IDENTIFIER ARROW type SEMICOLON
    (62) method_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (252) empty -> .
    (15) decorator -> . AT qualified_name decorator_args_opt

    RBRACE          reduce using rule 54 (struct_member_list_opt -> struct_member_list .)
    MUT             shift and go to state 275
    IDENTIFIER      shift and go to state 268
    ASYNC           reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    AT              shift and go to state 26

    struct_member                  shift and go to state 355
    field_declaration              shift and go to state 273
    method_declaration             shift and go to state 274
    decorator_list_opt             shift and go to state 276
    decorator_list                 shift and go to state 23
    empty                          shift and go to state 24
    decorator                      shift and go to state 25

state 271

    (55) struct_member_list_opt -> empty .
    (14) decorator_list_opt -> empty .

    RBRACE          reduce using rule 55 (struct_member_list_opt -> empty .)
    ASYNC           reduce using rule 14 (decorator_list_opt -> empty .)
    FN              reduce using rule 14 (decorator_list_opt -> empty .)


state 272

    (57) struct_member_list -> struct_member .

    MUT             reduce using rule 57 (struct_member_list -> struct_member .)
    IDENTIFIER      reduce using rule 57 (struct_member_list -> struct_member .)
    AT              reduce using rule 57 (struct_member_list -> struct_member .)
    ASYNC           reduce using rule 57 (struct_member_list -> struct_member .)
    FN              reduce using rule 57 (struct_member_list -> struct_member .)
    RBRACE          reduce using rule 57 (struct_member_list -> struct_member .)


state 273

    (58) struct_member -> field_declaration .

    MUT             reduce using rule 58 (struct_member -> field_declaration .)
    IDENTIFIER      reduce using rule 58 (struct_member -> field_declaration .)
    AT              reduce using rule 58 (struct_member -> field_declaration .)
    ASYNC           reduce using rule 58 (struct_member -> field_declaration .)
    FN              reduce using rule 58 (struct_member -> field_declaration .)
    RBRACE          reduce using rule 58 (struct_member -> field_declaration .)


state 274

    (59) struct_member -> method_declaration .

    MUT             reduce using rule 59 (struct_member -> method_declaration .)
    IDENTIFIER      reduce using rule 59 (struct_member -> method_declaration .)
    AT              reduce using rule 59 (struct_member -> method_declaration .)
    ASYNC           reduce using rule 59 (struct_member -> method_declaration .)
    FN              reduce using rule 59 (struct_member -> method_declaration .)
    RBRACE          reduce using rule 59 (struct_member -> method_declaration .)


state 275

    (60) field_declaration -> MUT . IDENTIFIER ARROW type SEMICOLON

    IDENTIFIER      shift and go to state 356


state 276

    (62) method_declaration -> decorator_list_opt . async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (22) async_opt -> . ASYNC
    (23) async_opt -> . empty
    (252) empty -> .

    ASYNC           shift and go to state 30
    FN              reduce using rule 252 (empty -> .)

    async_opt                      shift and go to state 357
    empty                          shift and go to state 31

state 277

    (234) type_list -> type_list COMMA . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 358
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 278

    (26) type_parameter_list -> type_parameter_list COMMA type_parameter .

    GT              reduce using rule 26 (type_parameter_list -> type_parameter_list COMMA type_parameter .)
    COMMA           reduce using rule 26 (type_parameter_list -> type_parameter_list COMMA type_parameter .)


state 279

    (29) type_parameter -> IDENTIFIER EXTENDS type .

    GT              reduce using rule 29 (type_parameter -> IDENTIFIER EXTENDS type .)
    COMMA           reduce using rule 29 (type_parameter -> IDENTIFIER EXTENDS type .)


state 280

    (68) enum_variant -> IDENTIFIER LBRACE . enum_variant_fields_opt RBRACE
    (70) enum_variant_fields_opt -> . enum_variant_fields
    (71) enum_variant_fields_opt -> . empty
    (72) enum_variant_fields -> . enum_variant_fields field_declaration
    (73) enum_variant_fields -> . field_declaration
    (252) empty -> .
    (60) field_declaration -> . MUT IDENTIFIER ARROW type SEMICOLON
    (61) field_declaration -> . IDENTIFIER ARROW type SEMICOLON

    RBRACE          reduce using rule 252 (empty -> .)
    MUT             shift and go to state 275
    IDENTIFIER      shift and go to state 268

    enum_variant_fields_opt        shift and go to state 359
    enum_variant_fields            shift and go to state 360
    empty                          shift and go to state 361
    field_declaration              shift and go to state 362

state 281

    (63) enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .

    IMPORT          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    STRUCT          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    ENUM            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    INTERFACE       reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    TYPE            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    CONST           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    LET             reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    TEST            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    AT              reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    ASYNC           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    FN              reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    $end            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    IF              reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    MATCH           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    CASE            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    FOR             reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    WHILE           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    LOOP            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    BREAK           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    CONTINUE        reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    RETURN          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    TRY             reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    THROW           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    ASSERT          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    ROUTINE         reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    NUMBER          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    STRING          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    TRUE            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    FALSE           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    NULL            reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    LPAREN          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    LBRACKET        reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    LBRACE          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    PARALLEL        reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    NOT             reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    MINUS           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    AWAIT           reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)
    RBRACE          reduce using rule 63 (enum_declaration -> ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE .)


state 282

    (64) enum_variant_list_opt -> enum_variant_list maybe_trailing_comma .

    RBRACE          reduce using rule 64 (enum_variant_list_opt -> enum_variant_list maybe_trailing_comma .)


state 283

    (66) enum_variant_list -> enum_variant_list COMMA . enum_variant
    (89) maybe_trailing_comma -> COMMA .
    (68) enum_variant -> . IDENTIFIER LBRACE enum_variant_fields_opt RBRACE
    (69) enum_variant -> . IDENTIFIER

    RBRACE          reduce using rule 89 (maybe_trailing_comma -> COMMA .)
    IDENTIFIER      shift and go to state 167

    enum_variant                   shift and go to state 363

state 284

    (90) maybe_trailing_comma -> empty .

    RBRACE          reduce using rule 90 (maybe_trailing_comma -> empty .)


state 285

    (74) interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .

    IMPORT          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    STRUCT          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    ENUM            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    INTERFACE       reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    TYPE            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    CONST           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    LET             reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    TEST            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    AT              reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    ASYNC           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    FN              reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    $end            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    IF              reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    MATCH           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    CASE            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    FOR             reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    WHILE           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    LOOP            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    BREAK           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    CONTINUE        reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    RETURN          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    TRY             reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    THROW           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    ASSERT          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    ROUTINE         reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    NUMBER          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    STRING          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    TRUE            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    FALSE           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    NULL            reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    LPAREN          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    LBRACKET        reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    LBRACE          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    PARALLEL        reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    NOT             reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    MINUS           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    AWAIT           reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)
    RBRACE          reduce using rule 74 (interface_declaration -> INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE .)


state 286

    (77) interface_member_list -> interface_member_list interface_member .

    FN              reduce using rule 77 (interface_member_list -> interface_member_list interface_member .)
    RBRACE          reduce using rule 77 (interface_member_list -> interface_member_list interface_member .)


state 287

    (79) interface_member -> FN IDENTIFIER . LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON

    LPAREN          shift and go to state 364


state 288

    (50) type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .

    IMPORT          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    STRUCT          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    ENUM            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    INTERFACE       reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    TYPE            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    CONST           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    LET             reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    TEST            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    AT              reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    ASYNC           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    FN              reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    $end            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    IF              reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    MATCH           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    CASE            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    FOR             reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    WHILE           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    LOOP            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    BREAK           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    CONTINUE        reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    RETURN          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    TRY             reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    THROW           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    ASSERT          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    ROUTINE         reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    NUMBER          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    STRING          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    TRUE            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    FALSE           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    NULL            reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    IDENTIFIER      reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    LPAREN          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    LBRACKET        reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    LBRACE          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    PARALLEL        reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    NOT             reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    MINUS           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    AWAIT           reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)
    RBRACE          reduce using rule 50 (type_alias_declaration -> TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON .)


state 289

    (80) constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .

    IMPORT          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    STRUCT          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    ENUM            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    INTERFACE       reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    TYPE            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    CONST           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    LET             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    TEST            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    AT              reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    ASYNC           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    FN              reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    $end            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    IF              reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    MATCH           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    LOOP            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    CONTINUE        reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    TRY             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    THROW           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    ASSERT          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    ROUTINE         reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    NULL            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    LBRACKET        reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    PARALLEL        reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    AWAIT           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON .)


state 290

    (224) union_type -> union_type PIPE intersection_type .
    (226) intersection_type -> intersection_type . AMPERSAND primary_type

    PIPE            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ASSIGN          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    SEMICOLON       reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    COMMA           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LBRACE          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    RBRACKET        reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    RPAREN          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    GT              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LT              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LEQ             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    GEQ             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    EQ              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    NEQ             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    AND             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    RANGE           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    OR              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    RBRACE          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    FATARROW        reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ARROW           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LET             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    CONST           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    STRUCT          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ENUM            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    INTERFACE       reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    TYPE            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    TEST            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    IF              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    MATCH           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    CASE            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    FOR             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    WHILE           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LOOP            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    BREAK           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    CONTINUE        reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    RETURN          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    TRY             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    THROW           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ASSERT          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ROUTINE         reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    AT              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    NUMBER          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    STRING          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    TRUE            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    FALSE           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    NULL            reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    IDENTIFIER      reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LPAREN          reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    LBRACKET        reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    FN              reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    ASYNC           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    PARALLEL        reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    NOT             reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    MINUS           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    AWAIT           reduce using rule 224 (union_type -> union_type PIPE intersection_type .)
    AMPERSAND       shift and go to state 180


state 291

    (226) intersection_type -> intersection_type AMPERSAND primary_type .
    (228) primary_type -> primary_type . LBRACKET RBRACKET
    (230) primary_type -> primary_type . QUESTION

  ! shift/reduce conflict for LBRACKET resolved as shift
    AMPERSAND       reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    PIPE            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ASSIGN          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    SEMICOLON       reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    COMMA           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LBRACE          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    RBRACKET        reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    RPAREN          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    GT              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LT              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LEQ             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    GEQ             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    EQ              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    NEQ             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    AND             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    RANGE           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    OR              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    RBRACE          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    FATARROW        reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ARROW           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LET             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    CONST           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    STRUCT          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ENUM            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    INTERFACE       reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    TYPE            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    TEST            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    IF              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    MATCH           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    CASE            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    FOR             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    WHILE           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LOOP            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    BREAK           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    CONTINUE        reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    RETURN          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    TRY             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    THROW           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ASSERT          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ROUTINE         reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    AT              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    NUMBER          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    STRING          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    TRUE            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    FALSE           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    NULL            reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    IDENTIFIER      reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LPAREN          reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    FN              reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    ASYNC           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    PARALLEL        reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    NOT             reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    MINUS           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    AWAIT           reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .)
    LBRACKET        shift and go to state 181
    QUESTION        shift and go to state 182

  ! LBRACKET        [ reduce using rule 226 (intersection_type -> intersection_type AMPERSAND primary_type .) ]


state 292

    (228) primary_type -> primary_type LBRACKET RBRACKET .

    LBRACKET        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    QUESTION        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    AMPERSAND       reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    PIPE            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    COMMA           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LBRACE          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    RPAREN          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    GT              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LT              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LEQ             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    GEQ             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    EQ              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    NEQ             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    AND             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    RANGE           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    OR              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    RBRACE          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    FATARROW        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ARROW           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LET             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    CONST           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    STRUCT          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ENUM            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    INTERFACE       reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    TYPE            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    TEST            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    IF              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    MATCH           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    CASE            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    FOR             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    WHILE           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LOOP            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    BREAK           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    CONTINUE        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    RETURN          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    TRY             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    THROW           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ASSERT          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ROUTINE         reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    AT              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    NUMBER          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    STRING          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    TRUE            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    FALSE           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    NULL            reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    LPAREN          reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    FN              reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    ASYNC           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    PARALLEL        reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    NOT             reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    MINUS           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)
    AWAIT           reduce using rule 228 (primary_type -> primary_type LBRACKET RBRACKET .)


state 293

    (232) type_arguments_opt -> LT type_list . GT
    (234) type_list -> type_list . COMMA type

    GT              shift and go to state 365
    COMMA           shift and go to state 277


state 294

    (229) primary_type -> LBRACKET type_list RBRACKET .

    LBRACKET        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    QUESTION        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    AMPERSAND       reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    PIPE            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ASSIGN          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    SEMICOLON       reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    COMMA           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LBRACE          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    RBRACKET        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    RPAREN          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    GT              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LT              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LEQ             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    GEQ             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    EQ              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    NEQ             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    AND             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    RANGE           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    OR              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    RBRACE          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    FATARROW        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ARROW           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LET             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    CONST           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    STRUCT          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ENUM            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    INTERFACE       reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    TYPE            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    TEST            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    IF              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    MATCH           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    CASE            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    FOR             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    WHILE           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LOOP            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    BREAK           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    CONTINUE        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    RETURN          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    TRY             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    THROW           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ASSERT          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ROUTINE         reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    AT              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    NUMBER          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    STRING          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    TRUE            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    FALSE           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    NULL            reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    IDENTIFIER      reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    LPAREN          reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    FN              reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    ASYNC           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    PARALLEL        reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    NOT             reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    MINUS           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)
    AWAIT           reduce using rule 229 (primary_type -> LBRACKET type_list RBRACKET .)


state 295

    (231) primary_type -> LPAREN type RPAREN .

    LBRACKET        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    QUESTION        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    AMPERSAND       reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    PIPE            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ASSIGN          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    SEMICOLON       reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    COMMA           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LBRACE          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    RBRACKET        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    RPAREN          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    GT              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LT              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LEQ             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    GEQ             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    EQ              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    NEQ             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    AND             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    RANGE           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    OR              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    RBRACE          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    FATARROW        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ARROW           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LET             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    CONST           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    STRUCT          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ENUM            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    INTERFACE       reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    TYPE            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    TEST            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    IF              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    MATCH           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    CASE            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    FOR             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    WHILE           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LOOP            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    BREAK           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    CONTINUE        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    RETURN          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    TRY             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    THROW           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ASSERT          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ROUTINE         reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    AT              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    NUMBER          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    STRING          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    TRUE            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    FALSE           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    NULL            reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    IDENTIFIER      reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    LPAREN          reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    FN              reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    ASYNC           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    PARALLEL        reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    NOT             reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    MINUS           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)
    AWAIT           reduce using rule 231 (primary_type -> LPAREN type RPAREN .)


state 296

    (81) variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .

    IMPORT          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    STRUCT          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    ENUM            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    INTERFACE       reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    TYPE            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    CONST           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    LET             reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    TEST            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    AT              reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    ASYNC           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    FN              reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    $end            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    IF              reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    MATCH           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    CASE            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    FOR             reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    WHILE           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    LOOP            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    BREAK           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    CONTINUE        reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    RETURN          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    TRY             reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    THROW           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    ASSERT          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    ROUTINE         reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    NUMBER          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    STRING          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    TRUE            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    FALSE           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    NULL            reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    IDENTIFIER      reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    LPAREN          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    LBRACKET        reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    LBRACE          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    PARALLEL        reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    NOT             reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    MINUS           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    AWAIT           reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)
    RBRACE          reduce using rule 81 (variable_declaration -> LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON .)


state 297

    (86) initializer_opt -> ASSIGN expression .

    SEMICOLON       reduce using rule 86 (initializer_opt -> ASSIGN expression .)


state 298

    (212) primary_expression -> LBRACE object_field_list_opt RBRACE .

    LPAREN          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    DOT             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LBRACKET        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ASSIGN          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    PLUS_ASSIGN     reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MINUS_ASSIGN    reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MULTIPLY_ASSIGN reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    DIVIDE_ASSIGN   reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MODULO_ASSIGN   reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MULTIPLY        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    DIVIDE          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MODULO          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    IS              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    PLUS            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MINUS           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LT              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    GT              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LEQ             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    GEQ             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    EQ              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    NEQ             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    AND             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    RANGE           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    OR              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    SEMICOLON       reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    COMMA           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    RPAREN          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LBRACE          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    RBRACKET        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    RBRACE          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    FATARROW        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ARROW           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LET             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    CONST           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    STRUCT          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ENUM            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    INTERFACE       reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    TYPE            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    TEST            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    IF              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    MATCH           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    CASE            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    FOR             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    WHILE           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    LOOP            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    BREAK           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    CONTINUE        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    RETURN          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    TRY             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    THROW           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ASSERT          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ROUTINE         reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    AT              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    NUMBER          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    STRING          reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    TRUE            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    FALSE           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    NULL            reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    FN              reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    ASYNC           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    PARALLEL        reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    NOT             reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)
    AWAIT           reduce using rule 212 (primary_expression -> LBRACE object_field_list_opt RBRACE .)


state 299

    (214) object_field_list_opt -> object_field_list maybe_trailing_comma .

    RBRACE          reduce using rule 214 (object_field_list_opt -> object_field_list maybe_trailing_comma .)


state 300

    (216) object_field_list -> object_field_list COMMA . object_field
    (89) maybe_trailing_comma -> COMMA .
    (218) object_field -> . IDENTIFIER COLON expression

    RBRACE          reduce using rule 89 (maybe_trailing_comma -> COMMA .)
    IDENTIFIER      shift and go to state 195

    object_field                   shift and go to state 366

state 301

    (218) object_field -> IDENTIFIER COLON . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 367
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 302

    (213) primary_expression -> IDENTIFIER LBRACE object_field_list_opt . RBRACE

    RBRACE          shift and go to state 368


state 303

    (219) primary_expression -> FN LPAREN parameter_list_opt . RPAREN return_type_opt block

    RPAREN          shift and go to state 369


state 304

    (39) parameter_list_opt -> parameter_list .
    (41) parameter_list -> parameter_list . COMMA parameter

    RPAREN          reduce using rule 39 (parameter_list_opt -> parameter_list .)
    COMMA           shift and go to state 370


state 305

    (40) parameter_list_opt -> empty .

    RPAREN          reduce using rule 40 (parameter_list_opt -> empty .)


state 306

    (42) parameter_list -> parameter .

    COMMA           reduce using rule 42 (parameter_list -> parameter .)
    RPAREN          reduce using rule 42 (parameter_list -> parameter .)


state 307

    (43) parameter -> IDENTIFIER . parameter_type_opt parameter_default_opt
    (44) parameter_type_opt -> . ARROW type
    (45) parameter_type_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 372
    ASSIGN          reduce using rule 252 (empty -> .)
    COMMA           reduce using rule 252 (empty -> .)
    RPAREN          reduce using rule 252 (empty -> .)

    parameter_type_opt             shift and go to state 371
    empty                          shift and go to state 373

state 308

    (206) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY_ASSIGN reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MODULO_ASSIGN   reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    IS              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    FATARROW        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LET             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    CONST           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    STRUCT          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ENUM            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    INTERFACE       reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    TEST            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MATCH           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    TRY             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    THROW           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ROUTINE         reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    AT              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    FN              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ASYNC           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    PARALLEL        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    AWAIT           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)


state 309

    (119) if_statement -> IF condition block . else_clause_opt
    (122) else_clause_opt -> . ELSE if_statement
    (123) else_clause_opt -> . ELSE block
    (124) else_clause_opt -> . empty
    (252) empty -> .

    ELSE            shift and go to state 375
    LET             reduce using rule 252 (empty -> .)
    CONST           reduce using rule 252 (empty -> .)
    STRUCT          reduce using rule 252 (empty -> .)
    ENUM            reduce using rule 252 (empty -> .)
    INTERFACE       reduce using rule 252 (empty -> .)
    TYPE            reduce using rule 252 (empty -> .)
    TEST            reduce using rule 252 (empty -> .)
    IF              reduce using rule 252 (empty -> .)
    MATCH           reduce using rule 252 (empty -> .)
    CASE            reduce using rule 252 (empty -> .)
    FOR             reduce using rule 252 (empty -> .)
    WHILE           reduce using rule 252 (empty -> .)
    LOOP            reduce using rule 252 (empty -> .)
    BREAK           reduce using rule 252 (empty -> .)
    CONTINUE        reduce using rule 252 (empty -> .)
    RETURN          reduce using rule 252 (empty -> .)
    TRY             reduce using rule 252 (empty -> .)
    THROW           reduce using rule 252 (empty -> .)
    ASSERT          reduce using rule 252 (empty -> .)
    ROUTINE         reduce using rule 252 (empty -> .)
    AT              reduce using rule 252 (empty -> .)
    NUMBER          reduce using rule 252 (empty -> .)
    STRING          reduce using rule 252 (empty -> .)
    TRUE            reduce using rule 252 (empty -> .)
    FALSE           reduce using rule 252 (empty -> .)
    NULL            reduce using rule 252 (empty -> .)
    IDENTIFIER      reduce using rule 252 (empty -> .)
    LPAREN          reduce using rule 252 (empty -> .)
    LBRACKET        reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    PARALLEL        reduce using rule 252 (empty -> .)
    NOT             reduce using rule 252 (empty -> .)
    MINUS           reduce using rule 252 (empty -> .)
    AWAIT           reduce using rule 252 (empty -> .)
    RBRACE          reduce using rule 252 (empty -> .)

    else_clause_opt                shift and go to state 374
    empty                          shift and go to state 376

state 310

    (120) condition -> LPAREN expression . RPAREN
    (206) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 377


state 311

    (125) match_statement -> MATCH expression match_block .
    (137) primary_expression -> MATCH expression match_block .

  ! reduce/reduce conflict for LPAREN resolved using rule 125 (match_statement -> MATCH expression match_block .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 125 (match_statement -> MATCH expression match_block .)
  ! reduce/reduce conflict for MINUS resolved using rule 125 (match_statement -> MATCH expression match_block .)
    LET             reduce using rule 125 (match_statement -> MATCH expression match_block .)
    CONST           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    STRUCT          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    ENUM            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    INTERFACE       reduce using rule 125 (match_statement -> MATCH expression match_block .)
    TYPE            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    TEST            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    IF              reduce using rule 125 (match_statement -> MATCH expression match_block .)
    MATCH           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    CASE            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    FOR             reduce using rule 125 (match_statement -> MATCH expression match_block .)
    WHILE           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    LOOP            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    BREAK           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    CONTINUE        reduce using rule 125 (match_statement -> MATCH expression match_block .)
    RETURN          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    TRY             reduce using rule 125 (match_statement -> MATCH expression match_block .)
    THROW           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    ASSERT          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    ROUTINE         reduce using rule 125 (match_statement -> MATCH expression match_block .)
    AT              reduce using rule 125 (match_statement -> MATCH expression match_block .)
    NUMBER          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    STRING          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    TRUE            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    FALSE           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    NULL            reduce using rule 125 (match_statement -> MATCH expression match_block .)
    IDENTIFIER      reduce using rule 125 (match_statement -> MATCH expression match_block .)
    LPAREN          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    LBRACKET        reduce using rule 125 (match_statement -> MATCH expression match_block .)
    LBRACE          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    FN              reduce using rule 125 (match_statement -> MATCH expression match_block .)
    ASYNC           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    PARALLEL        reduce using rule 125 (match_statement -> MATCH expression match_block .)
    NOT             reduce using rule 125 (match_statement -> MATCH expression match_block .)
    MINUS           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    AWAIT           reduce using rule 125 (match_statement -> MATCH expression match_block .)
    RBRACE          reduce using rule 125 (match_statement -> MATCH expression match_block .)
    DOT             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ASSIGN          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    PLUS_ASSIGN     reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MINUS_ASSIGN    reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MULTIPLY_ASSIGN reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    DIVIDE_ASSIGN   reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MODULO_ASSIGN   reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MULTIPLY        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    DIVIDE          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MODULO          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    IS              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    PLUS            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LT              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    GT              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    GEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    EQ              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    NEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    AND             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RANGE           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    OR              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    SEMICOLON       reduce using rule 137 (primary_expression -> MATCH expression match_block .)

  ! LPAREN          [ reduce using rule 137 (primary_expression -> MATCH expression match_block .) ]
  ! LBRACKET        [ reduce using rule 137 (primary_expression -> MATCH expression match_block .) ]
  ! MINUS           [ reduce using rule 137 (primary_expression -> MATCH expression match_block .) ]


state 312

    (126) match_block -> LBRACE . match_case_list RBRACE
    (127) match_case_list -> . CASE match_case_body match_case_list_tail

    CASE            shift and go to state 379

    match_case_list                shift and go to state 378

state 313

    (132) match_case_statement -> CASE pattern match_guard_opt . match_arrow match_body optional_comma
    (135) match_arrow -> . FATARROW
    (136) match_arrow -> . ARROW

    FATARROW        shift and go to state 381
    ARROW           shift and go to state 382

    match_arrow                    shift and go to state 380

state 314

    (138) match_guard_opt -> IF . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 383
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 315

    (139) match_guard_opt -> empty .

    FATARROW        reduce using rule 139 (match_guard_opt -> empty .)
    ARROW           reduce using rule 139 (match_guard_opt -> empty .)


state 316

    (242) pattern -> MINUS NUMBER .

    IF              reduce using rule 242 (pattern -> MINUS NUMBER .)
    FATARROW        reduce using rule 242 (pattern -> MINUS NUMBER .)
    ARROW           reduce using rule 242 (pattern -> MINUS NUMBER .)
    IN              reduce using rule 242 (pattern -> MINUS NUMBER .)
    COMMA           reduce using rule 242 (pattern -> MINUS NUMBER .)
    RBRACE          reduce using rule 242 (pattern -> MINUS NUMBER .)
    RPAREN          reduce using rule 242 (pattern -> MINUS NUMBER .)


state 317

    (243) pattern -> qualified_name LBRACE . pattern_field_list_opt RBRACE
    (244) pattern_field_list_opt -> . pattern_field_list maybe_trailing_comma
    (245) pattern_field_list_opt -> . empty
    (246) pattern_field_list -> . pattern_field_list COMMA pattern_field
    (247) pattern_field_list -> . pattern_field
    (252) empty -> .
    (248) pattern_field -> . IDENTIFIER COLON pattern
    (249) pattern_field -> . IDENTIFIER

    RBRACE          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 388

    pattern_field_list_opt         shift and go to state 384
    pattern_field_list             shift and go to state 385
    empty                          shift and go to state 386
    pattern_field                  shift and go to state 387

state 318

    (142) for_statement -> FOR pattern IN . expression block
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 389
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 319

    (143) while_statement -> WHILE condition block .

    LET             reduce using rule 143 (while_statement -> WHILE condition block .)
    CONST           reduce using rule 143 (while_statement -> WHILE condition block .)
    STRUCT          reduce using rule 143 (while_statement -> WHILE condition block .)
    ENUM            reduce using rule 143 (while_statement -> WHILE condition block .)
    INTERFACE       reduce using rule 143 (while_statement -> WHILE condition block .)
    TYPE            reduce using rule 143 (while_statement -> WHILE condition block .)
    TEST            reduce using rule 143 (while_statement -> WHILE condition block .)
    IF              reduce using rule 143 (while_statement -> WHILE condition block .)
    MATCH           reduce using rule 143 (while_statement -> WHILE condition block .)
    CASE            reduce using rule 143 (while_statement -> WHILE condition block .)
    FOR             reduce using rule 143 (while_statement -> WHILE condition block .)
    WHILE           reduce using rule 143 (while_statement -> WHILE condition block .)
    LOOP            reduce using rule 143 (while_statement -> WHILE condition block .)
    BREAK           reduce using rule 143 (while_statement -> WHILE condition block .)
    CONTINUE        reduce using rule 143 (while_statement -> WHILE condition block .)
    RETURN          reduce using rule 143 (while_statement -> WHILE condition block .)
    TRY             reduce using rule 143 (while_statement -> WHILE condition block .)
    THROW           reduce using rule 143 (while_statement -> WHILE condition block .)
    ASSERT          reduce using rule 143 (while_statement -> WHILE condition block .)
    ROUTINE         reduce using rule 143 (while_statement -> WHILE condition block .)
    AT              reduce using rule 143 (while_statement -> WHILE condition block .)
    NUMBER          reduce using rule 143 (while_statement -> WHILE condition block .)
    STRING          reduce using rule 143 (while_statement -> WHILE condition block .)
    TRUE            reduce using rule 143 (while_statement -> WHILE condition block .)
    FALSE           reduce using rule 143 (while_statement -> WHILE condition block .)
    NULL            reduce using rule 143 (while_statement -> WHILE condition block .)
    IDENTIFIER      reduce using rule 143 (while_statement -> WHILE condition block .)
    LPAREN          reduce using rule 143 (while_statement -> WHILE condition block .)
    LBRACKET        reduce using rule 143 (while_statement -> WHILE condition block .)
    LBRACE          reduce using rule 143 (while_statement -> WHILE condition block .)
    FN              reduce using rule 143 (while_statement -> WHILE condition block .)
    ASYNC           reduce using rule 143 (while_statement -> WHILE condition block .)
    PARALLEL        reduce using rule 143 (while_statement -> WHILE condition block .)
    NOT             reduce using rule 143 (while_statement -> WHILE condition block .)
    MINUS           reduce using rule 143 (while_statement -> WHILE condition block .)
    AWAIT           reduce using rule 143 (while_statement -> WHILE condition block .)
    RBRACE          reduce using rule 143 (while_statement -> WHILE condition block .)


state 320

    (147) return_statement -> RETURN expression SEMICOLON .

    LET             reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    CONST           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    STRUCT          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    ENUM            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    INTERFACE       reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    TYPE            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    TEST            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    MATCH           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    LOOP            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    TRY             reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    THROW           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    ASSERT          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    ROUTINE         reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    AT              reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    LBRACKET        reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    FN              reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    ASYNC           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    PARALLEL        reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    AWAIT           reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 147 (return_statement -> RETURN expression SEMICOLON .)


state 321

    (149) try_statement -> TRY block catch_clause . finally_clause_opt
    (154) finally_clause_opt -> . FINALLY block
    (155) finally_clause_opt -> . empty
    (252) empty -> .

    FINALLY         shift and go to state 391
    LET             reduce using rule 252 (empty -> .)
    CONST           reduce using rule 252 (empty -> .)
    STRUCT          reduce using rule 252 (empty -> .)
    ENUM            reduce using rule 252 (empty -> .)
    INTERFACE       reduce using rule 252 (empty -> .)
    TYPE            reduce using rule 252 (empty -> .)
    TEST            reduce using rule 252 (empty -> .)
    IF              reduce using rule 252 (empty -> .)
    MATCH           reduce using rule 252 (empty -> .)
    CASE            reduce using rule 252 (empty -> .)
    FOR             reduce using rule 252 (empty -> .)
    WHILE           reduce using rule 252 (empty -> .)
    LOOP            reduce using rule 252 (empty -> .)
    BREAK           reduce using rule 252 (empty -> .)
    CONTINUE        reduce using rule 252 (empty -> .)
    RETURN          reduce using rule 252 (empty -> .)
    TRY             reduce using rule 252 (empty -> .)
    THROW           reduce using rule 252 (empty -> .)
    ASSERT          reduce using rule 252 (empty -> .)
    ROUTINE         reduce using rule 252 (empty -> .)
    AT              reduce using rule 252 (empty -> .)
    NUMBER          reduce using rule 252 (empty -> .)
    STRING          reduce using rule 252 (empty -> .)
    TRUE            reduce using rule 252 (empty -> .)
    FALSE           reduce using rule 252 (empty -> .)
    NULL            reduce using rule 252 (empty -> .)
    IDENTIFIER      reduce using rule 252 (empty -> .)
    LPAREN          reduce using rule 252 (empty -> .)
    LBRACKET        reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    PARALLEL        reduce using rule 252 (empty -> .)
    NOT             reduce using rule 252 (empty -> .)
    MINUS           reduce using rule 252 (empty -> .)
    AWAIT           reduce using rule 252 (empty -> .)
    RBRACE          reduce using rule 252 (empty -> .)

    finally_clause_opt             shift and go to state 390
    empty                          shift and go to state 392

state 322

    (150) catch_clause -> CATCH . LPAREN IDENTIFIER catch_as_opt RPAREN block

    LPAREN          shift and go to state 393


state 323

    (151) catch_clause -> empty .

    FINALLY         reduce using rule 151 (catch_clause -> empty .)
    LET             reduce using rule 151 (catch_clause -> empty .)
    CONST           reduce using rule 151 (catch_clause -> empty .)
    STRUCT          reduce using rule 151 (catch_clause -> empty .)
    ENUM            reduce using rule 151 (catch_clause -> empty .)
    INTERFACE       reduce using rule 151 (catch_clause -> empty .)
    TYPE            reduce using rule 151 (catch_clause -> empty .)
    TEST            reduce using rule 151 (catch_clause -> empty .)
    IF              reduce using rule 151 (catch_clause -> empty .)
    MATCH           reduce using rule 151 (catch_clause -> empty .)
    CASE            reduce using rule 151 (catch_clause -> empty .)
    FOR             reduce using rule 151 (catch_clause -> empty .)
    WHILE           reduce using rule 151 (catch_clause -> empty .)
    LOOP            reduce using rule 151 (catch_clause -> empty .)
    BREAK           reduce using rule 151 (catch_clause -> empty .)
    CONTINUE        reduce using rule 151 (catch_clause -> empty .)
    RETURN          reduce using rule 151 (catch_clause -> empty .)
    TRY             reduce using rule 151 (catch_clause -> empty .)
    THROW           reduce using rule 151 (catch_clause -> empty .)
    ASSERT          reduce using rule 151 (catch_clause -> empty .)
    ROUTINE         reduce using rule 151 (catch_clause -> empty .)
    AT              reduce using rule 151 (catch_clause -> empty .)
    NUMBER          reduce using rule 151 (catch_clause -> empty .)
    STRING          reduce using rule 151 (catch_clause -> empty .)
    TRUE            reduce using rule 151 (catch_clause -> empty .)
    FALSE           reduce using rule 151 (catch_clause -> empty .)
    NULL            reduce using rule 151 (catch_clause -> empty .)
    IDENTIFIER      reduce using rule 151 (catch_clause -> empty .)
    LPAREN          reduce using rule 151 (catch_clause -> empty .)
    LBRACKET        reduce using rule 151 (catch_clause -> empty .)
    LBRACE          reduce using rule 151 (catch_clause -> empty .)
    FN              reduce using rule 151 (catch_clause -> empty .)
    ASYNC           reduce using rule 151 (catch_clause -> empty .)
    PARALLEL        reduce using rule 151 (catch_clause -> empty .)
    NOT             reduce using rule 151 (catch_clause -> empty .)
    MINUS           reduce using rule 151 (catch_clause -> empty .)
    AWAIT           reduce using rule 151 (catch_clause -> empty .)
    RBRACE          reduce using rule 151 (catch_clause -> empty .)


state 324

    (156) throw_statement -> THROW expression SEMICOLON .

    LET             reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    CONST           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    STRUCT          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    ENUM            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    INTERFACE       reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    TYPE            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    TEST            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    IF              reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    MATCH           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    CASE            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    FOR             reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    WHILE           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    LOOP            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    BREAK           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    CONTINUE        reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    RETURN          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    TRY             reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    THROW           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    ASSERT          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    ROUTINE         reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    AT              reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    NUMBER          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    STRING          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    TRUE            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    FALSE           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    NULL            reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    IDENTIFIER      reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    LPAREN          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    LBRACKET        reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    LBRACE          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    FN              reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    ASYNC           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    PARALLEL        reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    NOT             reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    MINUS           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    AWAIT           reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)
    RBRACE          reduce using rule 156 (throw_statement -> THROW expression SEMICOLON .)


state 325

    (157) assert_statement -> ASSERT expression SEMICOLON .

    LET             reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    CONST           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    STRUCT          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    ENUM            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    INTERFACE       reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    TYPE            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    TEST            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    IF              reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    MATCH           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    CASE            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    FOR             reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    WHILE           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    LOOP            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    BREAK           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    CONTINUE        reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    RETURN          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    TRY             reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    THROW           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    ASSERT          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    ROUTINE         reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    AT              reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    NUMBER          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    STRING          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    TRUE            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    FALSE           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    NULL            reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    LPAREN          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    LBRACKET        reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    LBRACE          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    FN              reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    ASYNC           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    PARALLEL        reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    NOT             reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    MINUS           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    AWAIT           reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)
    RBRACE          reduce using rule 157 (assert_statement -> ASSERT expression SEMICOLON .)


state 326

    (158) routine_statement -> ROUTINE routine_name_opt block .

    LET             reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    CONST           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    STRUCT          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    ENUM            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    INTERFACE       reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    TYPE            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    TEST            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    IF              reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    MATCH           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    CASE            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    FOR             reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    WHILE           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    LOOP            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    BREAK           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    CONTINUE        reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    RETURN          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    TRY             reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    THROW           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    ASSERT          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    ROUTINE         reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    AT              reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    NUMBER          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    STRING          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    TRUE            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    FALSE           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    NULL            reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    IDENTIFIER      reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    LPAREN          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    LBRACKET        reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    LBRACE          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    FN              reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    ASYNC           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    PARALLEL        reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    NOT             reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    MINUS           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    AWAIT           reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)
    RBRACE          reduce using rule 158 (routine_statement -> ROUTINE routine_name_opt block .)


state 327

    (163) assignment_expression -> postfix_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    LBRACE          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    FATARROW        reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    ARROW           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    LET             reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    CONST           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    STRUCT          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    ENUM            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    INTERFACE       reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    TYPE            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    TEST            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    IF              reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    MATCH           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    CASE            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    FOR             reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    WHILE           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    LOOP            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    BREAK           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    CONTINUE        reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    RETURN          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    TRY             reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    THROW           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    ASSERT          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    ROUTINE         reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    AT              reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    NUMBER          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    STRING          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    TRUE            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    FALSE           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    NULL            reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    IDENTIFIER      reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    LPAREN          reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    LBRACKET        reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    FN              reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    ASYNC           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    PARALLEL        reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    NOT             reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    MINUS           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)
    AWAIT           reduce using rule 163 (assignment_expression -> postfix_expression assignment_operator assignment_expression .)


state 328

    (196) postfix_expression -> postfix_expression LPAREN argument_list_opt . RPAREN

    RPAREN          shift and go to state 394


state 329

    (197) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LPAREN          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LBRACKET        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY_ASSIGN reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO_ASSIGN   reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IS              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEQ             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GEQ             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NEQ             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RANGE           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RPAREN          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LBRACE          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACKET        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RBRACE          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FATARROW        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LET             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CONST           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STRUCT          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ENUM            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INTERFACE       reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TYPE            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TEST            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IF              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MATCH           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CASE            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FOR             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    WHILE           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOOP            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BREAK           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CONTINUE        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RETURN          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TRY             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    THROW           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSERT          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ROUTINE         reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AT              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NUMBER          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STRING          reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TRUE            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FALSE           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NULL            reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FN              reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASYNC           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PARALLEL        reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT             reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AWAIT           reduce using rule 197 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 330

    (198) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 395


state 331

    (170) range_expression -> logical_or_expression RANGE logical_or_expression .
    (172) logical_or_expression -> logical_or_expression . OR logical_and_expression

    SEMICOLON       reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    COMMA           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    RPAREN          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    LBRACE          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    RBRACKET        reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    RBRACE          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    FATARROW        reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    ARROW           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    LET             reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    CONST           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    STRUCT          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    ENUM            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    INTERFACE       reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    TYPE            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    TEST            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    IF              reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    MATCH           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    CASE            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    FOR             reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    WHILE           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    LOOP            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    BREAK           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    CONTINUE        reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    RETURN          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    TRY             reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    THROW           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    ASSERT          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    ROUTINE         reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    AT              reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    NUMBER          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    STRING          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    TRUE            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    FALSE           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    NULL            reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    IDENTIFIER      reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    LPAREN          reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    LBRACKET        reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    FN              reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    ASYNC           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    PARALLEL        reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    NOT             reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    MINUS           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    AWAIT           reduce using rule 170 (range_expression -> logical_or_expression RANGE logical_or_expression .)
    OR              shift and go to state 239


state 332

    (172) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (174) logical_and_expression -> logical_and_expression . AND equality_expression

    RANGE           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMICOLON       reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FATARROW        reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ARROW           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LET             reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONST           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRUCT          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ENUM            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTERFACE       reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TYPE            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TEST            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MATCH           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FOR             reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONTINUE        reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRY             reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    THROW           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASSERT          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ROUTINE         reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AT              reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NUMBER          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NULL            reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IDENTIFIER      reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FN              reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASYNC           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PARALLEL        reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NOT             reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AWAIT           reduce using rule 172 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 244


state 333

    (207) primary_expression -> LBRACKET expression_list_opt RBRACKET .

    LPAREN          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    DOT             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LBRACKET        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ASSIGN          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    PLUS_ASSIGN     reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MINUS_ASSIGN    reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MULTIPLY_ASSIGN reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MODULO_ASSIGN   reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MULTIPLY        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    DIVIDE          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MODULO          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    IS              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    PLUS            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MINUS           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LT              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    GT              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LEQ             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    GEQ             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    EQ              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    NEQ             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    AND             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    RANGE           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    OR              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    SEMICOLON       reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    COMMA           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    RPAREN          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LBRACE          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    RBRACKET        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    RBRACE          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    FATARROW        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ARROW           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LET             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    CONST           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    STRUCT          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ENUM            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    INTERFACE       reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    TYPE            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    TEST            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    IF              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    MATCH           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    CASE            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    FOR             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    WHILE           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    LOOP            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    BREAK           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    CONTINUE        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    RETURN          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    TRY             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    THROW           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ASSERT          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ROUTINE         reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    AT              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    NUMBER          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    STRING          reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    TRUE            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    FALSE           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    NULL            reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    IDENTIFIER      reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    FN              reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    ASYNC           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    PARALLEL        reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    NOT             reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)
    AWAIT           reduce using rule 207 (primary_expression -> LBRACKET expression_list_opt RBRACKET .)


state 334

    (210) expression_list -> expression_list COMMA . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 396
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 335

    (174) logical_and_expression -> logical_and_expression AND equality_expression .
    (176) equality_expression -> equality_expression . EQ relational_expression
    (177) equality_expression -> equality_expression . NEQ relational_expression

    AND             reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RANGE           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FATARROW        reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ARROW           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LET             reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONST           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRUCT          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ENUM            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTERFACE       reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TYPE            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TEST            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MATCH           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FOR             reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONTINUE        reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRY             reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    THROW           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASSERT          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ROUTINE         reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    AT              reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NUMBER          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NULL            reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IDENTIFIER      reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FN              reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASYNC           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PARALLEL        reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NOT             reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    AWAIT           reduce using rule 174 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQ              shift and go to state 247
    NEQ             shift and go to state 248


state 336

    (221) primary_expression -> PARALLEL LBRACKET argument_list_opt . RBRACKET

    RBRACKET        shift and go to state 397


state 337

    (176) equality_expression -> equality_expression EQ relational_expression .
    (179) relational_expression -> relational_expression . LT additive_expression
    (180) relational_expression -> relational_expression . GT additive_expression
    (181) relational_expression -> relational_expression . LEQ additive_expression
    (182) relational_expression -> relational_expression . GEQ additive_expression

    EQ              reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    RANGE           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LBRACE          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACKET        reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    FATARROW        reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    ARROW           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LET             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    CONST           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    STRUCT          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    ENUM            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    INTERFACE       reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    TYPE            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    TEST            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    IF              reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    MATCH           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    CASE            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    FOR             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    WHILE           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LOOP            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    BREAK           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    CONTINUE        reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    RETURN          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    TRY             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    THROW           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    ASSERT          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    ROUTINE         reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    AT              reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    NUMBER          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    STRING          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    TRUE            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    FALSE           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    NULL            reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    IDENTIFIER      reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LPAREN          reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LBRACKET        reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    FN              reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    ASYNC           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    PARALLEL        reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    NOT             reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    MINUS           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    AWAIT           reduce using rule 176 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 249
    GT              shift and go to state 250
    LEQ             shift and go to state 251
    GEQ             shift and go to state 252


state 338

    (177) equality_expression -> equality_expression NEQ relational_expression .
    (179) relational_expression -> relational_expression . LT additive_expression
    (180) relational_expression -> relational_expression . GT additive_expression
    (181) relational_expression -> relational_expression . LEQ additive_expression
    (182) relational_expression -> relational_expression . GEQ additive_expression

    EQ              reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    AND             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    RANGE           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    OR              reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    SEMICOLON       reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    COMMA           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    RPAREN          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LBRACE          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACKET        reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    RBRACE          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    FATARROW        reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    ARROW           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LET             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    CONST           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    STRUCT          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    ENUM            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    INTERFACE       reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    TYPE            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    TEST            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    IF              reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    MATCH           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    CASE            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    FOR             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    WHILE           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LOOP            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    BREAK           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    CONTINUE        reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    RETURN          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    TRY             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    THROW           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    ASSERT          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    ROUTINE         reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    AT              reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    NUMBER          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    STRING          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    TRUE            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    FALSE           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    NULL            reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    IDENTIFIER      reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LPAREN          reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LBRACKET        reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    FN              reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    ASYNC           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    PARALLEL        reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    NOT             reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    MINUS           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    AWAIT           reduce using rule 177 (equality_expression -> equality_expression NEQ relational_expression .)
    LT              shift and go to state 249
    GT              shift and go to state 250
    LEQ             shift and go to state 251
    GEQ             shift and go to state 252


state 339

    (179) relational_expression -> relational_expression LT additive_expression .
    (185) additive_expression -> additive_expression . PLUS multiplicative_expression
    (186) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LEQ             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    GEQ             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    NEQ             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    AND             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    RANGE           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    OR              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    SEMICOLON       reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LBRACE          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    RBRACKET        reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    RBRACE          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    FATARROW        reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    ARROW           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LET             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    CONST           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    STRUCT          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    ENUM            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    INTERFACE       reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    TYPE            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    TEST            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    IF              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    MATCH           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    CASE            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    FOR             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    WHILE           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LOOP            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    BREAK           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    CONTINUE        reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    RETURN          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    TRY             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    THROW           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    ASSERT          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    ROUTINE         reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    AT              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    NUMBER          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    STRING          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    TRUE            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    FALSE           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    NULL            reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    IDENTIFIER      reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LPAREN          reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    LBRACKET        reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    FN              reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    ASYNC           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    PARALLEL        reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    NOT             reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    AWAIT           reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 254
    MINUS           shift and go to state 255

  ! MINUS           [ reduce using rule 179 (relational_expression -> relational_expression LT additive_expression .) ]


state 340

    (180) relational_expression -> relational_expression GT additive_expression .
    (185) additive_expression -> additive_expression . PLUS multiplicative_expression
    (186) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LEQ             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    GEQ             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    NEQ             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    AND             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    RANGE           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    OR              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    SEMICOLON       reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LBRACE          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    RBRACKET        reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    RBRACE          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    FATARROW        reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    ARROW           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LET             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    CONST           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    STRUCT          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    ENUM            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    INTERFACE       reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    TYPE            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    TEST            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    IF              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    MATCH           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    CASE            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    FOR             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    WHILE           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LOOP            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    BREAK           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    CONTINUE        reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    RETURN          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    TRY             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    THROW           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    ASSERT          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    ROUTINE         reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    AT              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    NUMBER          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    STRING          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    TRUE            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    FALSE           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    NULL            reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    IDENTIFIER      reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LPAREN          reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    LBRACKET        reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    FN              reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    ASYNC           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    PARALLEL        reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    NOT             reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    AWAIT           reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 254
    MINUS           shift and go to state 255

  ! MINUS           [ reduce using rule 180 (relational_expression -> relational_expression GT additive_expression .) ]


state 341

    (181) relational_expression -> relational_expression LEQ additive_expression .
    (185) additive_expression -> additive_expression . PLUS multiplicative_expression
    (186) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    GT              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LEQ             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    GEQ             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    EQ              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    NEQ             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    AND             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    RANGE           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    OR              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    SEMICOLON       reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    COMMA           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    RPAREN          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LBRACE          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    RBRACKET        reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    RBRACE          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    FATARROW        reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    ARROW           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LET             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    CONST           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    STRUCT          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    ENUM            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    INTERFACE       reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    TYPE            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    TEST            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    IF              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    MATCH           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    CASE            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    FOR             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    WHILE           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LOOP            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    BREAK           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    CONTINUE        reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    RETURN          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    TRY             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    THROW           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    ASSERT          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    ROUTINE         reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    AT              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    NUMBER          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    STRING          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    TRUE            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    FALSE           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    NULL            reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    IDENTIFIER      reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LPAREN          reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    LBRACKET        reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    FN              reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    ASYNC           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    PARALLEL        reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    NOT             reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    AWAIT           reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .)
    PLUS            shift and go to state 254
    MINUS           shift and go to state 255

  ! MINUS           [ reduce using rule 181 (relational_expression -> relational_expression LEQ additive_expression .) ]


state 342

    (182) relational_expression -> relational_expression GEQ additive_expression .
    (185) additive_expression -> additive_expression . PLUS multiplicative_expression
    (186) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    GT              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LEQ             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    GEQ             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    EQ              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    NEQ             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    AND             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    RANGE           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    OR              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    SEMICOLON       reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    COMMA           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    RPAREN          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LBRACE          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    RBRACKET        reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    RBRACE          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    FATARROW        reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    ARROW           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LET             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    CONST           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    STRUCT          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    ENUM            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    INTERFACE       reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    TYPE            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    TEST            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    IF              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    MATCH           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    CASE            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    FOR             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    WHILE           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LOOP            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    BREAK           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    CONTINUE        reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    RETURN          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    TRY             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    THROW           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    ASSERT          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    ROUTINE         reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    AT              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    NUMBER          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    STRING          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    TRUE            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    FALSE           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    NULL            reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    IDENTIFIER      reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LPAREN          reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    LBRACKET        reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    FN              reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    ASYNC           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    PARALLEL        reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    NOT             reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    AWAIT           reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .)
    PLUS            shift and go to state 254
    MINUS           shift and go to state 255

  ! MINUS           [ reduce using rule 182 (relational_expression -> relational_expression GEQ additive_expression .) ]


state 343

    (183) relational_expression -> additive_expression IS type .

    LT              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    GT              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LEQ             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    GEQ             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    EQ              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    NEQ             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    AND             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    RANGE           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    OR              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    SEMICOLON       reduce using rule 183 (relational_expression -> additive_expression IS type .)
    COMMA           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    RPAREN          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LBRACE          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    RBRACKET        reduce using rule 183 (relational_expression -> additive_expression IS type .)
    RBRACE          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    FATARROW        reduce using rule 183 (relational_expression -> additive_expression IS type .)
    ARROW           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LET             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    CONST           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    STRUCT          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    ENUM            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    INTERFACE       reduce using rule 183 (relational_expression -> additive_expression IS type .)
    TYPE            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    TEST            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    IF              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    MATCH           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    CASE            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    FOR             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    WHILE           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LOOP            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    BREAK           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    CONTINUE        reduce using rule 183 (relational_expression -> additive_expression IS type .)
    RETURN          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    TRY             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    THROW           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    ASSERT          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    ROUTINE         reduce using rule 183 (relational_expression -> additive_expression IS type .)
    AT              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    NUMBER          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    STRING          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    TRUE            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    FALSE           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    NULL            reduce using rule 183 (relational_expression -> additive_expression IS type .)
    IDENTIFIER      reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LPAREN          reduce using rule 183 (relational_expression -> additive_expression IS type .)
    LBRACKET        reduce using rule 183 (relational_expression -> additive_expression IS type .)
    FN              reduce using rule 183 (relational_expression -> additive_expression IS type .)
    ASYNC           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    PARALLEL        reduce using rule 183 (relational_expression -> additive_expression IS type .)
    NOT             reduce using rule 183 (relational_expression -> additive_expression IS type .)
    MINUS           reduce using rule 183 (relational_expression -> additive_expression IS type .)
    AWAIT           reduce using rule 183 (relational_expression -> additive_expression IS type .)


state 344

    (185) additive_expression -> additive_expression PLUS multiplicative_expression .
    (188) multiplicative_expression -> multiplicative_expression . MULTIPLY unary_expression
    (189) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (190) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    IS              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PLUS            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEQ             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GEQ             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEQ             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RANGE           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACE          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FATARROW        reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ARROW           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LET             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONST           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRUCT          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ENUM            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTERFACE       reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TYPE            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TEST            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MATCH           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FOR             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONTINUE        reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRY             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    THROW           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASSERT          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ROUTINE         reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AT              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NUMBER          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NULL            reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IDENTIFIER      reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FN              reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASYNC           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PARALLEL        reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT             reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AWAIT           reduce using rule 185 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTIPLY        shift and go to state 256
    DIVIDE          shift and go to state 257
    MODULO          shift and go to state 258


state 345

    (186) additive_expression -> additive_expression MINUS multiplicative_expression .
    (188) multiplicative_expression -> multiplicative_expression . MULTIPLY unary_expression
    (189) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (190) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

    IS              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PLUS            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEQ             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GEQ             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEQ             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RANGE           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACE          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FATARROW        reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ARROW           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LET             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONST           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRUCT          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ENUM            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTERFACE       reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TYPE            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TEST            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MATCH           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FOR             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONTINUE        reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRY             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    THROW           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASSERT          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ROUTINE         reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AT              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NUMBER          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NULL            reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IDENTIFIER      reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FN              reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASYNC           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PARALLEL        reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT             reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AWAIT           reduce using rule 186 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTIPLY        shift and go to state 256
    DIVIDE          shift and go to state 257
    MODULO          shift and go to state 258


state 346

    (188) multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .

    MULTIPLY        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    DIVIDE          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    MODULO          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    IS              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    PLUS            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    MINUS           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LT              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    GT              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LEQ             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    GEQ             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    EQ              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    NEQ             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    AND             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    RANGE           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    OR              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    SEMICOLON       reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    COMMA           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    RPAREN          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LBRACE          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    RBRACKET        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    RBRACE          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    FATARROW        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    ARROW           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LET             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    CONST           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    STRUCT          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    ENUM            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    INTERFACE       reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    TYPE            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    TEST            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    IF              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    MATCH           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    CASE            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    FOR             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    WHILE           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LOOP            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    BREAK           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    CONTINUE        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    RETURN          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    TRY             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    THROW           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    ASSERT          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    ROUTINE         reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    AT              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    NUMBER          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    STRING          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    TRUE            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    FALSE           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    NULL            reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    IDENTIFIER      reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LPAREN          reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    LBRACKET        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    FN              reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    ASYNC           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    PARALLEL        reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    NOT             reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)
    AWAIT           reduce using rule 188 (multiplicative_expression -> multiplicative_expression MULTIPLY unary_expression .)


state 347

    (189) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    MULTIPLY        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MODULO          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IS              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LEQ             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GEQ             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NEQ             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AND             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RANGE           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LBRACE          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RBRACE          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FATARROW        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ARROW           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LET             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CONST           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STRUCT          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ENUM            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    INTERFACE       reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TYPE            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TEST            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IF              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MATCH           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CASE            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FOR             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    WHILE           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LOOP            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    BREAK           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CONTINUE        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RETURN          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TRY             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    THROW           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ASSERT          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ROUTINE         reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AT              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NUMBER          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STRING          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TRUE            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FALSE           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NULL            reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IDENTIFIER      reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LPAREN          reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LBRACKET        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FN              reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    ASYNC           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PARALLEL        reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NOT             reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AWAIT           reduce using rule 189 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 348

    (190) multiplicative_expression -> multiplicative_expression MODULO unary_expression .

    MULTIPLY        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MODULO          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IS              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PLUS            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MINUS           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LT              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GT              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LEQ             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GEQ             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    EQ              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NEQ             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    AND             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RANGE           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    OR              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    SEMICOLON       reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COMMA           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RPAREN          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LBRACE          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RBRACKET        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RBRACE          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FATARROW        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    ARROW           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LET             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CONST           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    STRUCT          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    ENUM            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    INTERFACE       reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TYPE            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TEST            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IF              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MATCH           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CASE            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FOR             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    WHILE           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LOOP            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    BREAK           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CONTINUE        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RETURN          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TRY             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    THROW           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    ASSERT          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    ROUTINE         reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    AT              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NUMBER          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    STRING          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TRUE            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FALSE           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NULL            reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IDENTIFIER      reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LPAREN          reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LBRACKET        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FN              reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    ASYNC           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PARALLEL        reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NOT             reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    AWAIT           reduce using rule 190 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)


state 349

    (20) argument_list -> argument_list COMMA expression .

    COMMA           reduce using rule 20 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 20 (argument_list -> argument_list COMMA expression .)
    RBRACKET        reduce using rule 20 (argument_list -> argument_list COMMA expression .)


state 350

    (137) primary_expression -> MATCH expression match_block .

    LPAREN          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    DOT             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LBRACKET        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ASSIGN          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    PLUS_ASSIGN     reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MINUS_ASSIGN    reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MULTIPLY_ASSIGN reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    DIVIDE_ASSIGN   reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MODULO_ASSIGN   reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MULTIPLY        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    DIVIDE          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MODULO          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    IS              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    PLUS            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MINUS           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LT              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    GT              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    GEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    EQ              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    NEQ             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    AND             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RANGE           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    OR              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    COMMA           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RPAREN          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    SEMICOLON       reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LBRACE          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RBRACKET        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RBRACE          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    FATARROW        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ARROW           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LET             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    CONST           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    STRUCT          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ENUM            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    INTERFACE       reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    TYPE            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    TEST            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    IF              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    MATCH           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    CASE            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    FOR             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    WHILE           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    LOOP            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    BREAK           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    CONTINUE        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    RETURN          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    TRY             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    THROW           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ASSERT          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ROUTINE         reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    AT              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    NUMBER          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    STRING          reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    TRUE            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    FALSE           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    NULL            reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    IDENTIFIER      reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    FN              reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    ASYNC           reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    PARALLEL        reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    NOT             reduce using rule 137 (primary_expression -> MATCH expression match_block .)
    AWAIT           reduce using rule 137 (primary_expression -> MATCH expression match_block .)


state 351

    (6) import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .

    IMPORT          reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    STRUCT          reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    ENUM            reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    INTERFACE       reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    TYPE            reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    CONST           reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    LET             reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    TEST            reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    AT              reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    ASYNC           reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    FN              reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)
    $end            reduce using rule 6 (import_statement -> IMPORT LBRACE import_list_opt RBRACE FROM STRING SEMICOLON .)


state 352

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt . RPAREN return_type_opt block

    RPAREN          shift and go to state 398


state 353

    (61) field_declaration -> IDENTIFIER ARROW . type SEMICOLON
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 399
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 354

    (51) struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .

    IMPORT          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    STRUCT          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    ENUM            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    INTERFACE       reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    TYPE            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    CONST           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    LET             reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    TEST            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    AT              reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    ASYNC           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    FN              reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    $end            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    IF              reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    MATCH           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    CASE            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    FOR             reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    WHILE           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    LOOP            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    BREAK           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    CONTINUE        reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    RETURN          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    TRY             reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    THROW           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    ASSERT          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    ROUTINE         reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    NUMBER          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    STRING          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    TRUE            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    FALSE           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    NULL            reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    LPAREN          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    LBRACKET        reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    LBRACE          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    PARALLEL        reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    NOT             reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    MINUS           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    AWAIT           reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)
    RBRACE          reduce using rule 51 (struct_declaration -> STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE .)


state 355

    (56) struct_member_list -> struct_member_list struct_member .

    MUT             reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)
    IDENTIFIER      reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)
    AT              reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)
    ASYNC           reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)
    FN              reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)
    RBRACE          reduce using rule 56 (struct_member_list -> struct_member_list struct_member .)


state 356

    (60) field_declaration -> MUT IDENTIFIER . ARROW type SEMICOLON

    ARROW           shift and go to state 400


state 357

    (62) method_declaration -> decorator_list_opt async_opt . FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block

    FN              shift and go to state 401


state 358

    (234) type_list -> type_list COMMA type .

    COMMA           reduce using rule 234 (type_list -> type_list COMMA type .)
    LBRACE          reduce using rule 234 (type_list -> type_list COMMA type .)
    RBRACKET        reduce using rule 234 (type_list -> type_list COMMA type .)
    GT              reduce using rule 234 (type_list -> type_list COMMA type .)


state 359

    (68) enum_variant -> IDENTIFIER LBRACE enum_variant_fields_opt . RBRACE

    RBRACE          shift and go to state 402


state 360

    (70) enum_variant_fields_opt -> enum_variant_fields .
    (72) enum_variant_fields -> enum_variant_fields . field_declaration
    (60) field_declaration -> . MUT IDENTIFIER ARROW type SEMICOLON
    (61) field_declaration -> . IDENTIFIER ARROW type SEMICOLON

    RBRACE          reduce using rule 70 (enum_variant_fields_opt -> enum_variant_fields .)
    MUT             shift and go to state 275
    IDENTIFIER      shift and go to state 268

    field_declaration              shift and go to state 403

state 361

    (71) enum_variant_fields_opt -> empty .

    RBRACE          reduce using rule 71 (enum_variant_fields_opt -> empty .)


state 362

    (73) enum_variant_fields -> field_declaration .

    MUT             reduce using rule 73 (enum_variant_fields -> field_declaration .)
    IDENTIFIER      reduce using rule 73 (enum_variant_fields -> field_declaration .)
    RBRACE          reduce using rule 73 (enum_variant_fields -> field_declaration .)


state 363

    (66) enum_variant_list -> enum_variant_list COMMA enum_variant .

    COMMA           reduce using rule 66 (enum_variant_list -> enum_variant_list COMMA enum_variant .)
    RBRACE          reduce using rule 66 (enum_variant_list -> enum_variant_list COMMA enum_variant .)


state 364

    (79) interface_member -> FN IDENTIFIER LPAREN . parameter_list_opt RPAREN ARROW type SEMICOLON
    (39) parameter_list_opt -> . parameter_list
    (40) parameter_list_opt -> . empty
    (41) parameter_list -> . parameter_list COMMA parameter
    (42) parameter_list -> . parameter
    (252) empty -> .
    (43) parameter -> . IDENTIFIER parameter_type_opt parameter_default_opt

    RPAREN          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 307

    parameter_list_opt             shift and go to state 404
    parameter_list                 shift and go to state 304
    empty                          shift and go to state 305
    parameter                      shift and go to state 306

state 365

    (232) type_arguments_opt -> LT type_list GT .

    LBRACKET        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    QUESTION        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    AMPERSAND       reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    PIPE            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ASSIGN          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    SEMICOLON       reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    COMMA           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LBRACE          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    RBRACKET        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    RPAREN          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    GT              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LT              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LEQ             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    GEQ             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    EQ              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    NEQ             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    AND             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    RANGE           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    OR              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    RBRACE          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    FATARROW        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ARROW           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LET             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    CONST           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    STRUCT          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ENUM            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    INTERFACE       reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    TYPE            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    TEST            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    IF              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    MATCH           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    CASE            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    FOR             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    WHILE           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LOOP            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    BREAK           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    CONTINUE        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    RETURN          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    TRY             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    THROW           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ASSERT          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ROUTINE         reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    AT              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    NUMBER          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    STRING          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    TRUE            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    FALSE           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    NULL            reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    IDENTIFIER      reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    LPAREN          reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    FN              reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    ASYNC           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    PARALLEL        reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    NOT             reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    MINUS           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)
    AWAIT           reduce using rule 232 (type_arguments_opt -> LT type_list GT .)


state 366

    (216) object_field_list -> object_field_list COMMA object_field .

    COMMA           reduce using rule 216 (object_field_list -> object_field_list COMMA object_field .)
    RBRACE          reduce using rule 216 (object_field_list -> object_field_list COMMA object_field .)


state 367

    (218) object_field -> IDENTIFIER COLON expression .

    COMMA           reduce using rule 218 (object_field -> IDENTIFIER COLON expression .)
    RBRACE          reduce using rule 218 (object_field -> IDENTIFIER COLON expression .)


state 368

    (213) primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .

    LPAREN          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    DOT             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LBRACKET        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ASSIGN          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    PLUS_ASSIGN     reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MINUS_ASSIGN    reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MULTIPLY_ASSIGN reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    DIVIDE_ASSIGN   reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MODULO_ASSIGN   reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MULTIPLY        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    DIVIDE          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MODULO          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    IS              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    PLUS            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MINUS           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LT              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    GT              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LEQ             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    GEQ             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    EQ              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    NEQ             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    AND             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    RANGE           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    OR              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    SEMICOLON       reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    COMMA           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    RPAREN          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LBRACE          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    RBRACKET        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    RBRACE          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    FATARROW        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ARROW           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LET             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    CONST           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    STRUCT          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ENUM            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    INTERFACE       reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    TYPE            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    TEST            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    IF              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    MATCH           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    CASE            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    FOR             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    WHILE           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    LOOP            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    BREAK           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    CONTINUE        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    RETURN          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    TRY             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    THROW           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ASSERT          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ROUTINE         reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    AT              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    NUMBER          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    STRING          reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    TRUE            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    FALSE           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    NULL            reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    IDENTIFIER      reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    FN              reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    ASYNC           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    PARALLEL        reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    NOT             reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)
    AWAIT           reduce using rule 213 (primary_expression -> IDENTIFIER LBRACE object_field_list_opt RBRACE .)


state 369

    (219) primary_expression -> FN LPAREN parameter_list_opt RPAREN . return_type_opt block
    (48) return_type_opt -> . ARROW type
    (49) return_type_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 406
    LBRACE          reduce using rule 252 (empty -> .)

    return_type_opt                shift and go to state 405
    empty                          shift and go to state 407

state 370

    (41) parameter_list -> parameter_list COMMA . parameter
    (43) parameter -> . IDENTIFIER parameter_type_opt parameter_default_opt

    IDENTIFIER      shift and go to state 307

    parameter                      shift and go to state 408

state 371

    (43) parameter -> IDENTIFIER parameter_type_opt . parameter_default_opt
    (46) parameter_default_opt -> . ASSIGN expression
    (47) parameter_default_opt -> . empty
    (252) empty -> .

    ASSIGN          shift and go to state 410
    COMMA           reduce using rule 252 (empty -> .)
    RPAREN          reduce using rule 252 (empty -> .)

    parameter_default_opt          shift and go to state 409
    empty                          shift and go to state 411

state 372

    (44) parameter_type_opt -> ARROW . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 412
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 373

    (45) parameter_type_opt -> empty .

    ASSIGN          reduce using rule 45 (parameter_type_opt -> empty .)
    COMMA           reduce using rule 45 (parameter_type_opt -> empty .)
    RPAREN          reduce using rule 45 (parameter_type_opt -> empty .)


state 374

    (119) if_statement -> IF condition block else_clause_opt .

    LET             reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    CONST           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    STRUCT          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    ENUM            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    INTERFACE       reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    TYPE            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    TEST            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    IF              reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    MATCH           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    CASE            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    FOR             reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    WHILE           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    LOOP            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    BREAK           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    CONTINUE        reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    RETURN          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    TRY             reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    THROW           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    ASSERT          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    ROUTINE         reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    AT              reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    NUMBER          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    STRING          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    TRUE            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    FALSE           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    NULL            reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    IDENTIFIER      reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    LPAREN          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    LBRACKET        reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    LBRACE          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    FN              reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    ASYNC           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    PARALLEL        reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    NOT             reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    MINUS           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    AWAIT           reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)
    RBRACE          reduce using rule 119 (if_statement -> IF condition block else_clause_opt .)


state 375

    (122) else_clause_opt -> ELSE . if_statement
    (123) else_clause_opt -> ELSE . block
    (119) if_statement -> . IF condition block else_clause_opt
    (91) block -> . LBRACE statement_list_opt RBRACE

    IF              shift and go to state 118
    LBRACE          shift and go to state 60

    if_statement                   shift and go to state 413
    block                          shift and go to state 414

state 376

    (124) else_clause_opt -> empty .

    LET             reduce using rule 124 (else_clause_opt -> empty .)
    CONST           reduce using rule 124 (else_clause_opt -> empty .)
    STRUCT          reduce using rule 124 (else_clause_opt -> empty .)
    ENUM            reduce using rule 124 (else_clause_opt -> empty .)
    INTERFACE       reduce using rule 124 (else_clause_opt -> empty .)
    TYPE            reduce using rule 124 (else_clause_opt -> empty .)
    TEST            reduce using rule 124 (else_clause_opt -> empty .)
    IF              reduce using rule 124 (else_clause_opt -> empty .)
    MATCH           reduce using rule 124 (else_clause_opt -> empty .)
    CASE            reduce using rule 124 (else_clause_opt -> empty .)
    FOR             reduce using rule 124 (else_clause_opt -> empty .)
    WHILE           reduce using rule 124 (else_clause_opt -> empty .)
    LOOP            reduce using rule 124 (else_clause_opt -> empty .)
    BREAK           reduce using rule 124 (else_clause_opt -> empty .)
    CONTINUE        reduce using rule 124 (else_clause_opt -> empty .)
    RETURN          reduce using rule 124 (else_clause_opt -> empty .)
    TRY             reduce using rule 124 (else_clause_opt -> empty .)
    THROW           reduce using rule 124 (else_clause_opt -> empty .)
    ASSERT          reduce using rule 124 (else_clause_opt -> empty .)
    ROUTINE         reduce using rule 124 (else_clause_opt -> empty .)
    AT              reduce using rule 124 (else_clause_opt -> empty .)
    NUMBER          reduce using rule 124 (else_clause_opt -> empty .)
    STRING          reduce using rule 124 (else_clause_opt -> empty .)
    TRUE            reduce using rule 124 (else_clause_opt -> empty .)
    FALSE           reduce using rule 124 (else_clause_opt -> empty .)
    NULL            reduce using rule 124 (else_clause_opt -> empty .)
    IDENTIFIER      reduce using rule 124 (else_clause_opt -> empty .)
    LPAREN          reduce using rule 124 (else_clause_opt -> empty .)
    LBRACKET        reduce using rule 124 (else_clause_opt -> empty .)
    LBRACE          reduce using rule 124 (else_clause_opt -> empty .)
    FN              reduce using rule 124 (else_clause_opt -> empty .)
    ASYNC           reduce using rule 124 (else_clause_opt -> empty .)
    PARALLEL        reduce using rule 124 (else_clause_opt -> empty .)
    NOT             reduce using rule 124 (else_clause_opt -> empty .)
    MINUS           reduce using rule 124 (else_clause_opt -> empty .)
    AWAIT           reduce using rule 124 (else_clause_opt -> empty .)
    RBRACE          reduce using rule 124 (else_clause_opt -> empty .)


state 377

    (120) condition -> LPAREN expression RPAREN .
    (206) primary_expression -> LPAREN expression RPAREN .

  ! reduce/reduce conflict for LBRACE resolved using rule 120 (condition -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 120 (condition -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY_ASSIGN reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MODULO_ASSIGN   reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    IS              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    RANGE           reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .)

  ! LBRACE          [ reduce using rule 206 (primary_expression -> LPAREN expression RPAREN .) ]


state 378

    (126) match_block -> LBRACE match_case_list . RBRACE

    RBRACE          shift and go to state 415


state 379

    (127) match_case_list -> CASE . match_case_body match_case_list_tail
    (131) match_case_body -> . pattern match_guard_opt match_arrow match_body
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    match_case_body                shift and go to state 416
    pattern                        shift and go to state 417
    qualified_name                 shift and go to state 214

state 380

    (132) match_case_statement -> CASE pattern match_guard_opt match_arrow . match_body optional_comma
    (140) match_body -> . block
    (141) match_body -> . expression
    (91) block -> . LBRACE statement_list_opt RBRACE
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    LBRACE          shift and go to state 421
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    match_body                     shift and go to state 418
    block                          shift and go to state 419
    expression                     shift and go to state 420
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 381

    (135) match_arrow -> FATARROW .

    LBRACE          reduce using rule 135 (match_arrow -> FATARROW .)
    MATCH           reduce using rule 135 (match_arrow -> FATARROW .)
    NUMBER          reduce using rule 135 (match_arrow -> FATARROW .)
    STRING          reduce using rule 135 (match_arrow -> FATARROW .)
    TRUE            reduce using rule 135 (match_arrow -> FATARROW .)
    FALSE           reduce using rule 135 (match_arrow -> FATARROW .)
    NULL            reduce using rule 135 (match_arrow -> FATARROW .)
    IDENTIFIER      reduce using rule 135 (match_arrow -> FATARROW .)
    LPAREN          reduce using rule 135 (match_arrow -> FATARROW .)
    LBRACKET        reduce using rule 135 (match_arrow -> FATARROW .)
    FN              reduce using rule 135 (match_arrow -> FATARROW .)
    ASYNC           reduce using rule 135 (match_arrow -> FATARROW .)
    PARALLEL        reduce using rule 135 (match_arrow -> FATARROW .)
    NOT             reduce using rule 135 (match_arrow -> FATARROW .)
    MINUS           reduce using rule 135 (match_arrow -> FATARROW .)
    AWAIT           reduce using rule 135 (match_arrow -> FATARROW .)


state 382

    (136) match_arrow -> ARROW .

    LBRACE          reduce using rule 136 (match_arrow -> ARROW .)
    MATCH           reduce using rule 136 (match_arrow -> ARROW .)
    NUMBER          reduce using rule 136 (match_arrow -> ARROW .)
    STRING          reduce using rule 136 (match_arrow -> ARROW .)
    TRUE            reduce using rule 136 (match_arrow -> ARROW .)
    FALSE           reduce using rule 136 (match_arrow -> ARROW .)
    NULL            reduce using rule 136 (match_arrow -> ARROW .)
    IDENTIFIER      reduce using rule 136 (match_arrow -> ARROW .)
    LPAREN          reduce using rule 136 (match_arrow -> ARROW .)
    LBRACKET        reduce using rule 136 (match_arrow -> ARROW .)
    FN              reduce using rule 136 (match_arrow -> ARROW .)
    ASYNC           reduce using rule 136 (match_arrow -> ARROW .)
    PARALLEL        reduce using rule 136 (match_arrow -> ARROW .)
    NOT             reduce using rule 136 (match_arrow -> ARROW .)
    MINUS           reduce using rule 136 (match_arrow -> ARROW .)
    AWAIT           reduce using rule 136 (match_arrow -> ARROW .)


state 383

    (138) match_guard_opt -> IF expression .

    FATARROW        reduce using rule 138 (match_guard_opt -> IF expression .)
    ARROW           reduce using rule 138 (match_guard_opt -> IF expression .)


state 384

    (243) pattern -> qualified_name LBRACE pattern_field_list_opt . RBRACE

    RBRACE          shift and go to state 422


state 385

    (244) pattern_field_list_opt -> pattern_field_list . maybe_trailing_comma
    (246) pattern_field_list -> pattern_field_list . COMMA pattern_field
    (89) maybe_trailing_comma -> . COMMA
    (90) maybe_trailing_comma -> . empty
    (252) empty -> .

    COMMA           shift and go to state 424
    RBRACE          reduce using rule 252 (empty -> .)

    maybe_trailing_comma           shift and go to state 423
    empty                          shift and go to state 284

state 386

    (245) pattern_field_list_opt -> empty .

    RBRACE          reduce using rule 245 (pattern_field_list_opt -> empty .)


state 387

    (247) pattern_field_list -> pattern_field .

    COMMA           reduce using rule 247 (pattern_field_list -> pattern_field .)
    RBRACE          reduce using rule 247 (pattern_field_list -> pattern_field .)


state 388

    (248) pattern_field -> IDENTIFIER . COLON pattern
    (249) pattern_field -> IDENTIFIER .

    COLON           shift and go to state 425
    COMMA           reduce using rule 249 (pattern_field -> IDENTIFIER .)
    RBRACE          reduce using rule 249 (pattern_field -> IDENTIFIER .)


state 389

    (142) for_statement -> FOR pattern IN expression . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 426

state 390

    (149) try_statement -> TRY block catch_clause finally_clause_opt .

    LET             reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    CONST           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    STRUCT          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    ENUM            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    INTERFACE       reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    TYPE            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    TEST            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    IF              reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    MATCH           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    CASE            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    FOR             reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    WHILE           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    LOOP            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    BREAK           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    CONTINUE        reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    RETURN          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    TRY             reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    THROW           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    ASSERT          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    ROUTINE         reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    AT              reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    NUMBER          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    STRING          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    TRUE            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    FALSE           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    NULL            reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    IDENTIFIER      reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    LPAREN          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    LBRACKET        reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    LBRACE          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    FN              reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    ASYNC           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    PARALLEL        reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    NOT             reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    MINUS           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    AWAIT           reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)
    RBRACE          reduce using rule 149 (try_statement -> TRY block catch_clause finally_clause_opt .)


state 391

    (154) finally_clause_opt -> FINALLY . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 427

state 392

    (155) finally_clause_opt -> empty .

    LET             reduce using rule 155 (finally_clause_opt -> empty .)
    CONST           reduce using rule 155 (finally_clause_opt -> empty .)
    STRUCT          reduce using rule 155 (finally_clause_opt -> empty .)
    ENUM            reduce using rule 155 (finally_clause_opt -> empty .)
    INTERFACE       reduce using rule 155 (finally_clause_opt -> empty .)
    TYPE            reduce using rule 155 (finally_clause_opt -> empty .)
    TEST            reduce using rule 155 (finally_clause_opt -> empty .)
    IF              reduce using rule 155 (finally_clause_opt -> empty .)
    MATCH           reduce using rule 155 (finally_clause_opt -> empty .)
    CASE            reduce using rule 155 (finally_clause_opt -> empty .)
    FOR             reduce using rule 155 (finally_clause_opt -> empty .)
    WHILE           reduce using rule 155 (finally_clause_opt -> empty .)
    LOOP            reduce using rule 155 (finally_clause_opt -> empty .)
    BREAK           reduce using rule 155 (finally_clause_opt -> empty .)
    CONTINUE        reduce using rule 155 (finally_clause_opt -> empty .)
    RETURN          reduce using rule 155 (finally_clause_opt -> empty .)
    TRY             reduce using rule 155 (finally_clause_opt -> empty .)
    THROW           reduce using rule 155 (finally_clause_opt -> empty .)
    ASSERT          reduce using rule 155 (finally_clause_opt -> empty .)
    ROUTINE         reduce using rule 155 (finally_clause_opt -> empty .)
    AT              reduce using rule 155 (finally_clause_opt -> empty .)
    NUMBER          reduce using rule 155 (finally_clause_opt -> empty .)
    STRING          reduce using rule 155 (finally_clause_opt -> empty .)
    TRUE            reduce using rule 155 (finally_clause_opt -> empty .)
    FALSE           reduce using rule 155 (finally_clause_opt -> empty .)
    NULL            reduce using rule 155 (finally_clause_opt -> empty .)
    IDENTIFIER      reduce using rule 155 (finally_clause_opt -> empty .)
    LPAREN          reduce using rule 155 (finally_clause_opt -> empty .)
    LBRACKET        reduce using rule 155 (finally_clause_opt -> empty .)
    LBRACE          reduce using rule 155 (finally_clause_opt -> empty .)
    FN              reduce using rule 155 (finally_clause_opt -> empty .)
    ASYNC           reduce using rule 155 (finally_clause_opt -> empty .)
    PARALLEL        reduce using rule 155 (finally_clause_opt -> empty .)
    NOT             reduce using rule 155 (finally_clause_opt -> empty .)
    MINUS           reduce using rule 155 (finally_clause_opt -> empty .)
    AWAIT           reduce using rule 155 (finally_clause_opt -> empty .)
    RBRACE          reduce using rule 155 (finally_clause_opt -> empty .)


state 393

    (150) catch_clause -> CATCH LPAREN . IDENTIFIER catch_as_opt RPAREN block

    IDENTIFIER      shift and go to state 428


state 394

    (196) postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .

    LPAREN          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    DOT             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LBRACKET        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ASSIGN          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    PLUS_ASSIGN     reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MINUS_ASSIGN    reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MULTIPLY_ASSIGN reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MODULO_ASSIGN   reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MULTIPLY        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    DIVIDE          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MODULO          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    IS              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    PLUS            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MINUS           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LT              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    GT              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LEQ             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    GEQ             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    EQ              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    NEQ             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    AND             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    RANGE           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    OR              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    SEMICOLON       reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    COMMA           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    RPAREN          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LBRACE          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    RBRACKET        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    RBRACE          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    FATARROW        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ARROW           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LET             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    CONST           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    STRUCT          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ENUM            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    INTERFACE       reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    TYPE            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    TEST            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    IF              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    MATCH           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    CASE            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    FOR             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    WHILE           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    LOOP            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    BREAK           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    CONTINUE        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    RETURN          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    TRY             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    THROW           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ASSERT          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ROUTINE         reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    AT              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    NUMBER          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    STRING          reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    TRUE            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    FALSE           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    NULL            reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    IDENTIFIER      reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    FN              reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    ASYNC           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    PARALLEL        reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    NOT             reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)
    AWAIT           reduce using rule 196 (postfix_expression -> postfix_expression LPAREN argument_list_opt RPAREN .)


state 395

    (198) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LPAREN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DOT             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MULTIPLY_ASSIGN reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO_ASSIGN   reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MULTIPLY        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    IS              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LEQ             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GEQ             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RANGE           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FATARROW        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LET             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONST           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STRUCT          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ENUM            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    INTERFACE       reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TEST            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MATCH           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CASE            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FOR             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    CONTINUE        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TRY             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    THROW           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSERT          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ROUTINE         reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AT              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    STRING          reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NULL            reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    FN              reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASYNC           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PARALLEL        reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AWAIT           reduce using rule 198 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 396

    (210) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 210 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 210 (expression_list -> expression_list COMMA expression .)


state 397

    (221) primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .

    LPAREN          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    DOT             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LBRACKET        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ASSIGN          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    PLUS_ASSIGN     reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MINUS_ASSIGN    reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MULTIPLY_ASSIGN reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MODULO_ASSIGN   reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MULTIPLY        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    DIVIDE          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MODULO          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    IS              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    PLUS            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MINUS           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LT              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    GT              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LEQ             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    GEQ             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    EQ              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    NEQ             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    AND             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    RANGE           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    OR              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    SEMICOLON       reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    COMMA           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    RPAREN          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LBRACE          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    RBRACKET        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    RBRACE          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    FATARROW        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ARROW           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LET             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    CONST           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    STRUCT          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ENUM            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    INTERFACE       reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    TYPE            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    TEST            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    IF              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    MATCH           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    CASE            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    FOR             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    WHILE           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    LOOP            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    BREAK           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    CONTINUE        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    RETURN          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    TRY             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    THROW           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ASSERT          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ROUTINE         reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    AT              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    NUMBER          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    STRING          reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    TRUE            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    FALSE           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    NULL            reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    IDENTIFIER      reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    FN              reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    ASYNC           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    PARALLEL        reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    NOT             reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)
    AWAIT           reduce using rule 221 (primary_expression -> PARALLEL LBRACKET argument_list_opt RBRACKET .)


state 398

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN . return_type_opt block
    (48) return_type_opt -> . ARROW type
    (49) return_type_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 406
    LBRACE          reduce using rule 252 (empty -> .)

    return_type_opt                shift and go to state 429
    empty                          shift and go to state 407

state 399

    (61) field_declaration -> IDENTIFIER ARROW type . SEMICOLON

    SEMICOLON       shift and go to state 430


state 400

    (60) field_declaration -> MUT IDENTIFIER ARROW . type SEMICOLON
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 431
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 401

    (62) method_declaration -> decorator_list_opt async_opt FN . IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block

    IDENTIFIER      shift and go to state 432


state 402

    (68) enum_variant -> IDENTIFIER LBRACE enum_variant_fields_opt RBRACE .

    COMMA           reduce using rule 68 (enum_variant -> IDENTIFIER LBRACE enum_variant_fields_opt RBRACE .)
    RBRACE          reduce using rule 68 (enum_variant -> IDENTIFIER LBRACE enum_variant_fields_opt RBRACE .)


state 403

    (72) enum_variant_fields -> enum_variant_fields field_declaration .

    MUT             reduce using rule 72 (enum_variant_fields -> enum_variant_fields field_declaration .)
    IDENTIFIER      reduce using rule 72 (enum_variant_fields -> enum_variant_fields field_declaration .)
    RBRACE          reduce using rule 72 (enum_variant_fields -> enum_variant_fields field_declaration .)


state 404

    (79) interface_member -> FN IDENTIFIER LPAREN parameter_list_opt . RPAREN ARROW type SEMICOLON

    RPAREN          shift and go to state 433


state 405

    (219) primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 434

state 406

    (48) return_type_opt -> ARROW . type
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 435
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 407

    (49) return_type_opt -> empty .

    LBRACE          reduce using rule 49 (return_type_opt -> empty .)


state 408

    (41) parameter_list -> parameter_list COMMA parameter .

    COMMA           reduce using rule 41 (parameter_list -> parameter_list COMMA parameter .)
    RPAREN          reduce using rule 41 (parameter_list -> parameter_list COMMA parameter .)


state 409

    (43) parameter -> IDENTIFIER parameter_type_opt parameter_default_opt .

    COMMA           reduce using rule 43 (parameter -> IDENTIFIER parameter_type_opt parameter_default_opt .)
    RPAREN          reduce using rule 43 (parameter -> IDENTIFIER parameter_type_opt parameter_default_opt .)


state 410

    (46) parameter_default_opt -> ASSIGN . expression
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    expression                     shift and go to state 436
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 411

    (47) parameter_default_opt -> empty .

    COMMA           reduce using rule 47 (parameter_default_opt -> empty .)
    RPAREN          reduce using rule 47 (parameter_default_opt -> empty .)


state 412

    (44) parameter_type_opt -> ARROW type .

    ASSIGN          reduce using rule 44 (parameter_type_opt -> ARROW type .)
    COMMA           reduce using rule 44 (parameter_type_opt -> ARROW type .)
    RPAREN          reduce using rule 44 (parameter_type_opt -> ARROW type .)


state 413

    (122) else_clause_opt -> ELSE if_statement .

    LET             reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    CONST           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    STRUCT          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    ENUM            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    INTERFACE       reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    TYPE            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    TEST            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    IF              reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    MATCH           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    CASE            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    FOR             reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    WHILE           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    LOOP            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    BREAK           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    CONTINUE        reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    RETURN          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    TRY             reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    THROW           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    ASSERT          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    ROUTINE         reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    AT              reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    NUMBER          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    STRING          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    TRUE            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    FALSE           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    NULL            reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    IDENTIFIER      reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    LPAREN          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    LBRACKET        reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    LBRACE          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    FN              reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    ASYNC           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    PARALLEL        reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    NOT             reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    MINUS           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    AWAIT           reduce using rule 122 (else_clause_opt -> ELSE if_statement .)
    RBRACE          reduce using rule 122 (else_clause_opt -> ELSE if_statement .)


state 414

    (123) else_clause_opt -> ELSE block .

    LET             reduce using rule 123 (else_clause_opt -> ELSE block .)
    CONST           reduce using rule 123 (else_clause_opt -> ELSE block .)
    STRUCT          reduce using rule 123 (else_clause_opt -> ELSE block .)
    ENUM            reduce using rule 123 (else_clause_opt -> ELSE block .)
    INTERFACE       reduce using rule 123 (else_clause_opt -> ELSE block .)
    TYPE            reduce using rule 123 (else_clause_opt -> ELSE block .)
    TEST            reduce using rule 123 (else_clause_opt -> ELSE block .)
    IF              reduce using rule 123 (else_clause_opt -> ELSE block .)
    MATCH           reduce using rule 123 (else_clause_opt -> ELSE block .)
    CASE            reduce using rule 123 (else_clause_opt -> ELSE block .)
    FOR             reduce using rule 123 (else_clause_opt -> ELSE block .)
    WHILE           reduce using rule 123 (else_clause_opt -> ELSE block .)
    LOOP            reduce using rule 123 (else_clause_opt -> ELSE block .)
    BREAK           reduce using rule 123 (else_clause_opt -> ELSE block .)
    CONTINUE        reduce using rule 123 (else_clause_opt -> ELSE block .)
    RETURN          reduce using rule 123 (else_clause_opt -> ELSE block .)
    TRY             reduce using rule 123 (else_clause_opt -> ELSE block .)
    THROW           reduce using rule 123 (else_clause_opt -> ELSE block .)
    ASSERT          reduce using rule 123 (else_clause_opt -> ELSE block .)
    ROUTINE         reduce using rule 123 (else_clause_opt -> ELSE block .)
    AT              reduce using rule 123 (else_clause_opt -> ELSE block .)
    NUMBER          reduce using rule 123 (else_clause_opt -> ELSE block .)
    STRING          reduce using rule 123 (else_clause_opt -> ELSE block .)
    TRUE            reduce using rule 123 (else_clause_opt -> ELSE block .)
    FALSE           reduce using rule 123 (else_clause_opt -> ELSE block .)
    NULL            reduce using rule 123 (else_clause_opt -> ELSE block .)
    IDENTIFIER      reduce using rule 123 (else_clause_opt -> ELSE block .)
    LPAREN          reduce using rule 123 (else_clause_opt -> ELSE block .)
    LBRACKET        reduce using rule 123 (else_clause_opt -> ELSE block .)
    LBRACE          reduce using rule 123 (else_clause_opt -> ELSE block .)
    FN              reduce using rule 123 (else_clause_opt -> ELSE block .)
    ASYNC           reduce using rule 123 (else_clause_opt -> ELSE block .)
    PARALLEL        reduce using rule 123 (else_clause_opt -> ELSE block .)
    NOT             reduce using rule 123 (else_clause_opt -> ELSE block .)
    MINUS           reduce using rule 123 (else_clause_opt -> ELSE block .)
    AWAIT           reduce using rule 123 (else_clause_opt -> ELSE block .)
    RBRACE          reduce using rule 123 (else_clause_opt -> ELSE block .)


state 415

    (126) match_block -> LBRACE match_case_list RBRACE .

    LET             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    CONST           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    STRUCT          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ENUM            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    INTERFACE       reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    TYPE            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    TEST            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    IF              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MATCH           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    CASE            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    FOR             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    WHILE           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LOOP            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    BREAK           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    CONTINUE        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    RETURN          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    TRY             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    THROW           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ASSERT          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ROUTINE         reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    AT              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    NUMBER          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    STRING          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    TRUE            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    FALSE           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    NULL            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    IDENTIFIER      reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LPAREN          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LBRACKET        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LBRACE          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    FN              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ASYNC           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    PARALLEL        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    NOT             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MINUS           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    AWAIT           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    RBRACE          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    DOT             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ASSIGN          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    PLUS_ASSIGN     reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MINUS_ASSIGN    reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MULTIPLY_ASSIGN reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    DIVIDE_ASSIGN   reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MODULO_ASSIGN   reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MULTIPLY        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    DIVIDE          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    MODULO          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    IS              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    PLUS            reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LT              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    GT              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    LEQ             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    GEQ             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    EQ              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    NEQ             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    AND             reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    RANGE           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    OR              reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    SEMICOLON       reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    COMMA           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    RPAREN          reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    RBRACKET        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    FATARROW        reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)
    ARROW           reduce using rule 126 (match_block -> LBRACE match_case_list RBRACE .)


state 416

    (127) match_case_list -> CASE match_case_body . match_case_list_tail
    (128) match_case_list_tail -> . COMMA CASE match_case_body match_case_list_tail
    (129) match_case_list_tail -> . COMMA
    (130) match_case_list_tail -> . empty
    (252) empty -> .

    COMMA           shift and go to state 438
    RBRACE          reduce using rule 252 (empty -> .)

    match_case_list_tail           shift and go to state 437
    empty                          shift and go to state 439

state 417

    (131) match_case_body -> pattern . match_guard_opt match_arrow match_body
    (138) match_guard_opt -> . IF expression
    (139) match_guard_opt -> . empty
    (252) empty -> .

    IF              shift and go to state 314
    FATARROW        reduce using rule 252 (empty -> .)
    ARROW           reduce using rule 252 (empty -> .)

    match_guard_opt                shift and go to state 440
    empty                          shift and go to state 315

state 418

    (132) match_case_statement -> CASE pattern match_guard_opt match_arrow match_body . optional_comma
    (133) optional_comma -> . COMMA
    (134) optional_comma -> . empty
    (252) empty -> .

    COMMA           shift and go to state 442
    LET             reduce using rule 252 (empty -> .)
    CONST           reduce using rule 252 (empty -> .)
    STRUCT          reduce using rule 252 (empty -> .)
    ENUM            reduce using rule 252 (empty -> .)
    INTERFACE       reduce using rule 252 (empty -> .)
    TYPE            reduce using rule 252 (empty -> .)
    TEST            reduce using rule 252 (empty -> .)
    IF              reduce using rule 252 (empty -> .)
    MATCH           reduce using rule 252 (empty -> .)
    CASE            reduce using rule 252 (empty -> .)
    FOR             reduce using rule 252 (empty -> .)
    WHILE           reduce using rule 252 (empty -> .)
    LOOP            reduce using rule 252 (empty -> .)
    BREAK           reduce using rule 252 (empty -> .)
    CONTINUE        reduce using rule 252 (empty -> .)
    RETURN          reduce using rule 252 (empty -> .)
    TRY             reduce using rule 252 (empty -> .)
    THROW           reduce using rule 252 (empty -> .)
    ASSERT          reduce using rule 252 (empty -> .)
    ROUTINE         reduce using rule 252 (empty -> .)
    AT              reduce using rule 252 (empty -> .)
    NUMBER          reduce using rule 252 (empty -> .)
    STRING          reduce using rule 252 (empty -> .)
    TRUE            reduce using rule 252 (empty -> .)
    FALSE           reduce using rule 252 (empty -> .)
    NULL            reduce using rule 252 (empty -> .)
    IDENTIFIER      reduce using rule 252 (empty -> .)
    LPAREN          reduce using rule 252 (empty -> .)
    LBRACKET        reduce using rule 252 (empty -> .)
    LBRACE          reduce using rule 252 (empty -> .)
    FN              reduce using rule 252 (empty -> .)
    ASYNC           reduce using rule 252 (empty -> .)
    PARALLEL        reduce using rule 252 (empty -> .)
    NOT             reduce using rule 252 (empty -> .)
    MINUS           reduce using rule 252 (empty -> .)
    AWAIT           reduce using rule 252 (empty -> .)
    RBRACE          reduce using rule 252 (empty -> .)

    optional_comma                 shift and go to state 441
    empty                          shift and go to state 443

state 419

    (140) match_body -> block .

    COMMA           reduce using rule 140 (match_body -> block .)
    LET             reduce using rule 140 (match_body -> block .)
    CONST           reduce using rule 140 (match_body -> block .)
    STRUCT          reduce using rule 140 (match_body -> block .)
    ENUM            reduce using rule 140 (match_body -> block .)
    INTERFACE       reduce using rule 140 (match_body -> block .)
    TYPE            reduce using rule 140 (match_body -> block .)
    TEST            reduce using rule 140 (match_body -> block .)
    IF              reduce using rule 140 (match_body -> block .)
    MATCH           reduce using rule 140 (match_body -> block .)
    CASE            reduce using rule 140 (match_body -> block .)
    FOR             reduce using rule 140 (match_body -> block .)
    WHILE           reduce using rule 140 (match_body -> block .)
    LOOP            reduce using rule 140 (match_body -> block .)
    BREAK           reduce using rule 140 (match_body -> block .)
    CONTINUE        reduce using rule 140 (match_body -> block .)
    RETURN          reduce using rule 140 (match_body -> block .)
    TRY             reduce using rule 140 (match_body -> block .)
    THROW           reduce using rule 140 (match_body -> block .)
    ASSERT          reduce using rule 140 (match_body -> block .)
    ROUTINE         reduce using rule 140 (match_body -> block .)
    AT              reduce using rule 140 (match_body -> block .)
    NUMBER          reduce using rule 140 (match_body -> block .)
    STRING          reduce using rule 140 (match_body -> block .)
    TRUE            reduce using rule 140 (match_body -> block .)
    FALSE           reduce using rule 140 (match_body -> block .)
    NULL            reduce using rule 140 (match_body -> block .)
    IDENTIFIER      reduce using rule 140 (match_body -> block .)
    LPAREN          reduce using rule 140 (match_body -> block .)
    LBRACKET        reduce using rule 140 (match_body -> block .)
    LBRACE          reduce using rule 140 (match_body -> block .)
    FN              reduce using rule 140 (match_body -> block .)
    ASYNC           reduce using rule 140 (match_body -> block .)
    PARALLEL        reduce using rule 140 (match_body -> block .)
    NOT             reduce using rule 140 (match_body -> block .)
    MINUS           reduce using rule 140 (match_body -> block .)
    AWAIT           reduce using rule 140 (match_body -> block .)
    RBRACE          reduce using rule 140 (match_body -> block .)


state 420

    (141) match_body -> expression .

    COMMA           reduce using rule 141 (match_body -> expression .)
    LET             reduce using rule 141 (match_body -> expression .)
    CONST           reduce using rule 141 (match_body -> expression .)
    STRUCT          reduce using rule 141 (match_body -> expression .)
    ENUM            reduce using rule 141 (match_body -> expression .)
    INTERFACE       reduce using rule 141 (match_body -> expression .)
    TYPE            reduce using rule 141 (match_body -> expression .)
    TEST            reduce using rule 141 (match_body -> expression .)
    IF              reduce using rule 141 (match_body -> expression .)
    MATCH           reduce using rule 141 (match_body -> expression .)
    CASE            reduce using rule 141 (match_body -> expression .)
    FOR             reduce using rule 141 (match_body -> expression .)
    WHILE           reduce using rule 141 (match_body -> expression .)
    LOOP            reduce using rule 141 (match_body -> expression .)
    BREAK           reduce using rule 141 (match_body -> expression .)
    CONTINUE        reduce using rule 141 (match_body -> expression .)
    RETURN          reduce using rule 141 (match_body -> expression .)
    TRY             reduce using rule 141 (match_body -> expression .)
    THROW           reduce using rule 141 (match_body -> expression .)
    ASSERT          reduce using rule 141 (match_body -> expression .)
    ROUTINE         reduce using rule 141 (match_body -> expression .)
    AT              reduce using rule 141 (match_body -> expression .)
    NUMBER          reduce using rule 141 (match_body -> expression .)
    STRING          reduce using rule 141 (match_body -> expression .)
    TRUE            reduce using rule 141 (match_body -> expression .)
    FALSE           reduce using rule 141 (match_body -> expression .)
    NULL            reduce using rule 141 (match_body -> expression .)
    IDENTIFIER      reduce using rule 141 (match_body -> expression .)
    LPAREN          reduce using rule 141 (match_body -> expression .)
    LBRACKET        reduce using rule 141 (match_body -> expression .)
    LBRACE          reduce using rule 141 (match_body -> expression .)
    FN              reduce using rule 141 (match_body -> expression .)
    ASYNC           reduce using rule 141 (match_body -> expression .)
    PARALLEL        reduce using rule 141 (match_body -> expression .)
    NOT             reduce using rule 141 (match_body -> expression .)
    MINUS           reduce using rule 141 (match_body -> expression .)
    AWAIT           reduce using rule 141 (match_body -> expression .)
    RBRACE          reduce using rule 141 (match_body -> expression .)


state 421

    (91) block -> LBRACE . statement_list_opt RBRACE
    (212) primary_expression -> LBRACE . object_field_list_opt RBRACE
    (92) statement_list_opt -> . statement_list
    (93) statement_list_opt -> . empty
    (214) object_field_list_opt -> . object_field_list maybe_trailing_comma
    (215) object_field_list_opt -> . empty
    (94) statement_list -> . statement_list statement
    (95) statement_list -> . statement
    (252) empty -> .
    (216) object_field_list -> . object_field_list COMMA object_field
    (217) object_field_list -> . object_field
    (96) statement -> . variable_declaration
    (97) statement -> . constant_declaration
    (98) statement -> . function_declaration
    (99) statement -> . struct_declaration
    (100) statement -> . enum_declaration
    (101) statement -> . interface_declaration
    (102) statement -> . type_alias_declaration
    (103) statement -> . test_declaration
    (104) statement -> . if_statement
    (105) statement -> . match_statement
    (106) statement -> . match_case_statement
    (107) statement -> . for_statement
    (108) statement -> . while_statement
    (109) statement -> . loop_statement
    (110) statement -> . break_statement
    (111) statement -> . continue_statement
    (112) statement -> . return_statement
    (113) statement -> . try_statement
    (114) statement -> . throw_statement
    (115) statement -> . assert_statement
    (116) statement -> . routine_statement
    (117) statement -> . expression_statement
    (218) object_field -> . IDENTIFIER COLON expression
    (81) variable_declaration -> . LET mut_opt IDENTIFIER type_annotation_opt initializer_opt SEMICOLON
    (80) constant_declaration -> . CONST IDENTIFIER type_annotation_opt ASSIGN expression SEMICOLON
    (38) function_declaration -> . decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (51) struct_declaration -> . STRUCT IDENTIFIER type_parameters_opt implements_opt LBRACE struct_member_list_opt RBRACE
    (63) enum_declaration -> . ENUM IDENTIFIER type_parameters_opt LBRACE enum_variant_list_opt RBRACE
    (74) interface_declaration -> . INTERFACE IDENTIFIER type_parameters_opt LBRACE interface_member_list_opt RBRACE
    (50) type_alias_declaration -> . TYPE IDENTIFIER type_parameters_opt ASSIGN type SEMICOLON
    (88) test_declaration -> . TEST STRING block
    (119) if_statement -> . IF condition block else_clause_opt
    (125) match_statement -> . MATCH expression match_block
    (132) match_case_statement -> . CASE pattern match_guard_opt match_arrow match_body optional_comma
    (142) for_statement -> . FOR pattern IN expression block
    (143) while_statement -> . WHILE condition block
    (144) loop_statement -> . LOOP block
    (145) break_statement -> . BREAK SEMICOLON
    (146) continue_statement -> . CONTINUE SEMICOLON
    (147) return_statement -> . RETURN expression SEMICOLON
    (148) return_statement -> . RETURN SEMICOLON
    (149) try_statement -> . TRY block catch_clause finally_clause_opt
    (156) throw_statement -> . THROW expression SEMICOLON
    (157) assert_statement -> . ASSERT expression SEMICOLON
    (158) routine_statement -> . ROUTINE routine_name_opt block
    (118) expression_statement -> . expression SEMICOLON
    (13) decorator_list_opt -> . decorator_list
    (14) decorator_list_opt -> . empty
    (161) expression -> . assignment_expression
    (11) decorator_list -> . decorator_list decorator
    (12) decorator_list -> . decorator
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (15) decorator -> . AT qualified_name decorator_args_opt
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

  ! shift/reduce conflict for FN resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
    RBRACE          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 445
    LET             shift and go to state 21
    CONST           shift and go to state 20
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    INTERFACE       shift and go to state 18
    TYPE            shift and go to state 19
    TEST            shift and go to state 22
    IF              shift and go to state 118
    MATCH           shift and go to state 119
    CASE            shift and go to state 120
    FOR             shift and go to state 121
    WHILE           shift and go to state 122
    LOOP            shift and go to state 123
    BREAK           shift and go to state 124
    CONTINUE        shift and go to state 125
    RETURN          shift and go to state 126
    TRY             shift and go to state 127
    THROW           shift and go to state 128
    ASSERT          shift and go to state 129
    ROUTINE         shift and go to state 130
    AT              shift and go to state 26
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    LBRACE          shift and go to state 86
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

  ! ASYNC           [ reduce using rule 252 (empty -> .) ]
  ! FN              [ reduce using rule 252 (empty -> .) ]

    statement_list_opt             shift and go to state 87
    object_field_list_opt          shift and go to state 191
    statement_list                 shift and go to state 88
    empty                          shift and go to state 444
    object_field_list              shift and go to state 192
    statement                      shift and go to state 90
    object_field                   shift and go to state 194
    variable_declaration           shift and go to state 91
    constant_declaration           shift and go to state 92
    function_declaration           shift and go to state 93
    struct_declaration             shift and go to state 94
    enum_declaration               shift and go to state 95
    interface_declaration          shift and go to state 96
    type_alias_declaration         shift and go to state 97
    test_declaration               shift and go to state 98
    if_statement                   shift and go to state 99
    match_statement                shift and go to state 100
    match_case_statement           shift and go to state 101
    for_statement                  shift and go to state 102
    while_statement                shift and go to state 103
    loop_statement                 shift and go to state 104
    break_statement                shift and go to state 105
    continue_statement             shift and go to state 106
    return_statement               shift and go to state 107
    try_statement                  shift and go to state 108
    throw_statement                shift and go to state 109
    assert_statement               shift and go to state 110
    routine_statement              shift and go to state 111
    expression_statement           shift and go to state 112
    expression                     shift and go to state 114
    decorator_list_opt             shift and go to state 15
    decorator_list                 shift and go to state 23
    assignment_expression          shift and go to state 131
    decorator                      shift and go to state 25
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 422

    (243) pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .

    IF              reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    FATARROW        reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    ARROW           reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    IN              reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    COMMA           reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    RBRACE          reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)
    RPAREN          reduce using rule 243 (pattern -> qualified_name LBRACE pattern_field_list_opt RBRACE .)


state 423

    (244) pattern_field_list_opt -> pattern_field_list maybe_trailing_comma .

    RBRACE          reduce using rule 244 (pattern_field_list_opt -> pattern_field_list maybe_trailing_comma .)


state 424

    (246) pattern_field_list -> pattern_field_list COMMA . pattern_field
    (89) maybe_trailing_comma -> COMMA .
    (248) pattern_field -> . IDENTIFIER COLON pattern
    (249) pattern_field -> . IDENTIFIER

    RBRACE          reduce using rule 89 (maybe_trailing_comma -> COMMA .)
    IDENTIFIER      shift and go to state 388

    pattern_field                  shift and go to state 446

state 425

    (248) pattern_field -> IDENTIFIER COLON . pattern
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    pattern                        shift and go to state 447
    qualified_name                 shift and go to state 214

state 426

    (142) for_statement -> FOR pattern IN expression block .

    LET             reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    CONST           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    STRUCT          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    ENUM            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    INTERFACE       reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    TYPE            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    TEST            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    IF              reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    MATCH           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    CASE            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    FOR             reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    WHILE           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    LOOP            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    BREAK           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    CONTINUE        reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    RETURN          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    TRY             reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    THROW           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    ASSERT          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    ROUTINE         reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    AT              reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    NUMBER          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    STRING          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    TRUE            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    FALSE           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    NULL            reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    IDENTIFIER      reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    LPAREN          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    LBRACKET        reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    LBRACE          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    FN              reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    ASYNC           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    PARALLEL        reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    NOT             reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    MINUS           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    AWAIT           reduce using rule 142 (for_statement -> FOR pattern IN expression block .)
    RBRACE          reduce using rule 142 (for_statement -> FOR pattern IN expression block .)


state 427

    (154) finally_clause_opt -> FINALLY block .

    LET             reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    CONST           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    STRUCT          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    ENUM            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    INTERFACE       reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    TYPE            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    TEST            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    IF              reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    MATCH           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    CASE            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    FOR             reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    WHILE           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    LOOP            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    BREAK           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    CONTINUE        reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    RETURN          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    TRY             reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    THROW           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    ASSERT          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    ROUTINE         reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    AT              reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    NUMBER          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    STRING          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    TRUE            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    FALSE           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    NULL            reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    IDENTIFIER      reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    LPAREN          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    LBRACKET        reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    LBRACE          reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    FN              reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    ASYNC           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    PARALLEL        reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    NOT             reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    MINUS           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    AWAIT           reduce using rule 154 (finally_clause_opt -> FINALLY block .)
    RBRACE          reduce using rule 154 (finally_clause_opt -> FINALLY block .)


state 428

    (150) catch_clause -> CATCH LPAREN IDENTIFIER . catch_as_opt RPAREN block
    (152) catch_as_opt -> . AS pattern
    (153) catch_as_opt -> . empty
    (252) empty -> .

    AS              shift and go to state 449
    RPAREN          reduce using rule 252 (empty -> .)

    catch_as_opt                   shift and go to state 448
    empty                          shift and go to state 450

state 429

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 451

state 430

    (61) field_declaration -> IDENTIFIER ARROW type SEMICOLON .

    MUT             reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)
    IDENTIFIER      reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)
    AT              reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)
    ASYNC           reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)
    FN              reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)
    RBRACE          reduce using rule 61 (field_declaration -> IDENTIFIER ARROW type SEMICOLON .)


state 431

    (60) field_declaration -> MUT IDENTIFIER ARROW type . SEMICOLON

    SEMICOLON       shift and go to state 452


state 432

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER . type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block
    (24) type_parameters_opt -> . LT type_parameter_list GT
    (25) type_parameters_opt -> . empty
    (252) empty -> .

    LT              shift and go to state 50
    LPAREN          reduce using rule 252 (empty -> .)

    type_parameters_opt            shift and go to state 453
    empty                          shift and go to state 51

state 433

    (79) interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN . ARROW type SEMICOLON

    ARROW           shift and go to state 454


state 434

    (219) primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .

    LPAREN          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    DOT             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LBRACKET        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASSIGN          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    PLUS_ASSIGN     reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MINUS_ASSIGN    reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MULTIPLY_ASSIGN reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    DIVIDE_ASSIGN   reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MODULO_ASSIGN   reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MULTIPLY        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    DIVIDE          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MODULO          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IS              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    PLUS            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MINUS           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LT              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    GT              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LEQ             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    GEQ             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    EQ              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NEQ             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AND             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RANGE           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    OR              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    SEMICOLON       reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    COMMA           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RPAREN          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LBRACE          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RBRACKET        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RBRACE          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FATARROW        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ARROW           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LET             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CONST           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    STRUCT          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ENUM            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    INTERFACE       reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TYPE            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TEST            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IF              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MATCH           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CASE            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FOR             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    WHILE           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LOOP            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    BREAK           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CONTINUE        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RETURN          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TRY             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    THROW           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASSERT          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ROUTINE         reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AT              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NUMBER          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    STRING          reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TRUE            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FALSE           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NULL            reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IDENTIFIER      reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FN              reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASYNC           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    PARALLEL        reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NOT             reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AWAIT           reduce using rule 219 (primary_expression -> FN LPAREN parameter_list_opt RPAREN return_type_opt block .)


state 435

    (48) return_type_opt -> ARROW type .

    LBRACE          reduce using rule 48 (return_type_opt -> ARROW type .)


state 436

    (46) parameter_default_opt -> ASSIGN expression .

    COMMA           reduce using rule 46 (parameter_default_opt -> ASSIGN expression .)
    RPAREN          reduce using rule 46 (parameter_default_opt -> ASSIGN expression .)


state 437

    (127) match_case_list -> CASE match_case_body match_case_list_tail .

    RBRACE          reduce using rule 127 (match_case_list -> CASE match_case_body match_case_list_tail .)


state 438

    (128) match_case_list_tail -> COMMA . CASE match_case_body match_case_list_tail
    (129) match_case_list_tail -> COMMA .

    CASE            shift and go to state 455
    RBRACE          reduce using rule 129 (match_case_list_tail -> COMMA .)


state 439

    (130) match_case_list_tail -> empty .

    RBRACE          reduce using rule 130 (match_case_list_tail -> empty .)


state 440

    (131) match_case_body -> pattern match_guard_opt . match_arrow match_body
    (135) match_arrow -> . FATARROW
    (136) match_arrow -> . ARROW

    FATARROW        shift and go to state 381
    ARROW           shift and go to state 382

    match_arrow                    shift and go to state 456

state 441

    (132) match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .

    LET             reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    CONST           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    STRUCT          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    ENUM            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    INTERFACE       reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    TYPE            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    TEST            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    IF              reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    MATCH           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    CASE            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    FOR             reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    WHILE           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    LOOP            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    BREAK           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    CONTINUE        reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    RETURN          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    TRY             reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    THROW           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    ASSERT          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    ROUTINE         reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    AT              reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    NUMBER          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    STRING          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    TRUE            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    FALSE           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    NULL            reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    IDENTIFIER      reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    LPAREN          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    LBRACKET        reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    LBRACE          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    FN              reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    ASYNC           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    PARALLEL        reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    NOT             reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    MINUS           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    AWAIT           reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)
    RBRACE          reduce using rule 132 (match_case_statement -> CASE pattern match_guard_opt match_arrow match_body optional_comma .)


state 442

    (133) optional_comma -> COMMA .

    LET             reduce using rule 133 (optional_comma -> COMMA .)
    CONST           reduce using rule 133 (optional_comma -> COMMA .)
    STRUCT          reduce using rule 133 (optional_comma -> COMMA .)
    ENUM            reduce using rule 133 (optional_comma -> COMMA .)
    INTERFACE       reduce using rule 133 (optional_comma -> COMMA .)
    TYPE            reduce using rule 133 (optional_comma -> COMMA .)
    TEST            reduce using rule 133 (optional_comma -> COMMA .)
    IF              reduce using rule 133 (optional_comma -> COMMA .)
    MATCH           reduce using rule 133 (optional_comma -> COMMA .)
    CASE            reduce using rule 133 (optional_comma -> COMMA .)
    FOR             reduce using rule 133 (optional_comma -> COMMA .)
    WHILE           reduce using rule 133 (optional_comma -> COMMA .)
    LOOP            reduce using rule 133 (optional_comma -> COMMA .)
    BREAK           reduce using rule 133 (optional_comma -> COMMA .)
    CONTINUE        reduce using rule 133 (optional_comma -> COMMA .)
    RETURN          reduce using rule 133 (optional_comma -> COMMA .)
    TRY             reduce using rule 133 (optional_comma -> COMMA .)
    THROW           reduce using rule 133 (optional_comma -> COMMA .)
    ASSERT          reduce using rule 133 (optional_comma -> COMMA .)
    ROUTINE         reduce using rule 133 (optional_comma -> COMMA .)
    AT              reduce using rule 133 (optional_comma -> COMMA .)
    NUMBER          reduce using rule 133 (optional_comma -> COMMA .)
    STRING          reduce using rule 133 (optional_comma -> COMMA .)
    TRUE            reduce using rule 133 (optional_comma -> COMMA .)
    FALSE           reduce using rule 133 (optional_comma -> COMMA .)
    NULL            reduce using rule 133 (optional_comma -> COMMA .)
    IDENTIFIER      reduce using rule 133 (optional_comma -> COMMA .)
    LPAREN          reduce using rule 133 (optional_comma -> COMMA .)
    LBRACKET        reduce using rule 133 (optional_comma -> COMMA .)
    LBRACE          reduce using rule 133 (optional_comma -> COMMA .)
    FN              reduce using rule 133 (optional_comma -> COMMA .)
    ASYNC           reduce using rule 133 (optional_comma -> COMMA .)
    PARALLEL        reduce using rule 133 (optional_comma -> COMMA .)
    NOT             reduce using rule 133 (optional_comma -> COMMA .)
    MINUS           reduce using rule 133 (optional_comma -> COMMA .)
    AWAIT           reduce using rule 133 (optional_comma -> COMMA .)
    RBRACE          reduce using rule 133 (optional_comma -> COMMA .)


state 443

    (134) optional_comma -> empty .

    LET             reduce using rule 134 (optional_comma -> empty .)
    CONST           reduce using rule 134 (optional_comma -> empty .)
    STRUCT          reduce using rule 134 (optional_comma -> empty .)
    ENUM            reduce using rule 134 (optional_comma -> empty .)
    INTERFACE       reduce using rule 134 (optional_comma -> empty .)
    TYPE            reduce using rule 134 (optional_comma -> empty .)
    TEST            reduce using rule 134 (optional_comma -> empty .)
    IF              reduce using rule 134 (optional_comma -> empty .)
    MATCH           reduce using rule 134 (optional_comma -> empty .)
    CASE            reduce using rule 134 (optional_comma -> empty .)
    FOR             reduce using rule 134 (optional_comma -> empty .)
    WHILE           reduce using rule 134 (optional_comma -> empty .)
    LOOP            reduce using rule 134 (optional_comma -> empty .)
    BREAK           reduce using rule 134 (optional_comma -> empty .)
    CONTINUE        reduce using rule 134 (optional_comma -> empty .)
    RETURN          reduce using rule 134 (optional_comma -> empty .)
    TRY             reduce using rule 134 (optional_comma -> empty .)
    THROW           reduce using rule 134 (optional_comma -> empty .)
    ASSERT          reduce using rule 134 (optional_comma -> empty .)
    ROUTINE         reduce using rule 134 (optional_comma -> empty .)
    AT              reduce using rule 134 (optional_comma -> empty .)
    NUMBER          reduce using rule 134 (optional_comma -> empty .)
    STRING          reduce using rule 134 (optional_comma -> empty .)
    TRUE            reduce using rule 134 (optional_comma -> empty .)
    FALSE           reduce using rule 134 (optional_comma -> empty .)
    NULL            reduce using rule 134 (optional_comma -> empty .)
    IDENTIFIER      reduce using rule 134 (optional_comma -> empty .)
    LPAREN          reduce using rule 134 (optional_comma -> empty .)
    LBRACKET        reduce using rule 134 (optional_comma -> empty .)
    LBRACE          reduce using rule 134 (optional_comma -> empty .)
    FN              reduce using rule 134 (optional_comma -> empty .)
    ASYNC           reduce using rule 134 (optional_comma -> empty .)
    PARALLEL        reduce using rule 134 (optional_comma -> empty .)
    NOT             reduce using rule 134 (optional_comma -> empty .)
    MINUS           reduce using rule 134 (optional_comma -> empty .)
    AWAIT           reduce using rule 134 (optional_comma -> empty .)
    RBRACE          reduce using rule 134 (optional_comma -> empty .)


state 444

    (93) statement_list_opt -> empty .
    (215) object_field_list_opt -> empty .
    (14) decorator_list_opt -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 93 (statement_list_opt -> empty .)
    RBRACE          reduce using rule 93 (statement_list_opt -> empty .)
    ASYNC           reduce using rule 14 (decorator_list_opt -> empty .)
    FN              reduce using rule 14 (decorator_list_opt -> empty .)

  ! RBRACE          [ reduce using rule 215 (object_field_list_opt -> empty .) ]


state 445

    (218) object_field -> IDENTIFIER . COLON expression
    (205) primary_expression -> IDENTIFIER .
    (213) primary_expression -> IDENTIFIER . LBRACE object_field_list_opt RBRACE

    COLON           shift and go to state 301
    LPAREN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    PLUS_ASSIGN     reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MINUS_ASSIGN    reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MULTIPLY_ASSIGN reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGN   reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MODULO_ASSIGN   reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 205 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 205 (primary_expression -> IDENTIFIER .)
    IS              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 205 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    GEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    NEQ             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 205 (primary_expression -> IDENTIFIER .)
    RANGE           reduce using rule 205 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 205 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 205 (primary_expression -> IDENTIFIER .)
    LBRACE          shift and go to state 198


state 446

    (246) pattern_field_list -> pattern_field_list COMMA pattern_field .

    COMMA           reduce using rule 246 (pattern_field_list -> pattern_field_list COMMA pattern_field .)
    RBRACE          reduce using rule 246 (pattern_field_list -> pattern_field_list COMMA pattern_field .)


state 447

    (248) pattern_field -> IDENTIFIER COLON pattern .

    COMMA           reduce using rule 248 (pattern_field -> IDENTIFIER COLON pattern .)
    RBRACE          reduce using rule 248 (pattern_field -> IDENTIFIER COLON pattern .)


state 448

    (150) catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt . RPAREN block

    RPAREN          shift and go to state 457


state 449

    (152) catch_as_opt -> AS . pattern
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    pattern                        shift and go to state 458
    qualified_name                 shift and go to state 214

state 450

    (153) catch_as_opt -> empty .

    RPAREN          reduce using rule 153 (catch_as_opt -> empty .)


state 451

    (38) function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .

    IMPORT          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    STRUCT          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ENUM            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    INTERFACE       reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TYPE            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CONST           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LET             reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TEST            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AT              reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASYNC           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FN              reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    $end            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IF              reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MATCH           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CASE            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FOR             reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    WHILE           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LOOP            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    BREAK           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    CONTINUE        reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RETURN          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TRY             reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    THROW           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASSERT          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ROUTINE         reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NUMBER          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    STRING          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    TRUE            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FALSE           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NULL            reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IDENTIFIER      reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LPAREN          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LBRACKET        reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    LBRACE          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    PARALLEL        reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    NOT             reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    MINUS           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AWAIT           reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RBRACE          reduce using rule 38 (function_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)


state 452

    (60) field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .

    MUT             reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)
    IDENTIFIER      reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)
    AT              reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)
    ASYNC           reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)
    FN              reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)
    RBRACE          reduce using rule 60 (field_declaration -> MUT IDENTIFIER ARROW type SEMICOLON .)


state 453

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt . LPAREN parameter_list_opt RPAREN return_type_opt block

    LPAREN          shift and go to state 459


state 454

    (79) interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW . type SEMICOLON
    (222) type -> . union_type
    (223) union_type -> . intersection_type
    (224) union_type -> . union_type PIPE intersection_type
    (225) intersection_type -> . primary_type
    (226) intersection_type -> . intersection_type AMPERSAND primary_type
    (227) primary_type -> . qualified_name type_arguments_opt
    (228) primary_type -> . primary_type LBRACKET RBRACKET
    (229) primary_type -> . LBRACKET type_list RBRACKET
    (230) primary_type -> . primary_type QUESTION
    (231) primary_type -> . LPAREN type RPAREN
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    LBRACKET        shift and go to state 83
    LPAREN          shift and go to state 84
    IDENTIFIER      shift and go to state 43

    type                           shift and go to state 460
    union_type                     shift and go to state 79
    intersection_type              shift and go to state 80
    primary_type                   shift and go to state 81
    qualified_name                 shift and go to state 82

state 455

    (128) match_case_list_tail -> COMMA CASE . match_case_body match_case_list_tail
    (131) match_case_body -> . pattern match_guard_opt match_arrow match_body
    (236) pattern -> . IDENTIFIER
    (237) pattern -> . NUMBER
    (238) pattern -> . STRING
    (239) pattern -> . TRUE
    (240) pattern -> . FALSE
    (241) pattern -> . NULL
    (242) pattern -> . MINUS NUMBER
    (243) pattern -> . qualified_name LBRACE pattern_field_list_opt RBRACE
    (250) qualified_name -> . IDENTIFIER
    (251) qualified_name -> . qualified_name DOT IDENTIFIER

    IDENTIFIER      shift and go to state 207
    NUMBER          shift and go to state 208
    STRING          shift and go to state 209
    TRUE            shift and go to state 210
    FALSE           shift and go to state 211
    NULL            shift and go to state 212
    MINUS           shift and go to state 213

    match_case_body                shift and go to state 461
    pattern                        shift and go to state 417
    qualified_name                 shift and go to state 214

state 456

    (131) match_case_body -> pattern match_guard_opt match_arrow . match_body
    (140) match_body -> . block
    (141) match_body -> . expression
    (91) block -> . LBRACE statement_list_opt RBRACE
    (161) expression -> . assignment_expression
    (162) assignment_expression -> . range_expression
    (163) assignment_expression -> . postfix_expression assignment_operator assignment_expression
    (170) range_expression -> . logical_or_expression RANGE logical_or_expression
    (171) range_expression -> . logical_or_expression
    (196) postfix_expression -> . postfix_expression LPAREN argument_list_opt RPAREN
    (197) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (198) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (199) postfix_expression -> . primary_expression
    (172) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (173) logical_or_expression -> . logical_and_expression
    (137) primary_expression -> . MATCH expression match_block
    (200) primary_expression -> . NUMBER
    (201) primary_expression -> . STRING
    (202) primary_expression -> . TRUE
    (203) primary_expression -> . FALSE
    (204) primary_expression -> . NULL
    (205) primary_expression -> . IDENTIFIER
    (206) primary_expression -> . LPAREN expression RPAREN
    (207) primary_expression -> . LBRACKET expression_list_opt RBRACKET
    (212) primary_expression -> . LBRACE object_field_list_opt RBRACE
    (213) primary_expression -> . IDENTIFIER LBRACE object_field_list_opt RBRACE
    (219) primary_expression -> . FN LPAREN parameter_list_opt RPAREN return_type_opt block
    (220) primary_expression -> . ASYNC block
    (221) primary_expression -> . PARALLEL LBRACKET argument_list_opt RBRACKET
    (174) logical_and_expression -> . logical_and_expression AND equality_expression
    (175) logical_and_expression -> . equality_expression
    (176) equality_expression -> . equality_expression EQ relational_expression
    (177) equality_expression -> . equality_expression NEQ relational_expression
    (178) equality_expression -> . relational_expression
    (179) relational_expression -> . relational_expression LT additive_expression
    (180) relational_expression -> . relational_expression GT additive_expression
    (181) relational_expression -> . relational_expression LEQ additive_expression
    (182) relational_expression -> . relational_expression GEQ additive_expression
    (183) relational_expression -> . additive_expression IS type
    (184) relational_expression -> . additive_expression
    (185) additive_expression -> . additive_expression PLUS multiplicative_expression
    (186) additive_expression -> . additive_expression MINUS multiplicative_expression
    (187) additive_expression -> . multiplicative_expression
    (188) multiplicative_expression -> . multiplicative_expression MULTIPLY unary_expression
    (189) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (190) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (191) multiplicative_expression -> . unary_expression
    (192) unary_expression -> . NOT unary_expression
    (193) unary_expression -> . MINUS unary_expression
    (194) unary_expression -> . AWAIT unary_expression
    (195) unary_expression -> . postfix_expression

    LBRACE          shift and go to state 421
    MATCH           shift and go to state 157
    NUMBER          shift and go to state 138
    STRING          shift and go to state 117
    TRUE            shift and go to state 139
    FALSE           shift and go to state 140
    NULL            shift and go to state 141
    IDENTIFIER      shift and go to state 113
    LPAREN          shift and go to state 116
    LBRACKET        shift and go to state 135
    FN              shift and go to state 115
    ASYNC           shift and go to state 142
    PARALLEL        shift and go to state 143
    NOT             shift and go to state 150
    MINUS           shift and go to state 148
    AWAIT           shift and go to state 151

    match_body                     shift and go to state 462
    block                          shift and go to state 419
    expression                     shift and go to state 420
    assignment_expression          shift and go to state 131
    range_expression               shift and go to state 132
    postfix_expression             shift and go to state 133
    logical_or_expression          shift and go to state 134
    primary_expression             shift and go to state 136
    logical_and_expression         shift and go to state 137
    equality_expression            shift and go to state 144
    relational_expression          shift and go to state 145
    additive_expression            shift and go to state 146
    multiplicative_expression      shift and go to state 147
    unary_expression               shift and go to state 149

state 457

    (150) catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 463

state 458

    (152) catch_as_opt -> AS pattern .

    RPAREN          reduce using rule 152 (catch_as_opt -> AS pattern .)


state 459

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN . parameter_list_opt RPAREN return_type_opt block
    (39) parameter_list_opt -> . parameter_list
    (40) parameter_list_opt -> . empty
    (41) parameter_list -> . parameter_list COMMA parameter
    (42) parameter_list -> . parameter
    (252) empty -> .
    (43) parameter -> . IDENTIFIER parameter_type_opt parameter_default_opt

    RPAREN          reduce using rule 252 (empty -> .)
    IDENTIFIER      shift and go to state 307

    parameter_list_opt             shift and go to state 464
    parameter_list                 shift and go to state 304
    empty                          shift and go to state 305
    parameter                      shift and go to state 306

state 460

    (79) interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type . SEMICOLON

    SEMICOLON       shift and go to state 465


state 461

    (128) match_case_list_tail -> COMMA CASE match_case_body . match_case_list_tail
    (128) match_case_list_tail -> . COMMA CASE match_case_body match_case_list_tail
    (129) match_case_list_tail -> . COMMA
    (130) match_case_list_tail -> . empty
    (252) empty -> .

    COMMA           shift and go to state 438
    RBRACE          reduce using rule 252 (empty -> .)

    match_case_list_tail           shift and go to state 466
    empty                          shift and go to state 439

state 462

    (131) match_case_body -> pattern match_guard_opt match_arrow match_body .

    COMMA           reduce using rule 131 (match_case_body -> pattern match_guard_opt match_arrow match_body .)
    RBRACE          reduce using rule 131 (match_case_body -> pattern match_guard_opt match_arrow match_body .)


state 463

    (150) catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .

    FINALLY         reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    LET             reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    CONST           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    STRUCT          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    ENUM            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    INTERFACE       reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    TYPE            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    TEST            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    IF              reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    MATCH           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    CASE            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    FOR             reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    WHILE           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    LOOP            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    BREAK           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    CONTINUE        reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    RETURN          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    TRY             reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    THROW           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    ASSERT          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    ROUTINE         reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    AT              reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    NUMBER          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    STRING          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    TRUE            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    FALSE           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    NULL            reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    IDENTIFIER      reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    LPAREN          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    LBRACKET        reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    LBRACE          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    FN              reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    ASYNC           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    PARALLEL        reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    NOT             reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    MINUS           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    AWAIT           reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)
    RBRACE          reduce using rule 150 (catch_clause -> CATCH LPAREN IDENTIFIER catch_as_opt RPAREN block .)


state 464

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt . RPAREN return_type_opt block

    RPAREN          shift and go to state 467


state 465

    (79) interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON .

    FN              reduce using rule 79 (interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON .)
    RBRACE          reduce using rule 79 (interface_member -> FN IDENTIFIER LPAREN parameter_list_opt RPAREN ARROW type SEMICOLON .)


state 466

    (128) match_case_list_tail -> COMMA CASE match_case_body match_case_list_tail .

    RBRACE          reduce using rule 128 (match_case_list_tail -> COMMA CASE match_case_body match_case_list_tail .)


state 467

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN . return_type_opt block
    (48) return_type_opt -> . ARROW type
    (49) return_type_opt -> . empty
    (252) empty -> .

    ARROW           shift and go to state 406
    LBRACE          reduce using rule 252 (empty -> .)

    return_type_opt                shift and go to state 468
    empty                          shift and go to state 407

state 468

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt . block
    (91) block -> . LBRACE statement_list_opt RBRACE

    LBRACE          shift and go to state 60

    block                          shift and go to state 469

state 469

    (62) method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .

    MUT             reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    IDENTIFIER      reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    AT              reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    ASYNC           reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    FN              reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)
    RBRACE          reduce using rule 62 (method_declaration -> decorator_list_opt async_opt FN IDENTIFIER type_parameters_opt LPAREN parameter_list_opt RPAREN return_type_opt block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FN in state 60 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 60 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 81 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for FN in state 88 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 88 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 146 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 260 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 291 resolved as shift
WARNING: shift/reduce conflict for FN in state 421 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 421 resolved as shift
WARNING: reduce/reduce conflict in state 311 resolved using rule (match_statement -> MATCH expression match_block)
WARNING: rejected rule (primary_expression -> MATCH expression match_block) in state 311
WARNING: reduce/reduce conflict in state 377 resolved using rule (condition -> LPAREN expression RPAREN)
WARNING: rejected rule (primary_expression -> LPAREN expression RPAREN) in state 377
WARNING: reduce/reduce conflict in state 444 resolved using rule (statement_list_opt -> empty)
WARNING: rejected rule (object_field_list_opt -> empty) in state 444
