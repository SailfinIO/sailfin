
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTleftLPARENRPARENrightUMINUSAMPERSAND AND ARROW ASSIGN ASYNC AT AWAIT COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FALSE FN FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NULL NUMBER OR PIPE PLUS PLUS_ASSIGN PRINT QUESTION_MARK RBRACE RBRACKET RETURN ROUTINE RPAREN SEMICOLON STRING STRUCT TRUE TYPE UNDERSCOREprogram : statementsstatements : statements statementstatements : statementstatement : variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| enum_declaration\n| print_statement\n| if_statement\n| return_statement\n| assignment\n| expression_statement\n| match_statement \n| import_statementmatch_statement : MATCH expression LBRACE match_arms RBRACE\nmatch_arms :\n           | match_arm_list maybe_comma\nmatch_arm_list : match_armmatch_arm_list : match_arm_list COMMA match_armmaybe_comma : COMMA\n| empty\nmatch_arm : pattern ARROW inline_statementinline_statement : PRINT DOT INFO LPAREN expression RPARENinline_statement : assignment_expressioninline_statement : expressionpattern : MINUS NUMBERpattern : NUMBERpattern : UNDERSCOREassignment_expression : lvalue ASSIGN expression\n| lvalue PLUS_ASSIGN expression\n| lvalue MINUS_ASSIGN expression\n| lvalue MULTIPLY_ASSIGN expression\n| lvalue DIVIDE_ASSIGN expressiontype_alias_declaration : TYPE IDENTIFIER ASSIGN type SEMICOLONstruct_declaration : STRUCT IDENTIFIER LBRACE struct_members RBRACEstruct_members : struct_members struct_memberstruct_members : struct_memberstruct_member : mut_field_declaration\n| field_declaration\n| method_declarationmethod_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmethod_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmut_field_declaration : MUT LET IDENTIFIER ARROW type SEMICOLONfield_declaration : LET IDENTIFIER ARROW type SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants\n| emptyenum_variants : enum_variant_list maybe_trailing_commaenum_variant_list : enum_variantenum_variant_list : enum_variant_list COMMA enum_variantmaybe_trailing_comma : COMMA\n| empty\nenum_variant : IDENTIFIER LBRACE struct_members RBRACEenum_variant : IDENTIFIERdecorators : decorators decoratordecorators : decoratordecorator : AT IDENTIFIERconstant_declaration : CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ASSIGN expression SEMICOLONmut_opt : MUTmut_opt : function_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEexpression : AWAIT expressionprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIERimport_items : IDENTIFIERimport_items : block : LBRACE statements RBRACEif_statement : IF expression block else_clauseif_statement : IF LPAREN expression RPAREN block else_clauseelse_clause : ELSE if_statementelse_clause : ELSE blockelse_clause :return_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment : assignment_expression SEMICOLONlvalue : IDENTIFIERlvalue : expression DOT IDENTIFIERexpression : FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEexpression : FN LPAREN parameters RPAREN LBRACE statements RBRACEexpression_statement : expression SEMICOLONparameters : parameters COMMA parameter\n| parameters COMMAparameters : parameterparameters : parameter : IDENTIFIER ARROW typeparameter : IDENTIFIERtype : IDENTIFIER\n| type LT type_list GTtype_list : type_list COMMA typetype_list : typeexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| elements COMMAelements : expressionelements : expression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arguments RPAREN\n| expression LPAREN arguments RPARENexpression : expression DOT IDENTIFIERarguments : arguments COMMA expressionarguments : expressionarguments : empty :'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,41,45,77,78,120,123,124,126,154,155,156,157,158,159,170,172,189,196,199,200,205,206,211,212,213,214,215,224,233,235,240,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,285,290,291,292,293,294,295,297,301,302,303,304,305,309,310,311,313,315,316,317,318,319,320,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,61,-2,-93,-87,-88,160,-85,16,-86,160,-38,-39,-40,-41,201,-81,16,-63,16,-36,-37,160,-46,-83,-84,-80,-85,-16,-61,16,16,160,-82,-62,16,16,16,16,-75,-76,-60,-59,16,16,16,16,-73,16,-45,16,16,-71,16,-69,16,-44,16,-67,16,16,-72,16,-70,-68,16,-66,16,16,16,-43,-42,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,41,45,77,78,120,123,124,126,154,155,156,157,158,170,172,189,196,199,200,205,206,211,212,213,214,215,224,233,235,240,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,285,290,291,292,293,294,295,297,301,302,303,304,305,309,310,311,313,315,316,317,318,319,320,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,43,-2,-93,-87,-88,159,-85,19,-86,159,-38,-39,-40,-41,-81,19,-63,19,-36,-37,159,-46,-83,-84,-80,-85,-16,-61,19,19,159,-82,-62,19,19,19,19,-75,-76,-60,-59,19,19,19,19,-73,19,-45,19,19,-71,19,-69,19,-44,19,-67,19,19,-72,19,-70,-68,19,-66,19,19,19,-43,-42,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,20,-86,-81,20,-63,20,-36,-46,-83,-84,-80,-85,-16,-61,20,20,-82,-62,20,20,20,20,-75,-76,-60,-59,20,20,20,20,-73,20,20,20,-71,20,-69,20,20,-67,20,20,-72,20,-70,-68,20,-66,20,20,20,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,34,41,45,64,77,78,90,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,62,-57,-2,-93,-56,-87,-88,-58,-85,22,-86,-81,22,-63,22,-36,-46,-83,-84,-80,-85,-16,-61,22,22,-82,-62,22,22,22,22,-75,-76,-60,-59,22,22,22,22,-73,22,22,22,-71,22,-69,22,22,-67,22,22,-72,22,-70,-68,22,-66,22,22,22,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,22,24,28,29,31,34,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,64,75,77,78,81,82,83,84,85,90,109,120,123,124,126,136,138,140,154,155,156,157,158,161,169,170,172,187,189,196,199,200,205,206,211,212,213,214,215,219,223,224,228,233,235,240,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,285,290,291,292,293,294,295,297,300,301,302,303,304,305,309,310,311,313,315,316,317,318,319,320,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,63,65,69,69,69,69,-57,69,69,69,-2,69,-93,69,69,69,69,69,69,69,69,69,69,69,69,69,111,-56,69,-87,-88,69,69,69,69,69,-58,69,162,-85,23,-86,69,69,69,162,-38,-39,-40,-41,203,69,-81,23,69,-63,23,-36,-37,162,-46,-83,-84,-80,-85,-16,69,69,-61,69,23,23,162,-82,-62,23,23,23,23,-75,-76,-60,-59,23,23,23,23,-73,23,-45,23,23,-71,23,-69,23,-44,69,23,-67,23,23,-72,23,-70,-68,23,-66,23,23,23,-43,-42,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,25,-86,-81,25,-63,25,-36,-46,-83,-84,-80,-85,-16,-61,25,25,-82,-62,25,25,25,25,-75,-76,-60,-59,25,25,25,25,-73,25,25,25,-71,25,-69,25,25,-67,25,25,-72,25,-70,-68,25,-66,25,25,25,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,26,-86,-81,26,-63,26,-36,-46,-83,-84,-80,-85,-16,-61,26,26,-82,-62,26,26,26,26,-75,-76,-60,-59,26,26,26,26,-73,26,26,26,-71,26,-69,26,26,-67,26,26,-72,26,-70,-68,26,-66,26,26,26,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,219,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,27,-86,-81,27,-63,27,-36,-46,-83,-84,-80,-85,-16,246,-61,27,27,-82,-62,27,27,27,27,-75,-76,-60,-59,27,27,27,27,-73,27,27,27,-71,27,-69,27,27,-67,27,27,-72,27,-70,-68,27,-66,27,27,27,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,171,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,28,-86,-81,28,28,-63,28,-36,-46,-83,-84,-80,-85,-16,-61,28,28,-82,-62,28,28,28,28,-75,-76,-60,-59,28,28,28,28,-73,28,28,28,-71,28,-69,28,28,-67,28,28,-72,28,-70,-68,28,-66,28,28,28,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,29,-86,-81,29,-63,29,-36,-46,-83,-84,-80,-85,-16,-61,29,29,-82,-62,29,29,29,29,-75,-76,-60,-59,29,29,29,29,-73,29,29,29,-71,29,-69,29,29,-67,29,29,-72,29,-70,-68,29,-66,29,29,29,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,31,-86,-81,31,-63,31,-36,-46,-83,-84,-80,-85,-16,-61,31,31,-82,-62,31,31,31,31,-75,-76,-60,-59,31,31,31,31,-73,31,31,31,-71,31,-69,31,31,-67,31,31,-72,31,-70,-68,31,-66,31,31,31,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,124,126,170,172,189,196,199,206,211,212,213,214,215,224,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,301,302,303,304,305,309,310,311,313,315,316,317,318,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,32,-86,-81,32,-63,32,-36,-46,-83,-84,-80,-85,-16,-61,32,32,-82,-62,32,32,32,32,-75,-76,-60,-59,32,32,32,32,-73,32,32,32,-71,32,-69,32,32,-67,32,32,-72,32,-70,-68,32,-66,32,32,32,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,28,29,31,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,75,77,78,81,82,83,84,85,109,123,124,126,136,138,140,169,170,172,187,189,196,199,206,211,212,213,214,215,219,223,224,228,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,300,301,302,303,304,305,309,310,311,313,315,316,317,318,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,36,36,36,36,36,36,36,-2,36,-93,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-87,-88,36,36,36,36,36,36,-85,36,-86,36,36,36,36,-81,36,36,-63,36,-36,-46,-83,-84,-80,-85,-16,36,36,-61,36,36,36,-82,-62,36,36,36,36,-75,-76,-60,-59,36,36,36,36,-73,36,36,36,-71,36,-69,36,36,36,-67,36,36,-72,36,-70,-68,36,-66,36,36,36,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,28,29,31,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,75,77,78,81,82,83,84,85,109,123,124,126,136,138,140,169,170,172,187,189,196,199,206,211,212,213,214,215,219,223,224,228,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,300,301,302,303,304,305,309,310,311,313,315,316,317,318,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,37,37,37,37,37,37,37,-2,37,-93,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-87,-88,37,37,37,37,37,37,-85,37,-86,37,37,37,37,-81,37,37,-63,37,-36,-46,-83,-84,-80,-85,-16,37,37,-61,37,37,37,-82,-62,37,37,37,37,-75,-76,-60,-59,37,37,37,37,-73,37,37,37,-71,37,-69,37,37,37,-67,37,37,-72,37,-70,-68,37,-66,37,37,37,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,24,28,29,31,33,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,68,70,74,75,76,77,78,79,81,82,83,84,85,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,118,123,124,125,126,127,130,131,132,133,134,135,136,138,139,140,141,144,153,169,170,172,173,183,185,186,187,189,196,199,206,210,211,212,213,214,215,217,219,223,224,225,228,233,235,243,247,250,251,254,257,259,261,262,263,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,296,300,301,302,303,304,305,308,309,310,311,313,315,316,317,318,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-125,47,38,38,38,38,-124,38,38,38,-123,-2,38,-93,38,38,38,38,38,38,38,38,38,38,38,38,38,47,-125,47,38,47,-87,-88,47,38,38,38,38,38,47,47,-121,47,-109,-110,-111,-112,47,47,47,47,47,47,47,47,-128,38,-122,-85,38,47,-86,178,47,47,47,47,47,-104,38,38,-126,38,-127,47,-128,38,-81,38,-122,47,47,47,38,-63,38,-36,-46,47,-83,-84,-80,-85,-16,178,38,38,-61,47,38,38,38,-82,47,47,-62,47,38,38,38,38,-92,-75,-76,-60,-59,38,38,38,38,-73,38,38,38,-71,38,-69,38,-91,38,38,-67,38,38,-72,47,38,-70,-68,38,-66,38,38,38,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,23,24,28,29,31,33,36,37,38,39,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,68,69,70,74,75,76,77,78,79,81,82,83,84,85,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,112,113,118,122,123,124,125,126,130,131,132,133,134,135,136,138,139,140,141,144,146,153,169,170,172,173,183,185,186,187,189,196,199,204,206,210,211,212,213,214,215,219,223,224,225,228,233,235,238,243,247,250,251,254,257,259,261,262,263,269,271,272,274,276,278,280,281,282,283,288,290,291,292,293,294,295,296,300,301,302,303,304,305,308,309,310,311,313,315,316,317,318,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,44,58,67,24,75,24,24,-124,24,24,24,-123,-2,24,-93,24,24,24,24,24,24,24,24,24,24,24,24,24,114,58,67,44,58,24,58,-87,-88,58,24,24,24,24,24,58,58,-121,58,58,58,58,58,58,58,58,58,58,58,58,58,-128,24,147,148,-122,169,-85,24,58,-86,58,58,58,58,58,-104,24,24,-126,24,-127,58,191,-128,24,-81,24,-122,58,58,58,24,-63,24,-36,239,-46,58,-83,-84,-80,-85,-16,24,24,-61,58,24,24,24,266,-82,58,58,-62,58,24,24,24,24,-92,-75,-76,-60,-59,24,24,24,24,-73,24,300,24,24,-71,24,-69,24,-91,24,24,-67,24,24,-72,58,24,-70,-68,24,-66,24,24,24,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,28,29,31,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,75,77,78,81,82,83,84,85,109,123,124,126,127,136,138,140,169,170,172,178,187,189,196,199,206,211,212,213,214,215,217,219,223,224,228,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,300,301,302,303,304,305,309,310,311,313,315,316,317,318,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,39,39,39,39,39,39,39,-2,39,-93,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-87,-88,39,39,39,39,39,39,-85,39,-86,179,39,39,39,39,-81,39,220,39,-63,39,-36,-46,-83,-84,-80,-85,-16,179,39,39,-61,39,39,39,-82,-62,39,39,39,39,-75,-76,-60,-59,39,39,39,39,-73,39,39,39,-71,39,-69,39,39,39,-67,39,39,-72,39,-70,-68,39,-66,39,39,39,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,28,29,31,36,37,38,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,75,77,78,81,82,83,84,85,109,123,124,126,136,138,140,169,170,172,187,189,196,199,206,211,212,213,214,215,219,221,223,224,228,233,235,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,290,291,292,293,294,295,300,301,302,303,304,305,309,310,311,313,315,316,317,318,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,33,33,33,33,33,33,33,-2,33,-93,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-87,-88,33,33,33,33,33,33,-85,33,-86,33,33,33,33,-81,33,33,-63,33,-36,-46,-83,-84,-80,-85,-16,33,249,33,-61,33,33,33,-82,-62,33,33,33,33,-75,-76,-60,-59,33,33,33,33,-73,33,33,33,-71,33,-69,33,33,33,-67,33,33,-72,33,-70,-68,33,-66,33,33,33,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,23,24,25,26,28,29,31,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,65,67,75,77,78,80,81,82,83,84,85,108,109,111,114,119,121,123,124,126,136,137,138,140,145,147,148,151,152,160,162,169,170,172,182,187,188,189,191,195,196,199,201,203,206,208,211,212,213,214,215,219,223,224,228,232,233,235,237,239,243,251,253,256,257,258,259,261,262,264,266,269,271,272,274,275,276,278,280,281,282,283,290,291,292,293,294,295,299,300,301,302,303,304,305,306,309,310,311,313,315,316,317,318,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-65,60,66,70,71,72,70,70,70,70,70,70,90,-2,91,-64,70,-93,70,70,70,70,70,70,70,70,70,70,70,70,70,107,110,112,113,117,70,-87,-88,129,70,70,70,70,70,142,70,146,117,153,163,-85,17,-86,70,142,70,70,142,117,117,117,142,202,204,70,-81,17,222,70,142,-63,117,142,17,-36,236,238,-46,163,-83,-84,-80,-85,-16,17,70,-61,70,142,17,17,142,117,-82,-62,142,142,17,142,17,17,17,142,117,-75,-76,-60,-59,142,17,17,17,17,-73,17,17,17,-71,17,-69,17,142,70,17,-67,17,17,-72,142,17,-70,-68,17,-66,17,17,17,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,34,41,45,64,77,78,90,120,123,124,126,154,155,156,157,158,161,170,172,189,196,199,200,205,206,211,212,213,214,215,224,233,235,240,243,251,257,259,261,262,269,271,272,274,276,278,280,281,282,283,285,290,291,292,293,294,295,297,301,302,303,304,305,309,310,311,313,315,316,317,318,319,320,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,40,-57,-2,-93,-56,-87,-88,-58,40,-85,40,-86,40,-38,-39,-40,-41,40,-81,40,-63,40,-36,-37,40,-46,-83,-84,-80,-85,-16,-61,40,40,40,-82,-62,40,40,40,40,-75,-76,-60,-59,40,40,40,40,-73,40,-45,40,40,-71,40,-69,40,-44,40,-67,40,40,-72,40,-70,-68,40,-66,40,40,40,-43,-42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,41,45,77,78,123,126,170,189,199,206,211,212,213,214,215,224,243,251,269,271,272,274,282,292,294,302,305,310,311,315,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-93,-87,-88,-85,-86,-81,-63,-36,-46,-83,-84,-80,-85,-16,-61,-82,-62,-75,-76,-60,-59,-73,-71,-69,-67,-72,-70,-68,-66,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,17,33,39,41,45,70,77,78,80,86,89,94,95,96,97,98,99,100,101,102,103,104,105,107,118,121,123,126,127,128,129,130,131,132,133,134,135,139,141,153,154,155,156,157,158,163,164,165,166,167,168,170,172,174,175,176,189,199,200,206,207,208,209,211,212,213,214,215,216,217,218,222,224,235,240,241,243,244,245,247,248,251,261,263,268,269,271,272,274,278,280,282,283,285,290,292,294,295,296,297,302,303,304,305,309,310,311,314,315,317,318,319,320,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-125,-124,-123,-2,-93,-125,-87,-88,-79,-74,-121,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-128,-122,-132,-85,-86,-17,181,-78,-30,-31,-32,-33,-34,-104,-126,-127,-128,199,-38,-39,-40,-41,-55,206,-47,-48,-132,-50,-81,213,215,-132,-19,-63,-36,-37,-46,-49,-52,-53,-83,-84,-80,-85,-16,-18,-21,-22,-77,-61,263,268,-51,-82,-20,-23,-26,-25,-62,282,-92,-54,-75,-76,-60,-59,292,294,-73,296,-45,302,-71,-69,305,-91,-44,-67,310,311,-72,315,-70,-68,-24,-66,319,320,-43,-42,]),'SEMICOLON':([17,18,29,30,33,39,70,76,86,89,94,95,96,97,98,99,100,101,102,103,104,105,107,118,130,131,132,133,134,135,139,141,142,144,153,185,225,242,249,250,252,254,263,265,284,296,],[-125,45,77,78,-124,-123,-125,126,-74,-121,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-128,-122,-30,-31,-32,-33,-34,-104,-126,-127,-100,189,-128,224,251,269,271,272,-101,274,-92,285,297,-91,]),'PLUS':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,46,-124,-123,46,-125,46,46,46,46,46,-121,46,-109,-110,-111,-112,46,46,46,46,46,46,46,46,-128,-122,46,46,46,46,46,46,-104,-126,-127,46,-128,-122,46,46,46,46,46,46,46,46,-92,-91,46,]),'MULTIPLY':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,48,-124,-123,48,-125,48,48,48,48,48,-121,48,48,48,-111,-112,48,48,48,48,48,48,48,48,-128,-122,48,48,48,48,48,48,-104,-126,-127,48,-128,-122,48,48,48,48,48,48,48,48,-92,-91,48,]),'DIVIDE':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,49,-124,-123,49,-125,49,49,49,49,49,-121,49,49,49,-111,-112,49,49,49,49,49,49,49,49,-128,-122,49,49,49,49,49,49,-104,-126,-127,49,-128,-122,49,49,49,49,49,49,49,49,-92,-91,49,]),'LT':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,142,143,144,153,173,183,184,185,186,190,198,210,225,226,234,247,250,252,254,260,263,265,273,277,279,284,289,296,307,308,312,],[-125,50,-124,-123,50,-125,50,50,50,50,50,-121,50,-109,-110,-111,-112,-113,-114,-115,-116,50,50,50,50,-128,-122,50,50,50,50,50,50,-104,-126,-127,-100,188,50,-128,-122,50,188,50,50,188,188,50,50,188,188,50,50,-101,50,188,-92,188,188,188,188,188,188,-91,188,50,188,]),'GT':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,142,144,153,173,183,185,186,210,225,226,227,247,250,252,254,263,273,296,308,],[-125,51,-124,-123,51,-125,51,51,51,51,51,-121,51,-109,-110,-111,-112,-113,-114,-115,-116,51,51,51,51,-128,-122,51,51,51,51,51,51,-104,-126,-127,-100,51,-128,-122,51,51,51,51,51,-103,252,51,51,-101,51,-92,-102,-91,51,]),'LEQ':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,52,-124,-123,52,-125,52,52,52,52,52,-121,52,-109,-110,-111,-112,-113,-114,-115,-116,52,52,52,52,-128,-122,52,52,52,52,52,52,-104,-126,-127,52,-128,-122,52,52,52,52,52,52,52,52,-92,-91,52,]),'GEQ':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,53,-124,-123,53,-125,53,53,53,53,53,-121,53,-109,-110,-111,-112,-113,-114,-115,-116,53,53,53,53,-128,-122,53,53,53,53,53,53,-104,-126,-127,53,-128,-122,53,53,53,53,53,53,53,53,-92,-91,53,]),'EQ':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,54,-124,-123,54,-125,54,54,54,54,54,-121,54,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,54,54,-128,-122,54,54,54,54,54,54,-104,-126,-127,54,-128,-122,54,54,54,54,54,54,54,54,-92,-91,54,]),'NEQ':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,55,-124,-123,55,-125,55,55,55,55,55,-121,55,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,55,55,-128,-122,55,55,55,55,55,55,-104,-126,-127,55,-128,-122,55,55,55,55,55,55,55,55,-92,-91,55,]),'AND':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,56,-124,-123,56,-125,56,56,56,56,56,-121,56,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,56,-128,-122,56,56,56,56,56,56,-104,-126,-127,56,-128,-122,56,56,56,56,56,56,56,56,-92,-91,56,]),'OR':([17,18,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,247,250,254,263,296,308,],[-125,57,-124,-123,57,-125,57,57,57,57,57,-121,57,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-128,-122,57,57,57,57,57,57,-104,-126,-127,57,-128,-122,57,57,57,57,57,57,57,57,-92,-91,57,]),'DOT':([17,18,27,33,39,68,70,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,107,118,125,130,131,132,133,134,135,139,141,144,153,173,183,185,186,210,225,246,247,250,254,263,296,308,],[-125,59,73,-124,-123,119,-125,119,119,119,119,119,-121,119,119,119,119,119,119,119,119,119,119,119,119,119,-128,-122,119,119,119,119,119,119,-104,-126,-127,119,-128,-122,119,119,119,119,119,270,59,119,119,-92,-91,119,]),'COMMA':([17,33,37,39,44,58,67,70,80,86,87,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,114,115,116,117,118,128,129,130,131,132,133,134,135,136,139,141,142,147,148,149,151,153,163,167,168,175,176,183,186,191,192,193,197,198,222,226,227,229,239,241,244,245,247,248,252,263,266,267,268,273,286,296,314,],[-125,-124,-108,-123,-131,-131,-97,-125,-79,-74,136,-107,-121,140,-130,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,140,-128,-97,151,-96,-99,-122,182,-78,-30,-31,-32,-33,-34,-104,-106,-126,-127,-100,-97,-97,151,-95,-128,-55,208,-50,217,-19,-105,-129,-97,151,151,-94,-98,-77,-103,253,151,-97,-51,-20,-23,-26,-25,-101,-92,-97,151,-54,-102,151,-91,-24,]),'ASSIGN':([17,35,60,91,107,142,143,184,190,252,],[-89,81,109,138,-90,-100,187,223,228,-101,]),'PLUS_ASSIGN':([17,35,107,],[-89,82,-90,]),'MINUS_ASSIGN':([17,35,107,],[-89,83,-90,]),'MULTIPLY_ASSIGN':([17,35,107,],[-89,84,-90,]),'DIVIDE_ASSIGN':([17,35,107,],[-89,85,-90,]),'LBRACE':([32,33,39,70,71,72,74,79,86,89,94,95,96,97,98,99,100,101,102,103,104,105,118,135,139,141,142,150,153,163,171,173,194,230,231,234,252,255,260,263,277,279,289,296,307,312,],[80,-124,-123,-125,120,121,124,127,-74,-121,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-122,-104,-126,-127,-100,196,-128,205,124,-122,233,257,259,262,-101,276,281,-92,291,293,301,-91,313,316,]),'RPAREN':([33,39,44,58,67,68,70,86,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,114,115,116,117,118,125,135,139,141,142,147,148,149,151,153,186,191,192,193,197,198,210,229,239,252,263,266,267,286,296,308,],[-124,-123,-131,-131,-97,118,-125,-74,-121,139,-130,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,141,-97,150,-96,-99,-122,173,-104,-126,-127,-100,-97,-97,194,-95,-128,-129,-97,230,231,-94,-98,242,255,-97,-101,-92,-97,287,298,-91,314,]),'RBRACKET':([33,37,39,70,86,87,88,89,94,95,96,97,98,99,100,101,102,103,104,105,118,135,136,139,141,153,183,263,296,],[-124,-108,-123,-125,-74,135,-107,-121,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-122,-104,-106,-126,-127,-128,-105,-92,-91,]),'ARROW':([60,91,110,117,150,177,179,180,194,202,220,230,231,236,255,287,298,],[108,137,145,152,195,219,-28,-29,232,237,-27,256,258,264,275,299,306,]),'INFO':([73,270,],[122,288,]),'ELSE':([123,213,214,],[171,-80,171,]),'UNDERSCORE':([127,217,],[180,180,]),'FROM':([181,],[221,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,124,196,233,257,259,262,276,281,291,293,301,313,316,],[2,172,235,261,278,280,283,290,295,303,304,309,317,318,]),'statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[3,41,3,41,3,3,41,3,3,41,3,3,41,41,3,41,41,3,3,41,3,41,41,41,3,3,41,41,]),'variable_declaration':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'constant_declaration':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_declaration':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'enum_declaration':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'print_statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'if_statement':([0,2,124,171,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[10,10,10,211,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'return_statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'assignment':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'expression_statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'match_statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'import_statement':([0,2,124,172,196,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'expression':([0,2,24,28,29,31,36,37,38,44,46,47,48,49,50,51,52,53,54,55,56,57,58,75,81,82,83,84,85,109,124,136,138,140,169,172,187,196,219,223,228,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,300,301,303,304,309,313,316,317,318,],[18,18,68,74,76,79,86,88,89,93,94,95,96,97,98,99,100,101,102,103,104,105,93,125,130,131,132,133,134,144,18,183,185,186,210,18,225,18,247,250,254,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,308,18,18,18,18,18,18,18,18,]),'decorators':([0,2,120,124,154,172,196,205,233,235,240,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[21,21,161,21,161,21,21,161,21,21,161,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'assignment_expression':([0,2,124,172,196,219,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[30,30,30,30,30,248,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'decorator':([0,2,21,120,124,154,161,172,196,205,233,235,240,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[34,34,64,34,34,34,64,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'lvalue':([0,2,124,172,196,219,233,235,257,259,261,262,276,278,280,281,283,290,291,293,295,301,303,304,309,313,316,317,318,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'mut_opt':([16,],[42,]),'elements':([37,],[87,]),'arguments':([44,58,],[92,106,]),'parameters':([67,114,147,148,191,239,266,],[115,149,192,193,229,267,286,]),'parameter':([67,114,147,148,151,191,239,266,],[116,116,116,116,197,116,116,116,]),'block':([74,171,173,],[123,212,214,]),'import_items':([80,],[128,]),'type':([108,137,145,152,188,195,232,237,253,256,258,264,275,299,306,],[143,184,190,198,226,234,260,265,273,277,279,284,289,307,312,]),'struct_members':([120,205,],[154,240,]),'struct_member':([120,154,205,240,],[155,200,155,200,]),'mut_field_declaration':([120,154,205,240,],[156,156,156,156,]),'field_declaration':([120,154,205,240,],[157,157,157,157,]),'method_declaration':([120,154,205,240,],[158,158,158,158,]),'enum_variants_opt':([121,],[164,]),'enum_variants':([121,],[165,]),'empty':([121,167,175,],[166,209,218,]),'enum_variant_list':([121,],[167,]),'enum_variant':([121,208,],[168,241,]),'else_clause':([123,214,],[170,243,]),'match_arms':([127,],[174,]),'match_arm_list':([127,],[175,]),'match_arm':([127,217,],[176,244,]),'pattern':([127,217,],[177,177,]),'maybe_trailing_comma':([167,],[207,]),'maybe_comma':([175,],[216,]),'type_list':([188,],[227,]),'inline_statement':([219,],[245,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',28),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',33),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',38),
  ('statement -> variable_declaration','statement',1,'p_statement_declaration','parser.py',43),
  ('statement -> constant_declaration','statement',1,'p_statement_declaration','parser.py',44),
  ('statement -> function_declaration','statement',1,'p_statement_declaration','parser.py',45),
  ('statement -> struct_declaration','statement',1,'p_statement_declaration','parser.py',46),
  ('statement -> enum_declaration','statement',1,'p_statement_declaration','parser.py',47),
  ('statement -> print_statement','statement',1,'p_statement_declaration','parser.py',48),
  ('statement -> if_statement','statement',1,'p_statement_declaration','parser.py',49),
  ('statement -> return_statement','statement',1,'p_statement_declaration','parser.py',50),
  ('statement -> assignment','statement',1,'p_statement_declaration','parser.py',51),
  ('statement -> expression_statement','statement',1,'p_statement_declaration','parser.py',52),
  ('statement -> match_statement','statement',1,'p_statement_declaration','parser.py',53),
  ('statement -> import_statement','statement',1,'p_statement_declaration','parser.py',54),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',59),
  ('match_arms -> <empty>','match_arms',0,'p_match_arms','parser.py',65),
  ('match_arms -> match_arm_list maybe_comma','match_arms',2,'p_match_arms','parser.py',66),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list_single','parser.py',80),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list_multiple','parser.py',85),
  ('maybe_comma -> COMMA','maybe_comma',1,'p_maybe_comma','parser.py',90),
  ('maybe_comma -> empty','maybe_comma',1,'p_maybe_comma','parser.py',91),
  ('match_arm -> pattern ARROW inline_statement','match_arm',3,'p_match_arm','parser.py',98),
  ('inline_statement -> PRINT DOT INFO LPAREN expression RPAREN','inline_statement',6,'p_inline_statement_print','parser.py',103),
  ('inline_statement -> assignment_expression','inline_statement',1,'p_inline_statement_assignment','parser.py',108),
  ('inline_statement -> expression','inline_statement',1,'p_inline_statement_expression','parser.py',115),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_negative_number','parser.py',120),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',125),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',130),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',135),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',136),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',137),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',138),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',139),
  ('type_alias_declaration -> TYPE IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',163),
  ('struct_declaration -> STRUCT IDENTIFIER LBRACE struct_members RBRACE','struct_declaration',5,'p_struct_declaration','parser.py',170),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members_multiple','parser.py',175),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members_single','parser.py',180),
  ('struct_member -> mut_field_declaration','struct_member',1,'p_struct_member','parser.py',185),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',186),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',187),
  ('method_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',11,'p_method_declaration_with_decorators','parser.py',194),
  ('method_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',10,'p_method_declaration_without_decorators','parser.py',205),
  ('mut_field_declaration -> MUT LET IDENTIFIER ARROW type SEMICOLON','mut_field_declaration',6,'p_mut_field_declaration','parser.py',217),
  ('field_declaration -> LET IDENTIFIER ARROW type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',222),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',229),
  ('enum_variants_opt -> enum_variants','enum_variants_opt',1,'p_enum_variants_opt','parser.py',236),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',237),
  ('enum_variants -> enum_variant_list maybe_trailing_comma','enum_variants',2,'p_enum_variants','parser.py',245),
  ('enum_variant_list -> enum_variant','enum_variant_list',1,'p_enum_variant_list_single','parser.py',254),
  ('enum_variant_list -> enum_variant_list COMMA enum_variant','enum_variant_list',3,'p_enum_variant_list_multiple','parser.py',259),
  ('maybe_trailing_comma -> COMMA','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',266),
  ('maybe_trailing_comma -> empty','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',267),
  ('enum_variant -> IDENTIFIER LBRACE struct_members RBRACE','enum_variant',4,'p_enum_variant_with_fields','parser.py',273),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant_without_fields','parser.py',278),
  ('decorators -> decorators decorator','decorators',2,'p_decorators_multiple','parser.py',286),
  ('decorators -> decorator','decorators',1,'p_decorators_single','parser.py',291),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',296),
  ('constant_declaration -> CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLON','constant_declaration',8,'p_constant_declaration','parser.py',303),
  ('variable_declaration -> LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',8,'p_variable_declaration_let_with_type','parser.py',310),
  ('variable_declaration -> LET mut_opt IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let_without_type','parser.py',321),
  ('variable_declaration -> MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration_mut_with_type','parser.py',332),
  ('variable_declaration -> MUT IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration_mut_without_type','parser.py',343),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt_mut','parser.py',354),
  ('mut_opt -> <empty>','mut_opt',0,'p_mut_opt_empty','parser.py',359),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',12,'p_function_declaration_async_with_decorators','parser.py',367),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_async_with_decorators_no_return','parser.py',379),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_async_without_decorators','parser.py',391),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_async_without_decorators_no_return','parser.py',403),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_with_decorators','parser.py',417),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_with_decorators_no_return','parser.py',429),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_without_decorators','parser.py',441),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',8,'p_function_declaration_without_decorators_no_return','parser.py',453),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',465),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',473),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',480),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items_multiple','parser.py',485),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items_single','parser.py',490),
  ('import_items -> <empty>','import_items',0,'p_import_items_empty','parser.py',495),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',502),
  ('if_statement -> IF expression block else_clause','if_statement',4,'p_if_statement_no_parens','parser.py',507),
  ('if_statement -> IF LPAREN expression RPAREN block else_clause','if_statement',6,'p_if_statement_with_parens','parser.py',514),
  ('else_clause -> ELSE if_statement','else_clause',2,'p_else_clause_if','parser.py',521),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause_block','parser.py',529),
  ('else_clause -> <empty>','else_clause',0,'p_else_clause_empty','parser.py',536),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',545),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',546),
  ('assignment -> assignment_expression SEMICOLON','assignment',2,'p_assignment','parser.py',556),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue_identifier','parser.py',561),
  ('lvalue -> expression DOT IDENTIFIER','lvalue',3,'p_lvalue_member_access','parser.py',566),
  ('expression -> FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','expression',9,'p_expression_lambda','parser.py',573),
  ('expression -> FN LPAREN parameters RPAREN LBRACE statements RBRACE','expression',7,'p_expression_lambda_no_return','parser.py',579),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',585),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',592),
  ('parameters -> parameters COMMA','parameters',2,'p_parameters_multiple','parser.py',593),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',601),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','parser.py',606),
  ('parameter -> IDENTIFIER ARROW type','parameter',3,'p_parameter_with_type','parser.py',611),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter_without_type','parser.py',618),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',625),
  ('type -> type LT type_list GT','type',4,'p_type','parser.py',626),
  ('type_list -> type_list COMMA type','type_list',3,'p_type_list_multiple','parser.py',634),
  ('type_list -> type','type_list',1,'p_type_list_single','parser.py',639),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',646),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',651),
  ('elements -> elements COMMA','elements',2,'p_elements_multiple','parser.py',652),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',660),
  ('elements -> <empty>','elements',0,'p_elements_empty','parser.py',665),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',670),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',671),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',672),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',673),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',674),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',675),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',676),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',677),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',678),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',679),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',680),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',681),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',686),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',691),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',696),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',701),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',706),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',711),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',712),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_member_access','parser.py',723),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments_multiple','parser.py',728),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',733),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parser.py',738),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',743),
]
