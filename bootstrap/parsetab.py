
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTrightARROWrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT CATCH COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FINALLY FN FOR FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TEST THROW TRY UNDERSCORE WHILEprogram : statementsstatements : statements statementstatements : statementempty :statement : print_statement\n| throw_statement\n| variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| interface_declaration\n| enum_declaration\n| match_statement\n| if_statement\n| return_statement\n| expression_statement\n| assignment_identifier\n| assignment_member\n| import_statement\n| type_alias_declaration\n| try_finally\n| try_catch_finally\n| while_loop\n| for_loop\n| test_declarationprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONthrow_statement : THROW expression SEMICOLONvariable_declaration : LET IDENTIFIER type_opt ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER type_opt ASSIGN expression SEMICOLONmut_opt : MUT\n| emptytype_opt : COLON type\n| emptyconstant_declaration : CONST IDENTIFIER type_opt ASSIGN expression SEMICOLONtype_alias_declaration : IDENTIFIER IDENTIFIER ASSIGN type SEMICOLONopt_return_type : ARROW type\n| emptyfunction_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockfunction_declaration : decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockdecorators_opt : decorators\n| emptydecorators : decorators decorator\n| decoratordecorator : AT IDENTIFIERstruct_declaration : STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACEimplements_opt : IMPLEMENTS interface_list\n| emptyinterface_list : interface_list COMMA IDENTIFIER\n| IDENTIFIERstruct_members : struct_members struct_member\n| struct_memberstruct_member : field_declaration\n| method_declarationfield_declaration : mut_opt IDENTIFIER COLON type SEMICOLONmethod_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockinterface_declaration : INTERFACE IDENTIFIER COLON LBRACE interface_members RBRACEinterface_members : interface_members interface_method\n| interface_methodinterface_method : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants optional_comma\n| emptyenum_variants : enum_variants COMMA enum_variant\n| enum_variantenum_variant : IDENTIFIER\n| IDENTIFIER LBRACE enum_fields RBRACEenum_fields : enum_fields COMMA field_declaration\n| field_declarationoptional_comma : COMMA\n| emptyexpression : LBRACKET array_elements RBRACKETarray_elements : array_elements COMMA expressionarray_elements : expressionarray_elements : emptywhile_loop : WHILE expression blockfor_loop : FOR IDENTIFIER IN expression blockmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arms match_arm\n| match_armmatch_arm : pattern ARROW blockpattern : NUMBER\n| MINUS NUMBERpattern : UNDERSCOREif_statement : IF expression block else_optelse_opt : ELSE if_statement\n| ELSE block\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment_identifier : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONassignment_member : expression DOT IDENTIFIER ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : AWAIT expressionexpression : expression DOT DOT expressionimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIER\n| IDENTIFIERexpression : LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPARENlambda_parameters : lambda_parameters COMMA lambda_parameterlambda_parameters : lambda_parameterlambda_parameter : IDENTIFIER COLON typeopt_lambda_return : ARROW type\n| emptytry_finally : TRY block FINALLY blocktry_catch_finally : TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block\n| TRY block CATCH LPAREN IDENTIFIER RPAREN blockparameters : parameters COMMA parameterparameters : parameterparameters : emptyparameter : IDENTIFIER COLON type default_optdefault_opt : ASSIGN expression\n| emptyblock : LBRACE statements RBRACEtype : IDENTIFIERtest_declaration : TEST STRING blockprimary_expression : IDENTIFIER\n| NUMBER\n| STRING\n| LPAREN expression RPARENpostfix_expression : primary_expression\n| postfix_expression LPAREN arguments RPAREN\n| postfix_expression DOT IDENTIFIERunary_expression : MINUS unary_expression %prec UMINUS\n| NOT unary_expression\n| postfix_expressionexpression : unary_expression\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionarguments : arguments COMMA expression\n| expression\n| empty'
    
_lr_action_items = {end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,95,131,151,152,158,160,181,182,183,184,185,205,207,210,212,227,248,252,256,257,261,269,270,271,272,273,274,275,276,281,286,296,310,311,316,325,329,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-101,-90,-27,-4,-89,-76,-124,-91,-92,-93,-94,-95,-85,-88,-113,-122,-35,-61,-78,-86,-87,-77,-96,-97,-98,-99,-100,-28,-29,-34,-45,-56,-26,-104,-115,-38,-39,-114,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,95,131,149,151,152,153,154,157,158,160,181,182,183,184,185,194,195,196,197,198,199,200,205,207,210,212,227,235,236,237,238,244,245,248,249,250,251,252,253,256,257,259,261,269,270,271,272,273,274,275,276,281,282,286,287,289,290,292,293,296,308,310,311,316,322,325,326,329,332,335,336,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-101,-90,-27,-4,-4,-89,208,-106,212,-76,-124,-91,-92,-93,-94,-95,-66,248,-4,-63,-65,252,-80,-85,-88,-113,-122,-35,281,-51,-52,-53,286,-58,-61,-62,-70,-71,-78,-79,-86,-87,-105,-77,-96,-97,-98,-99,-100,-28,-29,-34,-45,-50,-56,-57,308,-69,-64,-81,-26,-67,-104,-115,-38,-68,-39,-54,-114,-60,-55,-59,]),'DOT':([25,27,30,41,50,54,56,57,61,62,64,77,92,93,94,99,104,106,107,109,115,116,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[59,64,-125,-127,-135,111,-129,-126,116,-125,117,116,116,116,116,116,116,116,-132,-133,-128,117,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-72,116,-131,-103,116,116,-130,116,116,116,116,116,116,116,116,116,116,-107,116,]),'SEMICOLON':([27,30,39,41,50,54,56,57,62,77,94,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,166,171,179,180,215,221,222,223,224,225,226,228,229,263,294,312,319,328,334,],[63,-125,95,-127,-135,-134,-129,-126,-125,131,152,-102,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,181,182,183,184,185,-72,-131,-103,-123,227,-130,269,270,271,272,273,274,275,276,296,310,-107,326,332,336,]),'PLUS':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[65,-125,-127,-135,-134,-129,-126,65,-125,65,65,65,65,65,65,65,-132,-133,-128,-136,-137,-138,-139,65,65,65,65,65,65,65,65,65,65,65,65,65,-72,65,-131,-103,65,65,-130,65,65,65,65,65,65,65,65,65,65,-107,65,]),'MULTIPLY':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[67,-125,-127,-135,-134,-129,-126,67,-125,67,67,67,67,67,67,67,-132,-133,-128,67,67,-138,-139,67,67,67,67,67,67,67,67,67,67,67,67,67,-72,67,-131,-103,67,67,-130,67,67,67,67,67,67,67,67,67,67,-107,67,]),'DIVIDE':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[68,-125,-127,-135,-134,-129,-126,68,-125,68,68,68,68,68,68,68,-132,-133,-128,68,68,-138,-139,68,68,68,68,68,68,68,68,68,68,68,68,68,-72,68,-131,-103,68,68,-130,68,68,68,68,68,68,68,68,68,68,-107,68,]),'LT':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[69,-125,-127,-135,-134,-129,-126,69,-125,69,69,69,69,69,69,69,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,69,69,69,69,69,69,69,69,69,-72,69,-131,-103,69,69,-130,69,69,69,69,69,69,69,69,69,69,-107,69,]),'GT':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[70,-125,-127,-135,-134,-129,-126,70,-125,70,70,70,70,70,70,70,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,70,70,70,70,70,70,70,70,70,-72,70,-131,-103,70,70,-130,70,70,70,70,70,70,70,70,70,70,-107,70,]),'LEQ':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[71,-125,-127,-135,-134,-129,-126,71,-125,71,71,71,71,71,71,71,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,71,71,71,71,71,71,71,71,71,-72,71,-131,-103,71,71,-130,71,71,71,71,71,71,71,71,71,71,-107,71,]),'GEQ':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[72,-125,-127,-135,-134,-129,-126,72,-125,72,72,72,72,72,72,72,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,72,72,72,72,72,72,72,72,72,-72,72,-131,-103,72,72,-130,72,72,72,72,72,72,72,72,72,72,-107,72,]),'EQ':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[73,-125,-127,-135,-134,-129,-126,73,-125,73,73,73,73,73,73,73,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,73,73,73,73,73,73,73,-72,73,-131,-103,73,73,-130,73,73,73,73,73,73,73,73,73,73,-107,73,]),'NEQ':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[74,-125,-127,-135,-134,-129,-126,74,-125,74,74,74,74,74,74,74,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,74,74,74,74,74,74,74,-72,74,-131,-103,74,74,-130,74,74,74,74,74,74,74,74,74,74,-107,74,]),'AND':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[75,-125,-127,-135,-134,-129,-126,75,-125,75,75,75,75,75,75,75,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,75,75,75,75,75,75,-72,75,-131,-103,75,75,-130,75,75,75,75,75,75,75,75,75,75,-107,75,]),'OR':([27,30,41,50,54,56,57,61,62,77,92,93,94,99,104,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,161,164,166,171,213,214,215,217,221,222,223,224,225,226,228,229,262,312,324,],[76,-125,-127,-135,-134,-129,-126,76,-125,76,76,76,76,76,76,76,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,76,76,76,76,76,-72,76,-131,-103,76,76,-130,76,76,76,76,76,76,76,76,76,76,-107,76,]),'ASSIGN':([30,78,79,85,86,118,132,134,141,142,178,179,299,],[80,-4,135,-4,-4,172,177,-33,186,187,-32,-123,314,]),'PLUS_ASSIGN':([30,118,],[81,173,]),'MINUS_ASSIGN':([30,118,],[82,174,]),'MULTIPLY_ASSIGN':([30,118,],[83,175,]),'DIVIDE_ASSIGN':([30,118,],[84,176,]),'LBRACE':([40,41,42,50,54,56,57,62,89,91,92,93,99,101,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,145,147,148,155,161,166,171,179,191,192,194,206,213,215,218,254,264,266,278,285,295,298,300,302,304,312,317,318,323,330,333,],[96,-127,98,-135,-134,-129,-126,-125,-4,149,150,98,98,98,-102,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,190,-47,193,98,-72,-131,-103,-123,-46,-49,247,98,98,-130,-4,98,98,-112,-4,-48,98,-111,98,-37,-4,-107,-36,98,98,-4,98,]),'RPAREN':([41,50,54,56,57,61,62,106,107,109,110,115,119,120,121,122,123,124,125,126,127,128,129,130,161,163,164,165,166,168,169,171,179,188,212,215,217,231,232,233,234,260,262,267,268,280,297,299,303,307,312,313,315,320,321,324,327,],[-127,-135,-134,-129,-126,115,-125,-102,-132,-133,-4,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-72,215,-149,-150,-131,218,-109,-103,-123,-4,-122,-130,263,278,-117,-118,-4,295,-148,-108,-110,304,312,-4,-116,-4,-107,-119,-121,-4,328,-120,330,]),'RBRACKET':([41,48,50,54,56,57,62,103,104,105,106,107,109,115,119,120,121,122,123,124,125,126,127,128,129,130,161,166,171,214,215,312,],[-127,-4,-135,-134,-129,-126,-125,161,-74,-75,-102,-132,-133,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-72,-131,-103,-73,-130,-107,]),'COMMA':([41,48,50,54,56,57,62,103,104,105,106,107,109,110,115,119,120,121,122,123,124,125,126,127,128,129,130,153,154,161,163,164,165,166,168,169,171,179,188,191,192,194,196,198,214,215,231,232,233,234,259,262,267,268,280,285,289,290,292,299,303,307,308,312,313,315,320,321,322,324,326,327,],[-127,-4,-135,-134,-129,-126,-125,162,-74,-75,-102,-132,-133,-4,-128,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,209,-106,-72,216,-149,-150,-131,219,-109,-103,-123,-4,243,-49,-66,250,-65,-73,-130,279,-117,-118,-4,-105,-148,-108,-110,279,-48,309,-69,-64,-4,-116,-4,-67,-107,-119,-121,-4,279,-68,-120,-54,279,]),'INFO':([59,],[113,]),'COLON':([78,85,86,90,170,230,283,],[133,133,133,148,220,277,305,]),'IMPLEMENTS':([89,],[146,]),'FINALLY':([97,212,311,],[155,-122,323,]),'CATCH':([97,212,],[156,-122,]),'IN':([100,],[159,]),'UNDERSCORE':([150,199,200,212,253,293,],[204,204,-80,-122,-79,-81,]),'ELSE':([151,212,],[206,-122,]),'ARROW':([201,202,204,218,255,278,304,328,330,],[254,-82,-84,265,-83,301,301,331,301,]),'FROM':([208,],[258,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,98,],[2,157,]),'statement':([0,2,98,157,],[3,58,3,58,]),'print_statement':([0,2,98,157,],[4,4,4,4,]),'throw_statement':([0,2,98,157,],[5,5,5,5,]),'variable_declaration':([0,2,98,157,],[6,6,6,6,]),'constant_declaration':([0,2,98,157,],[7,7,7,7,]),'function_declaration':([0,2,98,157,],[8,8,8,8,]),'struct_declaration':([0,2,98,157,],[9,9,9,9,]),'interface_declaration':([0,2,98,157,],[10,10,10,10,]),'enum_declaration':([0,2,98,157,],[11,11,11,11,]),'match_statement':([0,2,98,157,],[12,12,12,12,]),'if_statement':([0,2,98,157,206,],[13,13,13,13,256,]),'return_statement':([0,2,98,157,],[14,14,14,14,]),'expression_statement':([0,2,98,157,],[15,15,15,15,]),'assignment_identifier':([0,2,98,157,],[16,16,16,16,]),'assignment_member':([0,2,98,157,],[17,17,17,17,]),'import_statement':([0,2,98,157,],[18,18,18,18,]),'type_alias_declaration':([0,2,98,157,],[19,19,19,19,]),'try_finally':([0,2,98,157,],[20,20,20,20,]),'try_catch_finally':([0,2,98,157,],[21,21,21,21,]),'while_loop':([0,2,98,157,],[22,22,22,22,]),'for_loop':([0,2,98,157,],[23,23,23,23,]),'test_declaration':([0,2,98,157,],[24,24,24,24,]),'expression':([0,2,26,28,37,38,39,43,48,49,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,98,108,110,117,157,159,162,167,172,173,174,175,176,177,186,187,216,314,],[27,27,61,77,92,93,94,99,104,106,119,120,121,122,123,124,125,126,127,128,129,130,136,137,138,139,140,27,61,164,171,27,213,214,217,221,222,223,224,225,226,228,229,262,324,]),'decorators_opt':([0,2,98,157,190,235,],[33,33,33,33,240,240,]),'decorators':([0,2,98,157,190,235,],[46,46,46,46,46,46,]),'empty':([0,2,48,78,85,86,89,98,110,149,151,157,188,190,196,218,234,235,247,278,299,304,307,309,320,330,],[47,47,105,134,134,134,147,47,165,197,207,47,233,242,251,266,233,242,291,302,315,302,233,291,233,302,]),'unary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,98,108,110,117,157,159,162,167,172,173,174,175,176,177,186,187,216,314,],[50,50,50,50,50,50,50,50,50,50,107,109,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'decorator':([0,2,46,98,157,190,235,],[52,52,102,52,52,52,52,]),'postfix_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,98,108,110,117,157,159,162,167,172,173,174,175,176,177,186,187,216,314,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'primary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,98,108,110,117,157,159,162,167,172,173,174,175,176,177,186,187,216,314,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'block':([42,93,99,101,155,206,213,254,264,295,300,318,323,333,],[97,151,158,160,210,257,261,293,297,311,316,325,329,335,]),'array_elements':([48,],[103,]),'type_opt':([78,85,86,],[132,141,142,]),'implements_opt':([89,],[145,]),'import_items':([96,],[153,]),'arguments':([110,],[163,]),'lambda_parameters':([114,],[168,]),'lambda_parameter':([114,219,],[169,267,]),'type':([133,135,220,265,277,301,305,331,],[178,180,268,298,299,317,319,334,]),'interface_list':([146,],[191,]),'enum_variants_opt':([149,],[195,]),'enum_variants':([149,],[196,]),'enum_variant':([149,250,],[198,292,]),'match_arms':([150,],[199,]),'match_arm':([150,199,],[200,253,]),'pattern':([150,199,],[201,201,]),'else_opt':([151,],[205,]),'parameters':([188,234,307,320,],[231,280,321,327,]),'parameter':([188,234,279,307,320,],[232,232,303,232,232,]),'struct_members':([190,],[235,]),'struct_member':([190,235,],[236,282,]),'field_declaration':([190,235,247,309,],[237,237,290,322,]),'method_declaration':([190,235,],[238,238,]),'mut_opt':([190,235,247,309,],[239,239,239,239,]),'interface_members':([193,],[244,]),'interface_method':([193,244,],[245,287,]),'optional_comma':([196,],[249,]),'opt_lambda_return':([218,],[264,]),'enum_fields':([247,],[289,]),'opt_return_type':([278,304,330,],[300,318,333,]),'default_opt':([299,],[313,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',25),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',32),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',37),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',44),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',51),
  ('statement -> throw_statement','statement',1,'p_statement','parser.py',52),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',53),
  ('statement -> constant_declaration','statement',1,'p_statement','parser.py',54),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',55),
  ('statement -> struct_declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> interface_declaration','statement',1,'p_statement','parser.py',57),
  ('statement -> enum_declaration','statement',1,'p_statement','parser.py',58),
  ('statement -> match_statement','statement',1,'p_statement','parser.py',59),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',60),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',61),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',62),
  ('statement -> assignment_identifier','statement',1,'p_statement','parser.py',63),
  ('statement -> assignment_member','statement',1,'p_statement','parser.py',64),
  ('statement -> import_statement','statement',1,'p_statement','parser.py',65),
  ('statement -> type_alias_declaration','statement',1,'p_statement','parser.py',66),
  ('statement -> try_finally','statement',1,'p_statement','parser.py',67),
  ('statement -> try_catch_finally','statement',1,'p_statement','parser.py',68),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',69),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',70),
  ('statement -> test_declaration','statement',1,'p_statement','parser.py',71),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',78),
  ('throw_statement -> THROW expression SEMICOLON','throw_statement',3,'p_throw_statement','parser.py',85),
  ('variable_declaration -> LET IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let','parser.py',94),
  ('variable_declaration -> MUT IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_mut','parser.py',100),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt','parser.py',106),
  ('mut_opt -> empty','mut_opt',1,'p_mut_opt','parser.py',107),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','parser.py',114),
  ('type_opt -> empty','type_opt',1,'p_type_opt','parser.py',115),
  ('constant_declaration -> CONST IDENTIFIER type_opt ASSIGN expression SEMICOLON','constant_declaration',6,'p_constant_declaration','parser.py',122),
  ('type_alias_declaration -> IDENTIFIER IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',132),
  ('opt_return_type -> ARROW type','opt_return_type',2,'p_opt_return_type','parser.py',141),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','parser.py',142),
  ('function_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',8,'p_function_declaration','parser.py',150),
  ('function_declaration -> decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',9,'p_function_declaration_async','parser.py',162),
  ('decorators_opt -> decorators','decorators_opt',1,'p_decorators_opt','parser.py',174),
  ('decorators_opt -> empty','decorators_opt',1,'p_decorators_opt','parser.py',175),
  ('decorators -> decorators decorator','decorators',2,'p_decorators','parser.py',180),
  ('decorators -> decorator','decorators',1,'p_decorators','parser.py',181),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',189),
  ('struct_declaration -> STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',196),
  ('implements_opt -> IMPLEMENTS interface_list','implements_opt',2,'p_implements_opt','parser.py',204),
  ('implements_opt -> empty','implements_opt',1,'p_implements_opt','parser.py',205),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list','parser.py',210),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list','parser.py',211),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members','parser.py',219),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members','parser.py',220),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',228),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',229),
  ('field_declaration -> mut_opt IDENTIFIER COLON type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',238),
  ('method_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','method_declaration',8,'p_method_declaration','parser.py',250),
  ('interface_declaration -> INTERFACE IDENTIFIER COLON LBRACE interface_members RBRACE','interface_declaration',6,'p_interface_declaration','parser.py',268),
  ('interface_members -> interface_members interface_method','interface_members',2,'p_interface_members','parser.py',275),
  ('interface_members -> interface_method','interface_members',1,'p_interface_members','parser.py',276),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_method',8,'p_interface_method','parser.py',284),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_method',6,'p_interface_method','parser.py',285),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',298),
  ('enum_variants_opt -> enum_variants optional_comma','enum_variants_opt',2,'p_enum_variants_opt','parser.py',305),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',306),
  ('enum_variants -> enum_variants COMMA enum_variant','enum_variants',3,'p_enum_variants','parser.py',311),
  ('enum_variants -> enum_variant','enum_variants',1,'p_enum_variants','parser.py',312),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant','parser.py',320),
  ('enum_variant -> IDENTIFIER LBRACE enum_fields RBRACE','enum_variant',4,'p_enum_variant','parser.py',321),
  ('enum_fields -> enum_fields COMMA field_declaration','enum_fields',3,'p_enum_fields','parser.py',332),
  ('enum_fields -> field_declaration','enum_fields',1,'p_enum_fields','parser.py',333),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_comma','parser.py',341),
  ('optional_comma -> empty','optional_comma',1,'p_optional_comma','parser.py',342),
  ('expression -> LBRACKET array_elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',349),
  ('array_elements -> array_elements COMMA expression','array_elements',3,'p_array_elements_multiple','parser.py',354),
  ('array_elements -> expression','array_elements',1,'p_array_elements_single','parser.py',359),
  ('array_elements -> empty','array_elements',1,'p_array_elements_empty','parser.py',364),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','parser.py',371),
  ('for_loop -> FOR IDENTIFIER IN expression block','for_loop',5,'p_for_loop','parser.py',378),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',385),
  ('match_arms -> match_arms match_arm','match_arms',2,'p_match_arms','parser.py',392),
  ('match_arms -> match_arm','match_arms',1,'p_match_arms','parser.py',393),
  ('match_arm -> pattern ARROW block','match_arm',3,'p_match_arm','parser.py',401),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',408),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_number','parser.py',409),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',418),
  ('if_statement -> IF expression block else_opt','if_statement',4,'p_if_statement','parser.py',425),
  ('else_opt -> ELSE if_statement','else_opt',2,'p_else_opt','parser.py',434),
  ('else_opt -> ELSE block','else_opt',2,'p_else_opt','parser.py',435),
  ('else_opt -> empty','else_opt',1,'p_else_opt','parser.py',436),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',448),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',449),
  ('assignment_identifier -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',459),
  ('assignment_identifier -> IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',460),
  ('assignment_identifier -> IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',461),
  ('assignment_identifier -> IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',462),
  ('assignment_identifier -> IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',463),
  ('assignment_member -> expression DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',476),
  ('assignment_member -> expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',477),
  ('assignment_member -> expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',478),
  ('assignment_member -> expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',479),
  ('assignment_member -> expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',480),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',495),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',500),
  ('expression -> expression DOT DOT expression','expression',4,'p_expression_range','parser.py',505),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',512),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items','parser.py',519),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items','parser.py',520),
  ('expression -> LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPAREN','expression',8,'p_expression_lambda','parser.py',532),
  ('lambda_parameters -> lambda_parameters COMMA lambda_parameter','lambda_parameters',3,'p_lambda_parameters_multiple','parser.py',537),
  ('lambda_parameters -> lambda_parameter','lambda_parameters',1,'p_lambda_parameters_single','parser.py',542),
  ('lambda_parameter -> IDENTIFIER COLON type','lambda_parameter',3,'p_lambda_parameter','parser.py',549),
  ('opt_lambda_return -> ARROW type','opt_lambda_return',2,'p_opt_lambda_return','parser.py',554),
  ('opt_lambda_return -> empty','opt_lambda_return',1,'p_opt_lambda_return','parser.py',555),
  ('try_finally -> TRY block FINALLY block','try_finally',4,'p_try_finally','parser.py',562),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block','try_catch_finally',9,'p_try_catch_finally','parser.py',567),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block','try_catch_finally',7,'p_try_catch_finally','parser.py',568),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',595),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',600),
  ('parameters -> empty','parameters',1,'p_parameters_empty','parser.py',605),
  ('parameter -> IDENTIFIER COLON type default_opt','parameter',4,'p_parameter','parser.py',612),
  ('default_opt -> ASSIGN expression','default_opt',2,'p_default_opt','parser.py',620),
  ('default_opt -> empty','default_opt',1,'p_default_opt','parser.py',621),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',628),
  ('type -> IDENTIFIER','type',1,'p_type_identifier','parser.py',635),
  ('test_declaration -> TEST STRING block','test_declaration',3,'p_test_declaration','parser.py',642),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','parser.py',651),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',652),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',653),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',654),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',667),
  ('postfix_expression -> postfix_expression LPAREN arguments RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',668),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',669),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',679),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','parser.py',680),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',681),
  ('expression -> unary_expression','expression',1,'p_expression','parser.py',692),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',693),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',694),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',695),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',696),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',697),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',698),
  ('expression -> expression LEQ expression','expression',3,'p_expression','parser.py',699),
  ('expression -> expression GEQ expression','expression',3,'p_expression','parser.py',700),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',701),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',702),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',703),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',704),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',714),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',715),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',716),
]
