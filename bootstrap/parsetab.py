
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTleftLPARENRPARENrightUMINUSAMPERSAND AND ARROW ASSIGN ASYNC AT AWAIT COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FALSE FN FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NULL NUMBER OR PIPE PLUS PLUS_ASSIGN PRINT QUESTION_MARK RBRACE RBRACKET RETURN ROUTINE RPAREN SEMICOLON STRING STRUCT TRUE TYPE UNDERSCOREprogram : statementsstatements : statements statementstatements : statementstatement : variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| enum_declaration\n| print_statement\n| if_statement\n| return_statement\n| assignment\n| expression_statement\n| match_statement \n| import_statementmatch_statement : MATCH expression LBRACE match_arms RBRACE\nmatch_arms :\n           | match_arm_list maybe_comma\nmatch_arm_list : match_armmatch_arm_list : match_arm_list COMMA match_armmaybe_comma : COMMA\n| empty\nmatch_arm : pattern ARROW inline_statementinline_statement : PRINT DOT INFO LPAREN expression RPARENinline_statement : assignment_expressioninline_statement : expressionpattern : MINUS NUMBERpattern : NUMBERpattern : UNDERSCOREassignment_expression : lvalue ASSIGN expression\n| lvalue PLUS_ASSIGN expression\n| lvalue MINUS_ASSIGN expression\n| lvalue MULTIPLY_ASSIGN expression\n| lvalue DIVIDE_ASSIGN expressiontype_alias_declaration : TYPE IDENTIFIER ASSIGN type SEMICOLONstruct_declaration : STRUCT IDENTIFIER LBRACE struct_members RBRACEstruct_members : struct_members struct_memberstruct_members : struct_memberstruct_member : mut_field_declaration\n| field_declaration\n| method_declarationmethod_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmethod_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmut_field_declaration : MUT LET IDENTIFIER ARROW type SEMICOLONfield_declaration : LET IDENTIFIER ARROW type SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants\n| emptyenum_variants : enum_variant_list maybe_trailing_commaenum_variant_list : enum_variantenum_variant_list : enum_variant_list COMMA enum_variantmaybe_trailing_comma : COMMA\n| empty\nenum_variant : IDENTIFIER LBRACE struct_members RBRACEenum_variant : IDENTIFIERdecorators : decorators decoratordecorators : decoratordecorator : AT IDENTIFIERconstant_declaration : CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ASSIGN expression SEMICOLONmut_opt : MUTmut_opt : function_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIERimport_items : IDENTIFIERimport_items : block : LBRACE statements RBRACEif_statement : IF expression block else_clauseif_statement : IF LPAREN expression RPAREN block else_clauseelse_clause : ELSE if_statementelse_clause : ELSE blockelse_clause :return_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment : assignment_expression SEMICOLONlvalue : IDENTIFIERlvalue : expression DOT IDENTIFIERexpression : FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEexpression : FN LPAREN parameters RPAREN LBRACE statements RBRACEexpression_statement : expression SEMICOLONparameters : parameters COMMA parameter\n| parameters COMMAparameters : parameterparameters : parameter : IDENTIFIER ARROW typeparameter : IDENTIFIERtype : IDENTIFIER\n| type LT type_list GTtype_list : type_list COMMA typetype_list : typeexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| elements COMMAelements : expressionelements : expression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arguments RPAREN\n| expression LPAREN arguments RPARENexpression : expression DOT IDENTIFIERarguments : arguments COMMA expressionarguments : expressionarguments : empty :'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,20,39,43,73,74,113,116,117,119,145,146,147,148,149,150,161,163,180,185,188,189,194,195,200,201,202,203,204,213,220,222,227,230,238,243,245,246,253,255,256,258,260,261,262,263,265,269,270,271,273,277,278,282,284,286,287,288,289,290,],[16,16,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,59,-2,-88,-82,-83,151,-80,16,-81,151,-38,-39,-40,-41,190,-76,16,-63,16,-36,-37,151,-46,-78,-79,-75,-80,-16,-61,16,16,151,-77,-62,16,16,16,-70,-71,-60,-59,16,16,-69,16,-45,16,-67,16,-44,16,-68,-66,16,16,16,16,-43,-42,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,39,43,73,74,113,116,117,119,145,146,147,148,149,161,163,180,185,188,189,194,195,200,201,202,203,204,213,220,222,227,230,238,243,245,246,253,255,256,258,260,261,262,263,265,269,270,271,273,277,278,282,284,286,287,288,289,290,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,41,-2,-88,-82,-83,150,-80,19,-81,150,-38,-39,-40,-41,-76,19,-63,19,-36,-37,150,-46,-78,-79,-75,-80,-16,-61,19,19,150,-77,-62,19,19,19,-70,-71,-60,-59,19,19,-69,19,-45,19,-67,19,-44,19,-68,-66,19,19,19,19,-43,-42,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,20,-81,-76,20,-63,20,-36,-46,-78,-79,-75,-80,-16,-61,20,20,-77,-62,20,20,20,-70,-71,-60,-59,20,20,-69,20,20,-67,20,20,-68,-66,20,20,20,20,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,23,27,28,30,33,35,36,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,71,73,74,77,78,79,80,81,85,104,113,116,117,119,129,131,133,145,146,147,148,149,152,160,161,163,178,180,185,188,189,194,195,200,201,202,203,204,208,212,213,217,220,222,227,230,238,243,245,246,253,255,256,258,260,261,262,263,265,269,270,271,273,276,277,278,282,284,286,287,288,289,290,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,60,65,65,65,65,-57,65,65,-2,65,-88,65,65,65,65,65,65,65,65,65,65,65,65,65,-56,65,-82,-83,65,65,65,65,65,-58,65,153,-80,22,-81,65,65,65,153,-38,-39,-40,-41,192,65,-76,22,65,-63,22,-36,-37,153,-46,-78,-79,-75,-80,-16,65,65,-61,65,22,22,153,-77,-62,22,22,22,-70,-71,-60,-59,22,22,-69,22,-45,22,-67,22,-44,65,22,-68,-66,22,22,22,22,-43,-42,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,24,-81,-76,24,-63,24,-36,-46,-78,-79,-75,-80,-16,-61,24,24,-77,-62,24,24,24,-70,-71,-60,-59,24,24,-69,24,24,-67,24,24,-68,-66,24,24,24,24,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,25,-81,-76,25,-63,25,-36,-46,-78,-79,-75,-80,-16,-61,25,25,-77,-62,25,25,25,-70,-71,-60,-59,25,25,-69,25,25,-67,25,25,-68,-66,25,25,25,25,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,208,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,26,-81,-76,26,-63,26,-36,-46,-78,-79,-75,-80,-16,233,-61,26,26,-77,-62,26,26,26,-70,-71,-60,-59,26,26,-69,26,26,-67,26,26,-68,-66,26,26,26,26,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,162,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,27,-81,-76,27,27,-63,27,-36,-46,-78,-79,-75,-80,-16,-61,27,27,-77,-62,27,27,27,-70,-71,-60,-59,27,27,-69,27,27,-67,27,27,-68,-66,27,27,27,27,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,28,-81,-76,28,-63,28,-36,-46,-78,-79,-75,-80,-16,-61,28,28,-77,-62,28,28,28,-70,-71,-60,-59,28,28,-69,28,28,-67,28,28,-68,-66,28,28,28,28,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,30,-81,-76,30,-63,30,-36,-46,-78,-79,-75,-80,-16,-61,30,30,-77,-62,30,30,30,-70,-71,-60,-59,30,30,-69,30,30,-67,30,30,-68,-66,30,30,30,30,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,117,119,161,163,180,185,188,195,200,201,202,203,204,213,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,277,278,282,284,286,287,288,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,31,-81,-76,31,-63,31,-36,-46,-78,-79,-75,-80,-16,-61,31,31,-77,-62,31,31,31,-70,-71,-60,-59,31,31,-69,31,31,-67,31,31,-68,-66,31,31,31,31,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,23,27,28,30,35,36,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,71,73,74,77,78,79,80,81,104,116,117,119,129,131,133,160,161,163,178,180,185,188,195,200,201,202,203,204,208,212,213,217,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,276,277,278,282,284,286,287,288,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,35,35,35,35,35,35,-2,35,-88,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-82,-83,35,35,35,35,35,35,-80,35,-81,35,35,35,35,-76,35,35,-63,35,-36,-46,-78,-79,-75,-80,-16,35,35,-61,35,35,35,-77,-62,35,35,35,-70,-71,-60,-59,35,35,-69,35,35,-67,35,35,35,-68,-66,35,35,35,35,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,23,27,28,30,32,35,36,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,64,66,70,71,72,73,74,75,77,78,79,80,81,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,111,116,117,118,119,120,123,124,125,126,127,128,129,131,132,133,134,137,144,160,161,163,164,174,176,177,178,180,185,188,195,199,200,201,202,203,204,206,208,212,213,214,217,220,222,230,234,237,238,241,243,245,246,247,253,255,256,258,260,261,262,263,269,270,271,272,276,277,278,281,282,284,286,287,288,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-120,45,36,36,36,36,-119,36,36,-118,-2,36,-88,36,36,36,36,36,36,36,36,36,36,36,36,36,45,-120,45,36,45,-82,-83,45,36,36,36,36,36,45,-116,45,-104,-105,-106,-107,45,45,45,45,45,45,45,45,-123,36,-117,-80,36,45,-81,169,45,45,45,45,45,-99,36,36,-121,36,-122,45,-123,36,-76,36,-117,45,45,45,36,-63,36,-36,-46,45,-78,-79,-75,-80,-16,169,36,36,-61,45,36,36,36,-77,45,45,-62,45,36,36,36,-87,-70,-71,-60,-59,36,36,-69,36,36,-67,36,-86,36,36,-68,45,-66,36,36,36,36,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,22,23,27,28,30,32,35,36,37,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,64,65,66,70,71,72,73,74,75,77,78,79,80,81,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,104,106,111,115,116,117,118,119,123,124,125,126,127,128,129,131,132,133,134,137,144,160,161,163,164,174,176,177,178,180,185,188,193,195,199,200,201,202,203,204,208,212,213,214,217,220,222,225,230,234,237,238,241,243,245,246,247,253,255,256,258,260,261,262,263,268,269,270,271,272,276,277,278,281,282,284,286,287,288,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,42,56,63,23,71,23,23,-119,23,23,-118,-2,23,-88,23,23,23,23,23,23,23,23,23,23,23,23,23,107,56,63,42,56,23,56,-82,-83,56,23,23,23,23,23,56,-116,56,56,56,56,56,56,56,56,56,56,56,56,56,-123,23,139,-117,160,-80,23,56,-81,56,56,56,56,56,-99,23,23,-121,23,-122,56,-123,23,-76,23,-117,56,56,56,23,-63,23,-36,226,-46,56,-78,-79,-75,-80,-16,23,23,-61,56,23,23,23,250,-77,56,56,-62,56,23,23,23,-87,-70,-71,-60,-59,23,23,-69,23,276,23,-67,23,-86,23,23,-68,56,-66,23,23,23,23,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,23,27,28,30,35,36,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,71,73,74,77,78,79,80,81,104,116,117,119,120,129,131,133,160,161,163,169,178,180,185,188,195,200,201,202,203,204,206,208,212,213,217,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,276,277,278,282,284,286,287,288,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,37,37,37,37,37,37,-2,37,-88,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-82,-83,37,37,37,37,37,37,-80,37,-81,170,37,37,37,37,-76,37,209,37,-63,37,-36,-46,-78,-79,-75,-80,-16,170,37,37,-61,37,37,37,-77,-62,37,37,37,-70,-71,-60,-59,37,37,-69,37,37,-67,37,37,37,-68,-66,37,37,37,37,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,23,27,28,30,35,36,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,71,73,74,77,78,79,80,81,104,116,117,119,129,131,133,160,161,163,178,180,185,188,195,200,201,202,203,204,208,210,212,213,217,220,222,230,238,243,245,246,253,255,256,258,260,261,262,263,269,270,271,276,277,278,282,284,286,287,288,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,32,32,32,32,32,32,-2,32,-88,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-82,-83,32,32,32,32,32,32,-80,32,-81,32,32,32,32,-76,32,32,-63,32,-36,-46,-78,-79,-75,-80,-16,32,236,32,-61,32,32,32,-77,-62,32,32,32,-70,-71,-60,-59,32,32,-69,32,32,-67,32,32,32,-68,-66,32,32,32,32,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,22,23,24,25,27,28,30,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,63,71,73,74,76,77,78,79,80,81,103,104,107,112,114,116,117,119,129,130,131,133,138,139,142,143,151,153,160,161,163,173,178,179,180,184,185,188,190,192,195,197,200,201,202,203,204,208,212,213,217,219,220,222,224,226,230,238,240,242,243,245,246,248,250,253,255,256,258,260,261,262,263,269,270,271,275,276,277,278,279,282,284,286,287,288,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-65,58,62,66,67,68,66,66,66,66,66,85,-2,86,-64,66,-88,66,66,66,66,66,66,66,66,66,66,66,66,66,102,105,106,110,66,-82,-83,122,66,66,66,66,66,135,66,110,144,154,-80,17,-81,66,135,66,66,135,110,110,135,191,193,66,-76,17,211,66,135,-63,135,17,-36,223,225,-46,154,-78,-79,-75,-80,-16,17,66,-61,66,135,17,17,135,110,-77,-62,135,135,17,17,17,135,110,-70,-71,-60,-59,17,17,-69,17,17,-67,17,135,66,17,-68,135,-66,17,17,17,17,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,21,33,39,43,61,73,74,85,113,116,117,119,145,146,147,148,149,152,161,163,180,185,188,189,194,195,200,201,202,203,204,213,220,222,227,230,238,243,245,246,253,255,256,258,260,261,262,263,265,269,270,271,273,277,278,282,284,286,287,288,289,290,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,38,-57,-2,-88,-56,-82,-83,-58,38,-80,38,-81,38,-38,-39,-40,-41,38,-76,38,-63,38,-36,-37,38,-46,-78,-79,-75,-80,-16,-61,38,38,38,-77,-62,38,38,38,-70,-71,-60,-59,38,38,-69,38,-45,38,-67,38,-44,38,-68,-66,38,38,38,38,-43,-42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,39,43,73,74,116,119,161,180,188,195,200,201,202,203,204,213,230,238,253,255,256,258,262,270,278,282,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-88,-82,-83,-80,-81,-76,-63,-36,-46,-78,-79,-75,-80,-16,-61,-77,-62,-70,-71,-60,-59,-69,-67,-68,-66,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,17,32,37,39,43,66,73,74,76,84,89,90,91,92,93,94,95,96,97,98,99,100,102,111,114,116,119,120,121,122,123,124,125,126,127,128,132,134,144,145,146,147,148,149,154,155,156,157,158,159,161,163,165,166,167,180,188,189,195,196,197,198,200,201,202,203,204,205,206,207,211,213,222,227,228,230,231,232,234,235,238,245,247,252,253,255,256,258,260,262,263,265,270,271,272,273,277,278,282,285,287,288,289,290,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-120,-119,-118,-2,-88,-120,-82,-83,-74,-116,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-123,-117,-127,-80,-81,-17,172,-73,-30,-31,-32,-33,-34,-99,-121,-122,-123,188,-38,-39,-40,-41,-55,195,-47,-48,-127,-50,-76,202,204,-127,-19,-63,-36,-37,-46,-49,-52,-53,-78,-79,-75,-80,-16,-18,-21,-22,-72,-61,247,252,-51,-77,-20,-23,-26,-25,-62,262,-87,-54,-70,-71,-60,-59,270,-69,272,-45,-67,278,-86,-44,282,-68,-66,-24,289,290,-43,-42,]),'SEMICOLON':([17,18,28,29,32,37,66,72,84,89,90,91,92,93,94,95,96,97,98,99,100,102,111,123,124,125,126,127,128,132,134,135,137,144,176,214,229,236,237,239,241,247,249,264,272,],[-120,43,73,74,-119,-118,-120,119,-116,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-123,-117,-30,-31,-32,-33,-34,-99,-121,-122,-95,180,-123,213,238,253,255,256,-96,258,-87,265,273,-86,]),'PLUS':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,44,-119,-118,44,-120,44,44,44,44,-116,44,-104,-105,-106,-107,44,44,44,44,44,44,44,44,-123,-117,44,44,44,44,44,44,-99,-121,-122,44,-123,-117,44,44,44,44,44,44,44,44,-87,-86,44,]),'MULTIPLY':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,46,-119,-118,46,-120,46,46,46,46,-116,46,46,46,-106,-107,46,46,46,46,46,46,46,46,-123,-117,46,46,46,46,46,46,-99,-121,-122,46,-123,-117,46,46,46,46,46,46,46,46,-87,-86,46,]),'DIVIDE':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,47,-119,-118,47,-120,47,47,47,47,-116,47,47,47,-106,-107,47,47,47,47,47,47,47,47,-123,-117,47,47,47,47,47,47,-99,-121,-122,47,-123,-117,47,47,47,47,47,47,47,47,-87,-86,47,]),'LT':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,135,136,137,144,164,174,175,176,177,181,187,199,214,215,221,234,237,239,241,244,247,249,257,259,264,272,280,281,283,],[-120,48,-119,-118,48,-120,48,48,48,48,-116,48,-104,-105,-106,-107,-108,-109,-110,-111,48,48,48,48,-123,-117,48,48,48,48,48,48,-99,-121,-122,-95,179,48,-123,-117,48,179,48,48,179,179,48,48,179,179,48,48,-96,48,179,-87,179,179,179,179,-86,179,48,179,]),'GT':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,135,137,144,164,174,176,177,199,214,215,216,234,237,239,241,247,257,272,281,],[-120,49,-119,-118,49,-120,49,49,49,49,-116,49,-104,-105,-106,-107,-108,-109,-110,-111,49,49,49,49,-123,-117,49,49,49,49,49,49,-99,-121,-122,-95,49,-123,-117,49,49,49,49,49,-98,239,49,49,-96,49,-87,-97,-86,49,]),'LEQ':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,50,-119,-118,50,-120,50,50,50,50,-116,50,-104,-105,-106,-107,-108,-109,-110,-111,50,50,50,50,-123,-117,50,50,50,50,50,50,-99,-121,-122,50,-123,-117,50,50,50,50,50,50,50,50,-87,-86,50,]),'GEQ':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,51,-119,-118,51,-120,51,51,51,51,-116,51,-104,-105,-106,-107,-108,-109,-110,-111,51,51,51,51,-123,-117,51,51,51,51,51,51,-99,-121,-122,51,-123,-117,51,51,51,51,51,51,51,51,-87,-86,51,]),'EQ':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,52,-119,-118,52,-120,52,52,52,52,-116,52,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,52,52,-123,-117,52,52,52,52,52,52,-99,-121,-122,52,-123,-117,52,52,52,52,52,52,52,52,-87,-86,52,]),'NEQ':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,53,-119,-118,53,-120,53,53,53,53,-116,53,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,53,53,-123,-117,53,53,53,53,53,53,-99,-121,-122,53,-123,-117,53,53,53,53,53,53,53,53,-87,-86,53,]),'AND':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,54,-119,-118,54,-120,54,54,54,54,-116,54,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,54,-123,-117,54,54,54,54,54,54,-99,-121,-122,54,-123,-117,54,54,54,54,54,54,54,54,-87,-86,54,]),'OR':([17,18,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,234,237,241,247,272,281,],[-120,55,-119,-118,55,-120,55,55,55,55,-116,55,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-123,-117,55,55,55,55,55,55,-99,-121,-122,55,-123,-117,55,55,55,55,55,55,55,55,-87,-86,55,]),'DOT':([17,18,26,32,37,64,66,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,102,111,118,123,124,125,126,127,128,132,134,137,144,164,174,176,177,199,214,233,234,237,241,247,272,281,],[-120,57,69,-119,-118,112,-120,112,112,112,112,-116,112,112,112,112,112,112,112,112,112,112,112,112,112,-123,-117,112,112,112,112,112,112,-99,-121,-122,112,-123,-117,112,112,112,112,112,254,57,112,112,-87,-86,112,]),'COMMA':([17,32,35,37,42,56,63,66,76,82,83,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,107,108,109,110,111,121,122,123,124,125,126,127,128,129,132,134,135,139,140,142,144,154,158,159,166,167,174,177,182,186,187,211,215,216,226,228,231,232,234,235,239,247,250,251,252,257,266,272,285,],[-120,-119,-103,-118,-126,-126,-92,-120,-74,129,-102,-116,133,-125,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,133,-123,-92,142,-91,-94,-117,173,-73,-30,-31,-32,-33,-34,-99,-101,-121,-122,-95,-92,142,-90,-123,-55,197,-50,206,-19,-100,-124,142,-89,-93,-72,-98,240,-92,-51,-20,-23,-26,-25,-96,-87,-92,142,-54,-97,142,-86,-24,]),'ASSIGN':([17,34,58,86,102,135,136,175,181,239,],[-84,77,104,131,-85,-95,178,212,217,-96,]),'PLUS_ASSIGN':([17,34,102,],[-84,78,-85,]),'MINUS_ASSIGN':([17,34,102,],[-84,79,-85,]),'MULTIPLY_ASSIGN':([17,34,102,],[-84,80,-85,]),'DIVIDE_ASSIGN':([17,34,102,],[-84,81,-85,]),'LBRACE':([31,32,37,66,67,68,70,75,84,89,90,91,92,93,94,95,96,97,98,99,100,111,128,132,134,135,141,144,154,162,164,183,218,221,239,244,247,259,272,280,283,],[76,-119,-118,-120,113,114,117,120,-116,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-117,-99,-121,-122,-95,185,-123,194,117,-117,220,243,246,-96,261,-87,269,-86,284,286,]),'RPAREN':([32,37,42,56,63,64,66,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,108,109,110,111,118,128,132,134,135,139,140,142,144,177,182,186,187,199,226,239,247,250,251,266,272,281,],[-119,-118,-126,-126,-92,111,-120,-116,132,-125,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,134,-92,141,-91,-94,-117,164,-99,-121,-122,-95,-92,183,-90,-123,-124,218,-89,-93,229,-92,-96,-87,-92,267,274,-86,285,]),'RBRACKET':([32,35,37,66,82,83,84,89,90,91,92,93,94,95,96,97,98,99,100,111,128,129,132,134,144,174,247,272,],[-119,-103,-118,-120,128,-102,-116,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-117,-99,-101,-121,-122,-123,-100,-87,-86,]),'ARROW':([58,86,105,110,141,168,170,171,183,191,209,218,223,267,274,],[103,130,138,143,184,208,-28,-29,219,224,-27,242,248,275,279,]),'INFO':([69,254,],[115,268,]),'ELSE':([116,202,203,],[162,-75,162,]),'UNDERSCORE':([120,206,],[171,171,]),'FROM':([172,],[210,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,117,185,220,243,246,261,269,284,286,],[2,163,222,245,260,263,271,277,287,288,]),'statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[3,39,3,39,3,3,39,3,39,3,39,3,39,3,39,39,3,3,39,39,]),'variable_declaration':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'constant_declaration':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_declaration':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'enum_declaration':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'print_statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'if_statement':([0,2,117,162,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[10,10,10,200,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'return_statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'assignment':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'expression_statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'match_statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'import_statement':([0,2,117,163,185,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'expression':([0,2,23,27,28,30,35,36,42,44,45,46,47,48,49,50,51,52,53,54,55,56,71,77,78,79,80,81,104,117,129,131,133,160,163,178,185,208,212,217,220,222,243,245,246,260,261,263,269,271,276,277,284,286,287,288,],[18,18,64,70,72,75,83,84,88,89,90,91,92,93,94,95,96,97,98,99,100,88,118,123,124,125,126,127,137,18,174,176,177,199,18,214,18,234,237,241,18,18,18,18,18,18,18,18,18,18,281,18,18,18,18,18,]),'decorators':([0,2,113,117,145,163,185,194,220,222,227,243,245,246,260,261,263,269,271,277,284,286,287,288,],[21,21,152,21,152,21,21,152,21,21,152,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'assignment_expression':([0,2,117,163,185,208,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[29,29,29,29,29,235,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'decorator':([0,2,21,113,117,145,152,163,185,194,220,222,227,243,245,246,260,261,263,269,271,277,284,286,287,288,],[33,33,61,33,33,33,61,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'lvalue':([0,2,117,163,185,208,220,222,243,245,246,260,261,263,269,271,277,284,286,287,288,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'mut_opt':([16,],[40,]),'elements':([35,],[82,]),'arguments':([42,56,],[87,101,]),'parameters':([63,107,139,226,250,],[108,140,182,251,266,]),'parameter':([63,107,139,142,226,250,],[109,109,109,186,109,109,]),'block':([70,162,164,],[116,201,203,]),'import_items':([76,],[121,]),'type':([103,130,138,143,179,184,219,224,240,242,248,275,279,],[136,175,181,187,215,221,244,249,257,259,264,280,283,]),'struct_members':([113,194,],[145,227,]),'struct_member':([113,145,194,227,],[146,189,146,189,]),'mut_field_declaration':([113,145,194,227,],[147,147,147,147,]),'field_declaration':([113,145,194,227,],[148,148,148,148,]),'method_declaration':([113,145,194,227,],[149,149,149,149,]),'enum_variants_opt':([114,],[155,]),'enum_variants':([114,],[156,]),'empty':([114,158,166,],[157,198,207,]),'enum_variant_list':([114,],[158,]),'enum_variant':([114,197,],[159,228,]),'else_clause':([116,203,],[161,230,]),'match_arms':([120,],[165,]),'match_arm_list':([120,],[166,]),'match_arm':([120,206,],[167,231,]),'pattern':([120,206,],[168,168,]),'maybe_trailing_comma':([158,],[196,]),'maybe_comma':([166,],[205,]),'type_list':([179,],[216,]),'inline_statement':([208,],[232,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',28),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',33),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',38),
  ('statement -> variable_declaration','statement',1,'p_statement_declaration','parser.py',43),
  ('statement -> constant_declaration','statement',1,'p_statement_declaration','parser.py',44),
  ('statement -> function_declaration','statement',1,'p_statement_declaration','parser.py',45),
  ('statement -> struct_declaration','statement',1,'p_statement_declaration','parser.py',46),
  ('statement -> enum_declaration','statement',1,'p_statement_declaration','parser.py',47),
  ('statement -> print_statement','statement',1,'p_statement_declaration','parser.py',48),
  ('statement -> if_statement','statement',1,'p_statement_declaration','parser.py',49),
  ('statement -> return_statement','statement',1,'p_statement_declaration','parser.py',50),
  ('statement -> assignment','statement',1,'p_statement_declaration','parser.py',51),
  ('statement -> expression_statement','statement',1,'p_statement_declaration','parser.py',52),
  ('statement -> match_statement','statement',1,'p_statement_declaration','parser.py',53),
  ('statement -> import_statement','statement',1,'p_statement_declaration','parser.py',54),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',59),
  ('match_arms -> <empty>','match_arms',0,'p_match_arms','parser.py',65),
  ('match_arms -> match_arm_list maybe_comma','match_arms',2,'p_match_arms','parser.py',66),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list_single','parser.py',80),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list_multiple','parser.py',85),
  ('maybe_comma -> COMMA','maybe_comma',1,'p_maybe_comma','parser.py',90),
  ('maybe_comma -> empty','maybe_comma',1,'p_maybe_comma','parser.py',91),
  ('match_arm -> pattern ARROW inline_statement','match_arm',3,'p_match_arm','parser.py',98),
  ('inline_statement -> PRINT DOT INFO LPAREN expression RPAREN','inline_statement',6,'p_inline_statement_print','parser.py',103),
  ('inline_statement -> assignment_expression','inline_statement',1,'p_inline_statement_assignment','parser.py',108),
  ('inline_statement -> expression','inline_statement',1,'p_inline_statement_expression','parser.py',115),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_negative_number','parser.py',120),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',125),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',130),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',135),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',136),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',137),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',138),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',139),
  ('type_alias_declaration -> TYPE IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',163),
  ('struct_declaration -> STRUCT IDENTIFIER LBRACE struct_members RBRACE','struct_declaration',5,'p_struct_declaration','parser.py',170),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members_multiple','parser.py',175),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members_single','parser.py',180),
  ('struct_member -> mut_field_declaration','struct_member',1,'p_struct_member','parser.py',185),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',186),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',187),
  ('method_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',11,'p_method_declaration_with_decorators','parser.py',194),
  ('method_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',10,'p_method_declaration_without_decorators','parser.py',205),
  ('mut_field_declaration -> MUT LET IDENTIFIER ARROW type SEMICOLON','mut_field_declaration',6,'p_mut_field_declaration','parser.py',217),
  ('field_declaration -> LET IDENTIFIER ARROW type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',222),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',229),
  ('enum_variants_opt -> enum_variants','enum_variants_opt',1,'p_enum_variants_opt','parser.py',236),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',237),
  ('enum_variants -> enum_variant_list maybe_trailing_comma','enum_variants',2,'p_enum_variants','parser.py',245),
  ('enum_variant_list -> enum_variant','enum_variant_list',1,'p_enum_variant_list_single','parser.py',254),
  ('enum_variant_list -> enum_variant_list COMMA enum_variant','enum_variant_list',3,'p_enum_variant_list_multiple','parser.py',259),
  ('maybe_trailing_comma -> COMMA','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',266),
  ('maybe_trailing_comma -> empty','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',267),
  ('enum_variant -> IDENTIFIER LBRACE struct_members RBRACE','enum_variant',4,'p_enum_variant_with_fields','parser.py',273),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant_without_fields','parser.py',278),
  ('decorators -> decorators decorator','decorators',2,'p_decorators_multiple','parser.py',286),
  ('decorators -> decorator','decorators',1,'p_decorators_single','parser.py',291),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',296),
  ('constant_declaration -> CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLON','constant_declaration',8,'p_constant_declaration','parser.py',303),
  ('variable_declaration -> LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',8,'p_variable_declaration_let_with_type','parser.py',310),
  ('variable_declaration -> LET mut_opt IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let_without_type','parser.py',321),
  ('variable_declaration -> MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration_mut_with_type','parser.py',332),
  ('variable_declaration -> MUT IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration_mut_without_type','parser.py',343),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt_mut','parser.py',354),
  ('mut_opt -> <empty>','mut_opt',0,'p_mut_opt_empty','parser.py',359),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_with_decorators','parser.py',367),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_with_decorators_no_return','parser.py',378),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_without_decorators','parser.py',389),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',8,'p_function_declaration_without_decorators_no_return','parser.py',399),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',412),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',419),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items_multiple','parser.py',424),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items_single','parser.py',429),
  ('import_items -> <empty>','import_items',0,'p_import_items_empty','parser.py',434),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',441),
  ('if_statement -> IF expression block else_clause','if_statement',4,'p_if_statement_no_parens','parser.py',446),
  ('if_statement -> IF LPAREN expression RPAREN block else_clause','if_statement',6,'p_if_statement_with_parens','parser.py',453),
  ('else_clause -> ELSE if_statement','else_clause',2,'p_else_clause_if','parser.py',460),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause_block','parser.py',468),
  ('else_clause -> <empty>','else_clause',0,'p_else_clause_empty','parser.py',475),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',484),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',485),
  ('assignment -> assignment_expression SEMICOLON','assignment',2,'p_assignment','parser.py',495),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue_identifier','parser.py',500),
  ('lvalue -> expression DOT IDENTIFIER','lvalue',3,'p_lvalue_member_access','parser.py',505),
  ('expression -> FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','expression',9,'p_expression_lambda','parser.py',512),
  ('expression -> FN LPAREN parameters RPAREN LBRACE statements RBRACE','expression',7,'p_expression_lambda_no_return','parser.py',518),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',524),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',531),
  ('parameters -> parameters COMMA','parameters',2,'p_parameters_multiple','parser.py',532),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',540),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','parser.py',545),
  ('parameter -> IDENTIFIER ARROW type','parameter',3,'p_parameter_with_type','parser.py',550),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter_without_type','parser.py',557),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',564),
  ('type -> type LT type_list GT','type',4,'p_type','parser.py',565),
  ('type_list -> type_list COMMA type','type_list',3,'p_type_list_multiple','parser.py',573),
  ('type_list -> type','type_list',1,'p_type_list_single','parser.py',578),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',585),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',590),
  ('elements -> elements COMMA','elements',2,'p_elements_multiple','parser.py',591),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',599),
  ('elements -> <empty>','elements',0,'p_elements_empty','parser.py',604),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',609),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',610),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',611),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',612),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',613),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',614),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',615),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',616),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',617),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',618),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',619),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',620),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',625),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',630),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',635),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',640),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',645),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',650),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',651),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_member_access','parser.py',662),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments_multiple','parser.py',667),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',672),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parser.py',677),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',682),
]
