
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTleftLPARENRPARENrightFAT_ARROWrightARROWrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FAT_ARROW FN FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT UNDERSCOREprogram : statementsstatements : statements statementstatements : statementstatement : variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| enum_declaration\n| interface_declaration\n| print_statement\n| if_statement\n| return_statement\n| assignment\n| expression_statement\n| match_statement \n| import_statementexpression : NOT expressionmatch_pattern : NUMBER\n| MINUS NUMBERmatch_pattern : UNDERSCOREmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arm_list\n| match_arm_list COMMAmatch_arm_list : match_armmatch_arm_list : match_arm_list COMMA match_armmatch_arm : match_pattern FAT_ARROW inline_statementinline_statement : PRINT DOT INFO LPAREN expression RPARENinline_statement : assignment_expressioninline_statement : expressionassignment_expression : lvalue ASSIGN expression\n| lvalue PLUS_ASSIGN expression\n| lvalue MINUS_ASSIGN expression\n| lvalue MULTIPLY_ASSIGN expression\n| lvalue DIVIDE_ASSIGN expressioninterface_declaration : INTERFACE IDENTIFIER LBRACE interface_members RBRACEinterface_members : interface_members interface_memberinterface_members : interface_memberinterface_member : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONinterface_list : interface_list COMMA IDENTIFIERinterface_list : IDENTIFIERstruct_members : struct_members struct_memberstruct_members : struct_memberstruct_member_field : mut_opt IDENTIFIER ARROW type SEMICOLONstruct_member : mut_field_declaration\n| field_declaration\n| method_declaration\n| struct_member_fieldexpression : IDENTIFIER LBRACE struct_initializers RBRACEstruct_initializers : struct_initializers COMMA struct_initializerstruct_initializers : struct_initializerstruct_initializers : struct_initializer : IDENTIFIER COLON expressionstruct_declaration : STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACEimplements_clause : IMPLEMENTS interface_listimplements_clause : method_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmethod_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmut_field_declaration : MUT LET IDENTIFIER ARROW type SEMICOLONfield_declaration : LET IDENTIFIER ARROW type SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants\n| emptyenum_variants : enum_variant_list maybe_trailing_commaenum_variant_list : enum_variantenum_variant_list : enum_variant_list COMMA enum_variantmaybe_trailing_comma : COMMA\n| empty\nenum_variant : IDENTIFIER LBRACE struct_members RBRACEenum_variant : IDENTIFIERdecorators : decorators decoratordecorators : decoratordecorator : AT IDENTIFIERconstant_declaration : CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ASSIGN expression SEMICOLONmut_opt : MUTmut_opt : function_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEexpression : AWAIT expressionprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIERimport_items : IDENTIFIERimport_items : block : LBRACE statements RBRACEif_statement : IF expression block else_clauseif_statement : IF LPAREN expression RPAREN block else_clauseelse_clause : ELSE if_statementelse_clause : ELSE blockelse_clause :return_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment : assignment_expression SEMICOLONlvalue : IDENTIFIERlvalue : expression DOT IDENTIFIERexpression : FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEexpression : FN LPAREN parameters RPAREN LBRACE statements RBRACEexpression_statement : expression SEMICOLONparameters : parameters COMMA parameter\n| parameters COMMAparameters : parameterparameters : parameter : IDENTIFIER ARROW typeparameter : IDENTIFIERtype : IDENTIFIER\n| type LT type_list GTtype_list : type_list COMMA typetype_list : typeexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| elements COMMAelements : expressionelements : expression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arguments RPAREN\n| expression LPAREN arguments RPARENexpression : expression DOT IDENTIFIERarguments : arguments COMMA expressionarguments : expressionarguments : empty :'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,44,49,82,83,134,135,137,168,181,183,202,209,212,213,214,215,216,217,218,224,225,229,233,234,235,236,237,244,253,255,256,257,264,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,327,330,334,335,336,337,338,339,344,345,346,351,353,354,355,356,357,358,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,65,-2,-108,-102,-103,-100,17,-101,219,-96,17,-78,17,219,-43,-45,-46,-47,-48,258,219,-61,-35,-98,-99,-95,-100,-21,-76,17,17,-54,-42,219,-97,-77,17,17,17,17,-90,-91,-75,-74,17,17,17,17,-88,17,17,17,-86,17,-84,17,-60,-44,17,-82,17,17,-87,-59,17,-85,-83,-81,17,17,17,17,-58,-57,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,44,49,82,83,134,135,137,168,181,183,202,209,212,213,214,215,216,217,224,225,229,233,234,235,236,237,244,253,255,256,257,264,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,327,330,334,335,336,337,338,339,344,345,346,351,353,354,355,356,357,358,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,46,-2,-108,-102,-103,-100,20,-101,218,-96,20,-78,20,218,-43,-45,-46,-47,-48,218,-61,-35,-98,-99,-95,-100,-21,-76,20,20,-54,-42,218,-97,-77,20,20,20,20,-90,-91,-75,-74,20,20,20,20,-88,20,20,20,-86,20,-84,20,-60,-44,20,-82,20,20,-87,-59,20,-85,-83,-81,20,20,20,20,-58,-57,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,21,-101,-96,21,-78,21,-61,-35,-98,-99,-95,-100,-21,-76,21,21,-54,-97,-77,21,21,21,21,-90,-91,-75,-74,21,21,21,21,-88,21,21,21,-86,21,-84,21,21,-82,21,21,-87,21,-85,-83,-81,21,21,21,21,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,44,49,68,82,83,96,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,66,-72,-2,-108,-71,-102,-103,-73,-100,23,-101,-96,23,-78,23,-61,-35,-98,-99,-95,-100,-21,-76,23,23,-54,-97,-77,23,23,23,23,-90,-91,-75,-74,23,23,23,23,-88,23,23,23,-86,23,-84,23,23,-82,23,23,-87,23,-85,-83,-81,23,23,23,23,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,23,25,30,31,33,36,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,66,68,80,82,83,86,87,88,89,90,96,118,132,134,135,137,147,149,150,154,168,177,178,180,181,183,200,202,209,212,213,214,215,216,217,220,224,225,229,230,233,234,235,236,237,239,243,244,248,253,255,256,257,264,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,327,330,332,333,334,335,336,337,338,339,344,345,346,349,351,353,354,355,356,357,358,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,67,69,74,74,74,74,-72,74,74,74,74,-2,74,-108,74,74,74,74,74,74,74,74,74,74,74,74,74,120,-71,74,-102,-103,74,74,74,74,74,-73,74,179,-100,24,-101,74,74,74,74,221,179,-37,74,-96,24,74,-78,24,221,-43,-45,-46,-47,-48,260,221,-61,-35,-36,-98,-99,-95,-100,-21,74,74,-76,74,24,24,-54,-42,221,-97,-77,24,24,24,24,-90,-91,-75,-74,24,24,24,24,-88,24,24,24,-86,24,-84,24,-60,-44,-39,74,24,-82,24,24,-87,-59,24,-85,-83,-38,-81,24,24,24,24,-58,-57,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,26,-101,-96,26,-78,26,-61,-35,-98,-99,-95,-100,-21,-76,26,26,-54,-97,-77,26,26,26,26,-90,-91,-75,-74,26,26,26,26,-88,26,26,26,-86,26,-84,26,26,-82,26,26,-87,26,-85,-83,-81,26,26,26,26,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,27,-101,-96,27,-78,27,-61,-35,-98,-99,-95,-100,-21,-76,27,27,-54,-97,-77,27,27,27,27,-90,-91,-75,-74,27,27,27,27,-88,27,27,27,-86,27,-84,27,27,-82,27,27,-87,27,-85,-83,-81,27,27,27,27,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,28,-101,-96,28,-78,28,-61,-35,-98,-99,-95,-100,-21,-76,28,28,-54,-97,-77,28,28,28,28,-90,-91,-75,-74,28,28,28,28,-88,28,28,28,-86,28,-84,28,28,-82,28,28,-87,28,-85,-83,-81,28,28,28,28,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,239,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,29,-101,-96,29,-78,29,-61,-35,-98,-99,-95,-100,-21,271,-76,29,29,-54,-97,-77,29,29,29,29,-90,-91,-75,-74,29,29,29,29,-88,29,29,29,-86,29,-84,29,29,-82,29,29,-87,29,-85,-83,-81,29,29,29,29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,182,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,30,-101,-96,30,30,-78,30,-61,-35,-98,-99,-95,-100,-21,-76,30,30,-54,-97,-77,30,30,30,30,-90,-91,-75,-74,30,30,30,30,-88,30,30,30,-86,30,-84,30,30,-82,30,30,-87,30,-85,-83,-81,30,30,30,30,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,31,-101,-96,31,-78,31,-61,-35,-98,-99,-95,-100,-21,-76,31,31,-54,-97,-77,31,31,31,31,-90,-91,-75,-74,31,31,31,31,-88,31,31,31,-86,31,-84,31,31,-82,31,31,-87,31,-85,-83,-81,31,31,31,31,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,33,-101,-96,33,-78,33,-61,-35,-98,-99,-95,-100,-21,-76,33,33,-54,-97,-77,33,33,33,33,-90,-91,-75,-74,33,33,33,33,-88,33,33,33,-86,33,-84,33,33,-82,33,33,-87,33,-85,-83,-81,33,33,33,33,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,135,137,181,183,202,209,225,229,233,234,235,236,237,244,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,334,335,336,337,338,344,345,346,351,353,354,355,356,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,34,-101,-96,34,-78,34,-61,-35,-98,-99,-95,-100,-21,-76,34,34,-54,-97,-77,34,34,34,34,-90,-91,-75,-74,34,34,34,34,-88,34,34,34,-86,34,-84,34,34,-82,34,34,-87,34,-85,-83,-81,34,34,34,34,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,80,82,83,86,87,88,89,90,118,134,135,137,147,149,150,154,180,181,183,200,202,209,225,229,233,234,235,236,237,239,243,244,248,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,333,334,335,336,337,338,344,345,346,351,353,354,355,356,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,38,38,38,38,38,38,38,38,-2,38,-108,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-102,-103,38,38,38,38,38,38,-100,38,-101,38,38,38,38,38,-96,38,38,-78,38,-61,-35,-98,-99,-95,-100,-21,38,38,-76,38,38,38,-54,-97,-77,38,38,38,38,-90,-91,-75,-74,38,38,38,38,-88,38,38,38,-86,38,-84,38,38,38,-82,38,38,-87,38,-85,-83,-81,38,38,38,38,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,24,25,26,27,28,30,31,33,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,69,71,80,82,83,85,86,87,88,89,90,117,118,120,123,128,130,131,134,135,137,147,148,149,150,152,154,159,161,162,165,166,168,179,180,181,183,193,200,201,202,204,208,209,212,213,214,215,216,217,218,219,221,222,223,224,225,227,229,233,234,235,236,237,239,243,244,248,252,253,255,256,257,258,260,264,266,268,276,278,281,282,283,284,286,287,290,292,293,296,298,299,301,302,303,305,307,308,309,310,311,313,319,320,321,322,323,324,327,330,331,333,334,335,336,337,338,339,341,344,345,346,347,351,353,354,355,356,357,358,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-80,64,70,73,75,76,77,73,73,73,73,73,73,73,96,-2,97,-79,98,73,-108,73,73,73,73,73,73,73,73,73,73,73,73,73,116,119,121,122,126,73,-102,-103,140,73,73,73,73,73,156,73,160,126,167,170,171,-100,18,-101,73,156,73,73,98,73,156,126,126,126,156,-80,231,73,-96,18,242,73,156,-78,126,156,18,-80,-43,-45,-46,-47,-48,-79,259,261,262,263,-80,-61,171,-35,-98,-99,-95,-100,-21,18,73,-76,73,156,18,18,-54,-42,289,291,-80,126,-97,-77,156,156,18,156,18,18,18,156,126,156,-90,-91,-75,-74,156,18,18,18,18,-88,18,156,126,18,18,-86,18,-84,18,-60,-44,156,73,18,-82,18,18,-87,-59,156,18,-85,-83,156,-81,18,18,18,18,-58,-57,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,80,82,83,86,87,88,89,90,118,134,135,137,147,149,150,154,180,181,183,200,202,209,225,229,233,234,235,236,237,239,243,244,248,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,333,334,335,336,337,338,344,345,346,351,353,354,355,356,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,39,39,39,39,39,39,39,39,-2,39,-108,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-102,-103,39,39,39,39,39,39,-100,39,-101,39,39,39,39,39,-96,39,39,-78,39,-61,-35,-98,-99,-95,-100,-21,39,39,-76,39,39,39,-54,-97,-77,39,39,39,39,-90,-91,-75,-74,39,39,39,39,-88,39,39,39,-86,39,-84,39,39,39,-82,39,39,-87,39,-85,-83,-81,39,39,39,39,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,80,82,83,86,87,88,89,90,118,134,135,137,147,149,150,154,180,181,183,200,202,209,225,229,233,234,235,236,237,239,243,244,248,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,333,334,335,336,337,338,344,345,346,351,353,354,355,356,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,40,40,40,40,40,40,40,40,-2,40,-108,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-102,-103,40,40,40,40,40,40,-100,40,-101,40,40,40,40,40,-96,40,40,-78,40,-61,-35,-98,-99,-95,-100,-21,40,40,-76,40,40,40,-54,-97,-77,40,40,40,40,-90,-91,-75,-74,40,40,40,40,-88,40,40,40,-86,40,-84,40,40,40,-82,40,40,-87,40,-85,-83,-81,40,40,40,40,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,25,30,31,33,35,38,39,40,41,42,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,73,79,80,81,82,83,84,86,87,88,89,90,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,118,127,134,135,136,137,138,141,142,143,144,145,146,147,149,150,151,153,154,155,158,167,180,181,183,184,194,196,197,199,200,202,209,225,229,232,233,234,235,236,237,238,239,243,244,245,248,253,255,256,268,272,275,276,279,282,284,286,287,288,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,325,333,334,335,336,337,338,343,344,345,346,351,353,354,355,356,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-140,51,41,41,41,41,-139,41,41,41,41,-138,-2,41,-108,41,41,41,41,41,41,41,41,41,41,41,41,41,51,-140,51,41,51,-102,-103,51,41,41,41,41,41,51,51,51,-136,51,-124,-125,-126,-127,51,51,51,51,51,51,51,51,-143,41,-137,-100,41,51,-101,190,51,51,51,51,51,-119,41,41,41,-49,-141,41,-142,51,-143,41,-96,41,-137,51,51,51,51,41,-78,41,-61,-35,51,-98,-99,-95,-100,-21,190,41,41,-76,51,41,41,41,-54,-97,51,51,-77,51,41,41,41,41,-107,-90,-91,-75,-74,41,41,41,41,-88,41,41,41,-86,41,-84,41,-106,41,41,-82,41,41,-87,51,41,-85,-83,-81,41,41,41,41,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,24,25,30,31,33,35,38,39,40,41,42,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,70,72,73,74,79,80,81,82,83,84,86,87,88,89,90,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,118,121,122,127,133,134,135,136,137,141,142,143,144,145,146,147,149,150,151,153,154,155,158,160,167,180,181,183,184,194,196,197,199,200,202,209,225,229,231,232,233,234,235,236,237,239,243,244,245,248,253,255,256,261,268,272,275,276,279,282,284,286,287,288,291,296,298,299,301,303,305,307,308,309,310,317,319,320,321,322,323,324,325,333,334,335,336,337,338,343,344,345,346,351,353,354,355,356,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,48,62,71,25,80,25,25,-139,25,25,25,25,-138,-2,25,-108,25,25,25,25,25,25,25,25,25,25,25,25,25,123,62,48,71,62,25,62,-102,-103,62,25,25,25,25,25,62,62,62,-136,62,62,62,62,62,62,62,62,62,62,62,62,62,-143,25,161,162,-137,180,-100,25,62,-101,62,62,62,62,62,-119,25,25,25,-49,-141,25,-142,62,204,-143,25,-96,25,-137,62,62,62,62,25,-78,25,-61,-35,266,62,-98,-99,-95,-100,-21,25,25,-76,62,25,25,25,-54,292,-97,62,62,-77,62,25,25,25,25,-107,313,-90,-91,-75,-74,25,25,25,25,-88,25,333,25,25,-86,25,-84,25,-106,25,25,-82,25,25,-87,62,25,-85,-83,-81,25,25,25,25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,80,82,83,86,87,88,89,90,118,134,135,137,138,147,149,150,154,180,181,183,190,200,202,209,225,229,233,234,235,236,237,238,239,243,244,248,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,333,334,335,336,337,338,344,345,346,351,353,354,355,356,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,42,42,42,42,42,42,42,42,-2,42,-108,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-102,-103,42,42,42,42,42,42,-100,42,-101,189,42,42,42,42,42,-96,42,240,42,-78,42,-61,-35,-98,-99,-95,-100,-21,189,42,42,-76,42,42,42,-54,-97,-77,42,42,42,42,-90,-91,-75,-74,42,42,42,42,-88,42,42,42,-86,42,-84,42,42,42,-82,42,42,-87,42,-85,-83,-81,42,42,42,42,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,41,44,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,80,82,83,86,87,88,89,90,118,134,135,137,147,149,150,154,180,181,183,200,202,209,225,229,233,234,235,236,237,239,241,243,244,248,253,255,256,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,333,334,335,336,337,338,344,345,346,351,353,354,355,356,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,35,35,35,35,35,35,35,35,-2,35,-108,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-102,-103,35,35,35,35,35,35,-100,35,-101,35,35,35,35,35,-96,35,35,-78,35,-61,-35,-98,-99,-95,-100,-21,35,274,35,-76,35,35,35,-54,-97,-77,35,35,35,35,-90,-91,-75,-74,35,35,35,35,-88,35,35,35,-86,35,-84,35,35,35,-82,35,35,-87,35,-85,-83,-81,35,35,35,35,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,44,49,68,82,83,96,134,135,137,168,181,183,202,209,212,213,214,215,216,217,220,224,225,229,233,234,235,236,237,244,253,255,256,257,264,268,276,282,284,286,287,296,298,299,301,303,305,307,308,309,310,319,320,321,322,323,324,327,330,334,335,336,337,338,339,344,345,346,351,353,354,355,356,357,358,],[43,43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,43,-72,-2,-108,-71,-102,-103,-73,-100,43,-101,43,-96,43,-78,43,43,-43,-45,-46,-47,-48,43,43,-61,-35,-98,-99,-95,-100,-21,-76,43,43,-54,-42,43,-97,-77,43,43,43,43,-90,-91,-75,-74,43,43,43,43,-88,43,43,43,-86,43,-84,43,-60,-44,43,-82,43,43,-87,-59,43,-85,-83,-81,43,43,43,43,-58,-57,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,44,49,82,83,134,137,181,202,225,229,233,234,235,236,237,244,256,268,276,296,298,299,301,309,321,323,335,338,345,346,351,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-108,-102,-103,-100,-101,-96,-78,-61,-35,-98,-99,-95,-100,-21,-76,-54,-97,-77,-90,-91,-75,-74,-88,-86,-84,-82,-87,-85,-83,-81,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,35,42,44,47,49,73,82,83,85,91,92,95,99,100,103,104,105,106,107,108,109,110,111,112,113,114,116,127,131,134,137,139,140,141,142,143,144,145,146,151,153,155,167,171,172,173,174,175,176,177,178,181,183,185,186,187,197,198,202,212,213,214,215,216,217,225,226,227,228,229,230,233,234,235,236,237,238,242,244,255,256,257,264,265,268,269,270,272,273,276,286,288,294,296,298,299,301,305,307,309,310,319,321,323,324,325,327,330,332,335,336,337,338,339,344,345,346,349,350,351,355,356,357,358,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-140,-139,-138,-2,-52,-108,-140,-102,-103,-94,-17,-89,-136,151,-51,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-143,-137,-147,-100,-101,192,-93,-30,-31,-32,-33,-34,-119,-49,-141,-142,-143,-70,225,-62,-63,-147,-65,229,-37,-96,235,237,-22,-24,-53,-50,-78,256,-43,-45,-46,-47,-48,-61,-64,-67,-68,-35,-36,-98,-99,-95,-100,-21,-23,-92,-76,288,-54,-42,294,-66,-97,-25,-26,-29,-28,-77,309,-107,-69,-90,-91,-75,-74,321,323,-88,325,335,-86,-84,338,-106,-60,-44,-39,-82,345,346,-87,-59,351,-85,-83,-38,-27,-81,357,358,-58,-57,]),'LBRACE':([18,34,35,42,73,75,76,77,79,84,91,92,95,103,104,105,106,107,108,109,110,111,112,113,114,127,129,146,151,153,155,156,164,167,169,170,171,182,184,207,250,251,254,263,277,280,285,288,304,306,318,325,348,352,],[47,85,-139,-138,47,-56,131,132,135,138,-17,-89,-136,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-137,168,-119,-49,-141,-142,-115,209,-143,-55,-41,224,135,-137,253,282,284,287,-40,-116,303,308,-107,320,322,334,-106,353,354,]),'SEMICOLON':([18,19,31,32,35,42,73,81,91,92,95,103,104,105,106,107,108,109,110,111,112,113,114,116,127,141,142,143,144,145,146,151,153,155,156,158,167,196,245,267,274,275,277,279,288,312,315,316,325,326,342,],[-140,49,82,83,-139,-138,-140,137,-17,-89,-136,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-143,-137,-30,-31,-32,-33,-34,-119,-49,-141,-142,-115,202,-143,244,276,296,298,299,-116,301,-107,327,330,332,-106,339,349,]),'PLUS':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,50,-139,-138,50,-140,50,50,50,50,50,50,-136,50,-124,-125,-126,-127,50,50,50,50,50,50,50,50,-143,-137,50,50,50,50,50,50,-119,-49,-141,-142,50,-143,-137,50,50,50,50,50,50,50,50,50,-107,-106,50,]),'MULTIPLY':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,52,-139,-138,52,-140,52,52,52,52,52,52,-136,52,52,52,-126,-127,52,52,52,52,52,52,52,52,-143,-137,52,52,52,52,52,52,-119,-49,-141,-142,52,-143,-137,52,52,52,52,52,52,52,52,52,-107,-106,52,]),'DIVIDE':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,53,-139,-138,53,-140,53,53,53,53,53,53,-136,53,53,53,-126,-127,53,53,53,53,53,53,53,53,-143,-137,53,53,53,53,53,53,-119,-49,-141,-142,53,-143,-137,53,53,53,53,53,53,53,53,53,-107,-106,53,]),'LT':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,156,157,158,167,184,194,195,196,197,199,203,211,232,245,246,254,272,275,277,279,285,288,300,304,306,312,315,318,325,326,342,343,348,352,],[-140,54,-139,-138,54,-140,54,54,54,54,54,54,-136,54,-124,-125,-126,-127,-128,-129,-130,-131,54,54,54,54,-143,-137,54,54,54,54,54,54,-119,-49,-141,-142,-115,201,54,-143,-137,54,201,54,54,54,201,201,54,54,201,201,54,54,-116,54,201,-107,201,201,201,201,201,201,-106,201,201,54,201,201,]),'GT':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,156,158,167,184,194,196,197,199,232,245,246,247,272,275,277,279,288,300,325,343,],[-140,55,-139,-138,55,-140,55,55,55,55,55,55,-136,55,-124,-125,-126,-127,-128,-129,-130,-131,55,55,55,55,-143,-137,55,55,55,55,55,55,-119,-49,-141,-142,-115,55,-143,-137,55,55,55,55,55,55,-118,277,55,55,-116,55,-107,-117,-106,55,]),'LEQ':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,56,-139,-138,56,-140,56,56,56,56,56,56,-136,56,-124,-125,-126,-127,-128,-129,-130,-131,56,56,56,56,-143,-137,56,56,56,56,56,56,-119,-49,-141,-142,56,-143,-137,56,56,56,56,56,56,56,56,56,-107,-106,56,]),'GEQ':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,57,-139,-138,57,-140,57,57,57,57,57,57,-136,57,-124,-125,-126,-127,-128,-129,-130,-131,57,57,57,57,-143,-137,57,57,57,57,57,57,-119,-49,-141,-142,57,-143,-137,57,57,57,57,57,57,57,57,57,-107,-106,57,]),'EQ':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,58,-139,-138,58,-140,58,58,58,58,58,58,-136,58,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,58,58,-143,-137,58,58,58,58,58,58,-119,-49,-141,-142,58,-143,-137,58,58,58,58,58,58,58,58,58,-107,-106,58,]),'NEQ':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,59,-139,-138,59,-140,59,59,59,59,59,59,-136,59,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,59,59,-143,-137,59,59,59,59,59,59,-119,-49,-141,-142,59,-143,-137,59,59,59,59,59,59,59,59,59,-107,-106,59,]),'AND':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,60,-139,-138,60,-140,60,60,60,60,60,60,-136,60,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,60,-143,-137,60,60,60,60,60,60,-119,-49,-141,-142,60,-143,-137,60,60,60,60,60,60,60,60,60,-107,-106,60,]),'OR':([18,19,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,272,275,279,288,325,343,],[-140,61,-139,-138,61,-140,61,61,61,61,61,61,-136,61,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-143,-137,61,61,61,61,61,61,-119,-49,-141,-142,61,-143,-137,61,61,61,61,61,61,61,61,61,-107,-106,61,]),'DOT':([18,19,29,35,42,72,73,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,116,127,136,141,142,143,144,145,146,151,153,155,158,167,184,194,196,197,199,232,245,271,272,275,279,288,325,343,],[-140,63,78,-139,-138,128,-140,128,128,128,128,128,128,-136,128,128,128,128,128,128,128,128,128,128,128,128,128,-143,-137,128,128,128,128,128,128,-119,-49,-141,-142,128,-143,-137,128,128,128,128,128,128,297,63,128,128,-107,-106,128,]),'COMMA':([18,35,40,42,47,48,62,71,73,85,91,92,93,94,95,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,125,126,127,139,140,141,142,143,144,145,146,147,151,153,155,156,161,162,163,165,167,169,170,171,175,176,186,187,194,197,198,199,204,205,206,210,211,242,246,247,249,263,265,266,269,270,272,273,277,288,292,294,295,300,313,314,325,328,350,],[-140,-139,-123,-138,-52,-146,-146,-112,-140,-94,-17,-89,147,-122,-136,152,-51,154,-145,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,154,-143,-112,165,-111,-114,-137,193,-93,-30,-31,-32,-33,-34,-119,-121,-49,-141,-142,-115,-112,-112,165,-110,-143,223,-41,-70,227,-65,238,-24,-120,-53,-50,-144,-112,165,165,-109,-113,-92,-118,278,165,-40,-66,-112,-25,-26,-29,-28,-116,-107,-112,-69,165,-117,-112,165,-106,165,-27,]),'ASSIGN':([18,37,64,97,116,156,157,195,203,277,],[-104,86,118,149,-105,-115,200,243,248,-116,]),'PLUS_ASSIGN':([18,37,116,],[-104,87,-105,]),'MINUS_ASSIGN':([18,37,116,],[-104,88,-105,]),'MULTIPLY_ASSIGN':([18,37,116,],[-104,89,-105,]),'DIVIDE_ASSIGN':([18,37,116,],[-104,90,-105,]),'RPAREN':([35,42,48,62,71,72,73,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,123,124,125,126,127,136,146,151,153,155,156,161,162,163,165,167,199,204,205,206,210,211,232,249,266,277,288,292,295,313,314,325,328,343,],[-139,-138,-146,-146,-112,127,-140,-17,-89,-136,153,-145,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,155,-112,164,-111,-114,-137,184,-119,-49,-141,-142,-115,-112,-112,207,-110,-143,-144,-112,250,251,-109,-113,267,280,-112,-116,-107,-112,316,-112,329,-106,340,350,]),'RBRACKET':([35,40,42,73,91,92,93,94,95,103,104,105,106,107,108,109,110,111,112,113,114,127,146,147,151,153,155,167,194,288,325,],[-139,-123,-138,-140,-17,-89,146,-122,-136,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-137,-119,-121,-49,-141,-142,-143,-120,-107,-106,]),'ARROW':([64,97,119,126,164,207,250,251,259,262,280,289,316,329,340,],[117,148,159,166,208,252,281,283,290,293,302,311,331,341,347,]),'IMPLEMENTS':([75,],[130,]),'INFO':([78,297,],[133,317,]),'COLON':([98,],[150,]),'ELSE':([134,235,236,],[182,-95,182,]),'UNDERSCORE':([138,238,],[191,191,]),'FAT_ARROW':([188,189,191,240,],[239,-18,-20,-19,]),'FROM':([192,],[241,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,135,209,253,282,284,287,303,308,320,322,334,353,354,],[2,183,255,286,305,307,310,319,324,336,337,344,355,356,]),'statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[3,44,3,44,3,3,44,3,3,44,3,3,44,44,3,44,44,3,3,44,3,44,44,44,3,3,44,44,]),'variable_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'constant_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'enum_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'interface_declaration':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'print_statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,135,182,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[11,11,11,233,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assignment':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expression_statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'match_statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'import_statement':([0,2,135,183,209,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expression':([0,2,25,30,31,33,38,39,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,80,86,87,88,89,90,118,135,147,149,150,154,180,183,200,209,239,243,248,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,333,334,336,337,344,353,354,355,356,],[19,19,72,79,81,84,91,92,94,95,102,103,104,105,106,107,108,109,110,111,112,113,114,102,136,141,142,143,144,145,158,19,194,196,197,199,232,19,245,19,272,275,279,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,343,19,19,19,19,19,19,19,19,]),'decorators':([0,2,135,168,183,209,212,224,253,255,264,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[22,22,22,220,22,22,220,220,22,22,220,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'assignment_expression':([0,2,135,183,209,239,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[32,32,32,32,32,273,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'decorator':([0,2,22,135,168,183,209,212,220,224,253,255,264,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[36,36,68,36,36,36,36,36,68,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'lvalue':([0,2,135,183,209,239,253,255,282,284,286,287,303,305,307,308,310,319,320,322,324,334,336,337,344,353,354,355,356,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'mut_opt':([17,168,212,224,264,],[45,222,222,222,222,]),'elements':([40,],[93,]),'struct_initializers':([47,],[99,]),'struct_initializer':([47,152,],[100,198,]),'arguments':([48,62,],[101,115,]),'parameters':([71,123,161,162,204,266,292,313,],[124,163,205,206,249,295,314,328,]),'parameter':([71,123,161,162,165,204,266,292,313,],[125,125,125,125,210,125,125,125,125,]),'implements_clause':([75,],[129,]),'block':([79,182,184,],[134,234,236,]),'import_items':([85,],[139,]),'type':([117,148,159,166,201,208,252,278,281,283,290,293,302,311,331,341,347,],[157,195,203,211,246,254,285,300,304,306,312,315,318,326,342,348,352,]),'interface_list':([130,],[169,]),'enum_variants_opt':([131,],[172,]),'enum_variants':([131,],[173,]),'empty':([131,175,],[174,228,]),'enum_variant_list':([131,],[175,]),'enum_variant':([131,227,],[176,265,]),'interface_members':([132,],[177,]),'interface_member':([132,177,],[178,230,]),'else_clause':([134,236,],[181,268,]),'match_arms':([138,],[185,]),'match_arm_list':([138,],[186,]),'match_arm':([138,238,],[187,269,]),'match_pattern':([138,238,],[188,188,]),'struct_members':([168,224,],[212,264,]),'struct_member':([168,212,224,264,],[213,257,213,257,]),'mut_field_declaration':([168,212,224,264,],[214,214,214,214,]),'field_declaration':([168,212,224,264,],[215,215,215,215,]),'method_declaration':([168,212,224,264,],[216,216,216,216,]),'struct_member_field':([168,212,224,264,],[217,217,217,217,]),'maybe_trailing_comma':([175,],[226,]),'type_list':([201,],[247,]),'inline_statement':([239,],[270,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',31),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',36),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',41),
  ('statement -> variable_declaration','statement',1,'p_statement_declaration','parser.py',46),
  ('statement -> constant_declaration','statement',1,'p_statement_declaration','parser.py',47),
  ('statement -> function_declaration','statement',1,'p_statement_declaration','parser.py',48),
  ('statement -> struct_declaration','statement',1,'p_statement_declaration','parser.py',49),
  ('statement -> enum_declaration','statement',1,'p_statement_declaration','parser.py',50),
  ('statement -> interface_declaration','statement',1,'p_statement_declaration','parser.py',51),
  ('statement -> print_statement','statement',1,'p_statement_declaration','parser.py',52),
  ('statement -> if_statement','statement',1,'p_statement_declaration','parser.py',53),
  ('statement -> return_statement','statement',1,'p_statement_declaration','parser.py',54),
  ('statement -> assignment','statement',1,'p_statement_declaration','parser.py',55),
  ('statement -> expression_statement','statement',1,'p_statement_declaration','parser.py',56),
  ('statement -> match_statement','statement',1,'p_statement_declaration','parser.py',57),
  ('statement -> import_statement','statement',1,'p_statement_declaration','parser.py',58),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',63),
  ('match_pattern -> NUMBER','match_pattern',1,'p_match_pattern_number','parser.py',70),
  ('match_pattern -> MINUS NUMBER','match_pattern',2,'p_match_pattern_number','parser.py',71),
  ('match_pattern -> UNDERSCORE','match_pattern',1,'p_match_pattern_wildcard','parser.py',78),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',86),
  ('match_arms -> match_arm_list','match_arms',1,'p_match_arms','parser.py',91),
  ('match_arms -> match_arm_list COMMA','match_arms',2,'p_match_arms','parser.py',92),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list_single','parser.py',97),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list_multiple','parser.py',102),
  ('match_arm -> match_pattern FAT_ARROW inline_statement','match_arm',3,'p_match_arm','parser.py',107),
  ('inline_statement -> PRINT DOT INFO LPAREN expression RPAREN','inline_statement',6,'p_inline_statement_print','parser.py',115),
  ('inline_statement -> assignment_expression','inline_statement',1,'p_inline_statement_assignment','parser.py',121),
  ('inline_statement -> expression','inline_statement',1,'p_inline_statement_expression','parser.py',126),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',133),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',134),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',135),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',136),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',137),
  ('interface_declaration -> INTERFACE IDENTIFIER LBRACE interface_members RBRACE','interface_declaration',5,'p_interface_declaration','parser.py',160),
  ('interface_members -> interface_members interface_member','interface_members',2,'p_interface_members_multiple','parser.py',165),
  ('interface_members -> interface_member','interface_members',1,'p_interface_members_single','parser.py',170),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_member',8,'p_interface_member','parser.py',175),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_member',6,'p_interface_member','parser.py',176),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list_multiple','parser.py',186),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list_single','parser.py',191),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members_multiple','parser.py',198),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members_single','parser.py',203),
  ('struct_member_field -> mut_opt IDENTIFIER ARROW type SEMICOLON','struct_member_field',5,'p_struct_member_field','parser.py',208),
  ('struct_member -> mut_field_declaration','struct_member',1,'p_struct_member','parser.py',213),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',214),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',215),
  ('struct_member -> struct_member_field','struct_member',1,'p_struct_member','parser.py',216),
  ('expression -> IDENTIFIER LBRACE struct_initializers RBRACE','expression',4,'p_expression_struct_instantiation','parser.py',221),
  ('struct_initializers -> struct_initializers COMMA struct_initializer','struct_initializers',3,'p_struct_initializers_multiple','parser.py',226),
  ('struct_initializers -> struct_initializer','struct_initializers',1,'p_struct_initializers_single','parser.py',233),
  ('struct_initializers -> <empty>','struct_initializers',0,'p_struct_initializers_empty','parser.py',240),
  ('struct_initializer -> IDENTIFIER COLON expression','struct_initializer',3,'p_struct_initializer','parser.py',245),
  ('struct_declaration -> STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',250),
  ('implements_clause -> IMPLEMENTS interface_list','implements_clause',2,'p_implements_clause_multiple','parser.py',255),
  ('implements_clause -> <empty>','implements_clause',0,'p_implements_clause_empty','parser.py',260),
  ('method_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',11,'p_method_declaration_with_decorators','parser.py',268),
  ('method_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',10,'p_method_declaration_without_decorators','parser.py',279),
  ('mut_field_declaration -> MUT LET IDENTIFIER ARROW type SEMICOLON','mut_field_declaration',6,'p_mut_field_declaration','parser.py',292),
  ('field_declaration -> LET IDENTIFIER ARROW type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',297),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',305),
  ('enum_variants_opt -> enum_variants','enum_variants_opt',1,'p_enum_variants_opt','parser.py',313),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',314),
  ('enum_variants -> enum_variant_list maybe_trailing_comma','enum_variants',2,'p_enum_variants','parser.py',323),
  ('enum_variant_list -> enum_variant','enum_variant_list',1,'p_enum_variant_list_single','parser.py',333),
  ('enum_variant_list -> enum_variant_list COMMA enum_variant','enum_variant_list',3,'p_enum_variant_list_multiple','parser.py',338),
  ('maybe_trailing_comma -> COMMA','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',346),
  ('maybe_trailing_comma -> empty','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',347),
  ('enum_variant -> IDENTIFIER LBRACE struct_members RBRACE','enum_variant',4,'p_enum_variant_with_fields','parser.py',353),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant_without_fields','parser.py',358),
  ('decorators -> decorators decorator','decorators',2,'p_decorators_multiple','parser.py',366),
  ('decorators -> decorator','decorators',1,'p_decorators_single','parser.py',371),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',376),
  ('constant_declaration -> CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLON','constant_declaration',8,'p_constant_declaration','parser.py',384),
  ('variable_declaration -> LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',8,'p_variable_declaration_let_with_type','parser.py',392),
  ('variable_declaration -> LET mut_opt IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let_without_type','parser.py',403),
  ('variable_declaration -> MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration_mut_with_type','parser.py',414),
  ('variable_declaration -> MUT IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration_mut_without_type','parser.py',425),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt_mut','parser.py',436),
  ('mut_opt -> <empty>','mut_opt',0,'p_mut_opt_empty','parser.py',441),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',12,'p_function_declaration_async_with_decorators','parser.py',449),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_async_with_decorators_no_return','parser.py',461),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_async_without_decorators','parser.py',473),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_async_without_decorators_no_return','parser.py',485),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_with_decorators','parser.py',499),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_with_decorators_no_return','parser.py',511),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_without_decorators','parser.py',523),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',8,'p_function_declaration_without_decorators_no_return','parser.py',535),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',547),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',555),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',563),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items_multiple','parser.py',568),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items_single','parser.py',573),
  ('import_items -> <empty>','import_items',0,'p_import_items_empty','parser.py',578),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',586),
  ('if_statement -> IF expression block else_clause','if_statement',4,'p_if_statement_no_parens','parser.py',591),
  ('if_statement -> IF LPAREN expression RPAREN block else_clause','if_statement',6,'p_if_statement_with_parens','parser.py',598),
  ('else_clause -> ELSE if_statement','else_clause',2,'p_else_clause_if','parser.py',605),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause_block','parser.py',613),
  ('else_clause -> <empty>','else_clause',0,'p_else_clause_empty','parser.py',620),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',629),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',630),
  ('assignment -> assignment_expression SEMICOLON','assignment',2,'p_assignment','parser.py',641),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue_identifier','parser.py',646),
  ('lvalue -> expression DOT IDENTIFIER','lvalue',3,'p_lvalue_member_access','parser.py',651),
  ('expression -> FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','expression',9,'p_expression_lambda','parser.py',659),
  ('expression -> FN LPAREN parameters RPAREN LBRACE statements RBRACE','expression',7,'p_expression_lambda_no_return','parser.py',665),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',671),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',679),
  ('parameters -> parameters COMMA','parameters',2,'p_parameters_multiple','parser.py',680),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',688),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','parser.py',693),
  ('parameter -> IDENTIFIER ARROW type','parameter',3,'p_parameter_with_type','parser.py',698),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter_without_type','parser.py',706),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',714),
  ('type -> type LT type_list GT','type',4,'p_type','parser.py',715),
  ('type_list -> type_list COMMA type','type_list',3,'p_type_list_multiple','parser.py',723),
  ('type_list -> type','type_list',1,'p_type_list_single','parser.py',728),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',736),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',741),
  ('elements -> elements COMMA','elements',2,'p_elements_multiple','parser.py',742),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',750),
  ('elements -> <empty>','elements',0,'p_elements_empty','parser.py',755),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',760),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',761),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',762),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',763),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',764),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',765),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',766),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',767),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',768),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',769),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',770),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',771),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',776),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',781),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',786),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',791),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',796),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',801),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',802),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_member_access','parser.py',813),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments_multiple','parser.py',818),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',823),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parser.py',828),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',833),
]
