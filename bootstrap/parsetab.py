
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTrightARROWrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT CATCH COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FINALLY FN FOR FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TEST THROW TRY UNDERSCORE WHILEprogram : statementsstatements : statements statementstatements : statementempty :statement : print_statement\n| throw_statement\n| variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| interface_declaration\n| enum_declaration\n| match_statement\n| if_statement\n| return_statement\n| expression_statement\n| assignment_identifier\n| assignment_member\n| import_statement\n| type_alias_declaration\n| try_finally\n| try_catch_finally\n| while_loop\n| for_loop\n| test_declarationprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONthrow_statement : THROW expression SEMICOLONvariable_declaration : LET IDENTIFIER type_opt ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER type_opt ASSIGN expression SEMICOLONmut_opt : MUT\n| emptytype_opt : COLON type\n| emptyconstant_declaration : CONST IDENTIFIER type_opt ASSIGN expression SEMICOLONtype_alias_declaration : IDENTIFIER IDENTIFIER ASSIGN type SEMICOLONopt_return_type : ARROW type\n| emptyfunction_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockfunction_declaration : decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockdecorators_opt : decorators\n| emptydecorators : decorators decorator\n| decoratordecorator : AT IDENTIFIERstruct_declaration : STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACEimplements_opt : IMPLEMENTS interface_list\n| emptyinterface_list : interface_list COMMA IDENTIFIER\n| IDENTIFIERstruct_members : struct_members struct_member\n| struct_memberstruct_member : field_declaration\n| method_declarationfield_declaration : mut_opt IDENTIFIER COLON type SEMICOLONmethod_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockinterface_declaration : INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACEcolon_opt : COLON\n| emptyinterface_members : interface_members interface_method\n| interface_methodinterface_method : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants optional_comma\n| emptyenum_variants : enum_variants COMMA enum_variant\n| enum_variantenum_variant : IDENTIFIER\n| IDENTIFIER LBRACE enum_fields RBRACEenum_fields : enum_fields COMMA field_declaration\n| field_declarationoptional_comma : COMMA\n| emptyexpression : LBRACKET array_elements RBRACKETarray_elements : array_elements COMMA expressionarray_elements : expressionarray_elements : emptywhile_loop : WHILE expression blockfor_loop : FOR IDENTIFIER IN expression blockmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arms match_arm\n| match_armmatch_arm : pattern ARROW blockpattern : NUMBER\n| MINUS NUMBERpattern : UNDERSCOREif_statement : IF expression block else_optelse_opt : ELSE if_statement\n| ELSE block\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment_identifier : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONassignment_member : expression DOT IDENTIFIER ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : AWAIT expressionexpression : expression DOT DOT expressionimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIER\n| IDENTIFIERexpression : LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPARENlambda_parameters : lambda_parameters COMMA lambda_parameterlambda_parameters : lambda_parameterlambda_parameter : IDENTIFIER COLON typeopt_lambda_return : ARROW type\n| emptytry_finally : TRY block FINALLY blocktry_catch_finally : TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block\n| TRY block CATCH LPAREN IDENTIFIER RPAREN blockparameters : parameters COMMA parameterparameters : parameterparameters : emptyparameter : IDENTIFIER COLON type default_opt\n| IDENTIFIERdefault_opt : ASSIGN expression\n| emptyblock : LBRACE statements RBRACEtype : IDENTIFIERtest_declaration : TEST STRING blockprimary_expression : IDENTIFIER struct_instantiation_opt\n| NUMBER\n| STRING\n| LPAREN expression RPARENpostfix_expression : primary_expression\n| postfix_expression LPAREN arguments RPAREN\n| postfix_expression DOT IDENTIFIERunary_expression : MINUS unary_expression %prec UMINUS\n| NOT unary_expression\n| postfix_expressionexpression : unary_expression\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionstruct_instantiation_opt : LBRACE struct_field_inits_opt RBRACE\n| emptystruct_field_inits_opt : struct_field_inits\n| emptystruct_field_inits : struct_field_inits COMMA struct_field_initstruct_field_inits : struct_field_initstruct_field_init : IDENTIFIER COLON expressionstruct_field_init : IDENTIFIERarguments : arguments COMMA expression\n| expression\n| empty'
    
_lr_action_items = {end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,98,134,161,162,168,170,191,192,193,194,195,218,220,223,225,240,263,267,271,272,276,284,285,286,287,288,289,290,291,296,301,311,325,326,331,340,344,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-103,-92,-27,-4,-91,-78,-127,-93,-94,-95,-96,-97,-87,-90,-115,-125,-35,-63,-80,-88,-89,-79,-98,-99,-100,-101,-102,-28,-29,-34,-45,-56,-26,-106,-117,-38,-39,-116,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,41,50,54,56,57,58,62,63,85,86,87,98,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,134,144,145,146,147,148,159,161,162,163,164,167,168,170,171,176,181,191,192,193,194,195,196,207,208,209,210,211,212,213,218,220,223,225,228,240,241,242,250,251,252,253,259,260,263,264,265,266,267,268,271,272,274,276,284,285,286,287,288,289,290,291,296,297,301,302,304,305,307,308,311,323,325,326,327,331,337,340,341,344,347,350,351,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-130,-138,-137,-132,-129,-2,-4,-103,-128,-4,-152,-92,-104,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-27,196,-153,-154,-156,-158,-4,-4,-91,221,-108,225,-78,-127,-74,-134,-105,-93,-94,-95,-96,-97,-151,-68,263,-4,-65,-67,267,-82,-87,-90,-115,-125,-133,-35,-155,-157,296,-51,-52,-53,301,-60,-63,-64,-72,-73,-80,-81,-88,-89,-107,-79,-98,-99,-100,-101,-102,-28,-29,-34,-45,-50,-56,-59,323,-71,-66,-83,-26,-69,-106,-117,-109,-38,-70,-39,-54,-116,-62,-55,-61,]),'DOT':([25,27,30,41,50,54,56,57,61,62,64,77,85,87,95,96,97,102,107,109,110,112,118,119,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[59,64,-4,-130,-138,114,-132,-129,119,-4,120,119,-128,-152,119,119,119,119,119,119,-135,-136,-131,120,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-74,119,-134,-105,-151,119,119,-133,119,119,119,119,119,119,119,119,119,119,119,-109,119,]),'SEMICOLON':([27,30,39,41,50,54,56,57,62,77,85,87,97,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,176,181,189,190,196,228,234,235,236,237,238,239,243,244,278,309,327,334,343,349,],[63,-4,98,-130,-138,-137,-132,-129,-4,134,-128,-152,162,-104,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,191,192,193,194,195,-74,-134,-105,-126,240,-151,-133,284,285,286,287,288,289,290,291,311,325,-109,341,347,351,]),'PLUS':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[65,-4,-130,-138,-137,-132,-129,65,-4,65,-128,-152,65,65,65,65,65,65,-135,-136,-131,-139,-140,-141,-142,65,65,65,65,65,65,65,65,65,65,65,65,65,-74,65,-134,-105,-151,65,65,-133,65,65,65,65,65,65,65,65,65,65,65,-109,65,]),'MULTIPLY':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[67,-4,-130,-138,-137,-132,-129,67,-4,67,-128,-152,67,67,67,67,67,67,-135,-136,-131,67,67,-141,-142,67,67,67,67,67,67,67,67,67,67,67,67,67,-74,67,-134,-105,-151,67,67,-133,67,67,67,67,67,67,67,67,67,67,67,-109,67,]),'DIVIDE':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[68,-4,-130,-138,-137,-132,-129,68,-4,68,-128,-152,68,68,68,68,68,68,-135,-136,-131,68,68,-141,-142,68,68,68,68,68,68,68,68,68,68,68,68,68,-74,68,-134,-105,-151,68,68,-133,68,68,68,68,68,68,68,68,68,68,68,-109,68,]),'LT':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[69,-4,-130,-138,-137,-132,-129,69,-4,69,-128,-152,69,69,69,69,69,69,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,69,69,69,69,69,69,69,69,69,-74,69,-134,-105,-151,69,69,-133,69,69,69,69,69,69,69,69,69,69,69,-109,69,]),'GT':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[70,-4,-130,-138,-137,-132,-129,70,-4,70,-128,-152,70,70,70,70,70,70,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,70,70,70,70,70,70,70,70,70,-74,70,-134,-105,-151,70,70,-133,70,70,70,70,70,70,70,70,70,70,70,-109,70,]),'LEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[71,-4,-130,-138,-137,-132,-129,71,-4,71,-128,-152,71,71,71,71,71,71,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,71,71,71,71,71,71,71,71,71,-74,71,-134,-105,-151,71,71,-133,71,71,71,71,71,71,71,71,71,71,71,-109,71,]),'GEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[72,-4,-130,-138,-137,-132,-129,72,-4,72,-128,-152,72,72,72,72,72,72,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,72,72,72,72,72,72,72,72,72,-74,72,-134,-105,-151,72,72,-133,72,72,72,72,72,72,72,72,72,72,72,-109,72,]),'EQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[73,-4,-130,-138,-137,-132,-129,73,-4,73,-128,-152,73,73,73,73,73,73,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,73,73,73,73,73,73,73,-74,73,-134,-105,-151,73,73,-133,73,73,73,73,73,73,73,73,73,73,73,-109,73,]),'NEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[74,-4,-130,-138,-137,-132,-129,74,-4,74,-128,-152,74,74,74,74,74,74,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,74,74,74,74,74,74,74,-74,74,-134,-105,-151,74,74,-133,74,74,74,74,74,74,74,74,74,74,74,-109,74,]),'AND':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[75,-4,-130,-138,-137,-132,-129,75,-4,75,-128,-152,75,75,75,75,75,75,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,75,75,75,75,75,75,-74,75,-134,-105,-151,75,75,-133,75,75,75,75,75,75,75,75,75,75,75,-109,75,]),'OR':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,171,174,176,181,196,226,227,228,230,234,235,236,237,238,239,242,243,244,277,327,339,],[76,-4,-130,-138,-137,-132,-129,76,-4,76,-128,-152,76,76,76,76,76,76,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,76,76,76,76,76,-74,76,-134,-105,-151,76,76,-133,76,76,76,76,76,76,76,76,76,76,76,-109,76,]),'ASSIGN':([30,78,79,88,89,121,135,137,149,150,188,189,314,],[80,-4,138,-4,-4,182,187,-33,199,200,-32,-126,329,]),'PLUS_ASSIGN':([30,121,],[81,183,]),'MINUS_ASSIGN':([30,121,],[82,184,]),'MULTIPLY_ASSIGN':([30,121,],[83,185,]),'DIVIDE_ASSIGN':([30,121,],[84,186,]),'LBRACE':([30,40,41,42,50,54,56,57,62,85,87,92,93,94,95,96,102,104,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,153,155,156,157,158,165,171,176,181,189,196,204,205,207,219,226,228,231,269,279,281,293,300,310,313,315,317,319,327,332,333,338,345,348,],[86,99,-130,101,-138,-137,-132,-129,86,-128,-152,-4,-4,159,160,101,101,101,-104,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,203,-47,206,-57,-58,101,-74,-134,-105,-126,-151,-46,-49,262,101,101,-133,-4,101,101,-114,-4,-48,101,-113,101,-37,-4,-109,-36,101,101,-4,101,]),'RPAREN':([41,50,54,56,57,61,62,85,87,109,110,112,113,118,122,123,124,125,126,127,128,129,130,131,132,133,171,173,174,175,176,178,179,181,189,196,201,225,228,230,245,246,247,248,249,275,277,282,283,295,312,314,318,322,327,328,330,335,336,339,342,],[-130,-138,-137,-132,-129,118,-4,-128,-152,-104,-135,-136,-4,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-74,228,-160,-161,-134,231,-111,-105,-126,-151,-4,-125,-133,278,-122,293,-119,-120,-4,310,-159,-110,-112,319,327,-4,-118,-4,-109,-121,-124,-4,343,-123,345,]),'RBRACKET':([41,48,50,54,56,57,62,85,87,106,107,108,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,171,176,181,196,227,228,327,],[-130,-4,-138,-137,-132,-129,-4,-128,-152,171,-76,-77,-104,-135,-136,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-74,-134,-105,-151,-75,-133,-109,]),'COMMA':([41,48,50,54,56,57,62,85,87,106,107,108,109,110,112,113,118,122,123,124,125,126,127,128,129,130,131,132,133,145,147,148,163,164,171,173,174,175,176,178,179,181,189,196,201,204,205,207,209,211,227,228,241,242,245,246,247,248,249,274,277,282,283,295,300,304,305,307,314,318,322,323,327,328,330,335,336,337,339,341,342,],[-130,-4,-138,-137,-132,-129,-4,-128,-152,172,-76,-77,-104,-135,-136,-4,-131,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,197,-156,-158,222,-108,-74,229,-160,-161,-134,232,-111,-105,-126,-151,-4,258,-49,-68,265,-67,-75,-133,-155,-157,-122,294,-119,-120,-4,-107,-159,-110,-112,294,-48,324,-71,-66,-4,-118,-4,-69,-109,-121,-124,-4,294,-70,-123,-54,294,]),'INFO':([59,],[116,]),'COLON':([78,88,89,93,148,180,245,298,],[136,136,136,157,198,233,292,320,]),'IMPLEMENTS':([92,],[154,]),'FINALLY':([100,225,326,],[165,-125,338,]),'CATCH':([100,225,],[166,-125,]),'IN':([103,],[169,]),'UNDERSCORE':([160,212,213,225,268,308,],[217,217,-82,-125,-81,-83,]),'ELSE':([161,225,],[219,-125,]),'ARROW':([214,215,217,231,270,293,319,343,345,],[269,-84,-86,280,-85,316,316,346,316,]),'FROM':([221,],[273,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,101,],[2,167,]),'statement':([0,2,101,167,],[3,58,3,58,]),'print_statement':([0,2,101,167,],[4,4,4,4,]),'throw_statement':([0,2,101,167,],[5,5,5,5,]),'variable_declaration':([0,2,101,167,],[6,6,6,6,]),'constant_declaration':([0,2,101,167,],[7,7,7,7,]),'function_declaration':([0,2,101,167,],[8,8,8,8,]),'struct_declaration':([0,2,101,167,],[9,9,9,9,]),'interface_declaration':([0,2,101,167,],[10,10,10,10,]),'enum_declaration':([0,2,101,167,],[11,11,11,11,]),'match_statement':([0,2,101,167,],[12,12,12,12,]),'if_statement':([0,2,101,167,219,],[13,13,13,13,271,]),'return_statement':([0,2,101,167,],[14,14,14,14,]),'expression_statement':([0,2,101,167,],[15,15,15,15,]),'assignment_identifier':([0,2,101,167,],[16,16,16,16,]),'assignment_member':([0,2,101,167,],[17,17,17,17,]),'import_statement':([0,2,101,167,],[18,18,18,18,]),'type_alias_declaration':([0,2,101,167,],[19,19,19,19,]),'try_finally':([0,2,101,167,],[20,20,20,20,]),'try_catch_finally':([0,2,101,167,],[21,21,21,21,]),'while_loop':([0,2,101,167,],[22,22,22,22,]),'for_loop':([0,2,101,167,],[23,23,23,23,]),'test_declaration':([0,2,101,167,],[24,24,24,24,]),'expression':([0,2,26,28,37,38,39,43,48,49,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,167,169,172,177,182,183,184,185,186,187,198,199,200,229,329,],[27,27,61,77,95,96,97,102,107,109,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,27,61,174,181,27,226,227,230,234,235,236,237,238,239,242,243,244,277,339,]),'decorators_opt':([0,2,101,167,203,250,],[33,33,33,33,255,255,]),'decorators':([0,2,101,167,203,250,],[46,46,46,46,46,46,]),'empty':([0,2,30,48,62,78,86,88,89,92,93,101,113,159,161,167,201,203,209,231,249,250,262,293,314,319,322,324,335,345,],[47,47,87,108,87,137,146,137,137,155,158,47,175,210,220,47,248,257,266,281,248,257,306,317,330,317,248,306,248,317,]),'unary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,167,169,172,177,182,183,184,185,186,187,198,199,200,229,329,],[50,50,50,50,50,50,50,50,50,50,110,112,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'decorator':([0,2,46,101,167,203,250,],[52,52,105,52,52,52,52,]),'postfix_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,167,169,172,177,182,183,184,185,186,187,198,199,200,229,329,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'primary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,167,169,172,177,182,183,184,185,186,187,198,199,200,229,329,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'struct_instantiation_opt':([30,62,],[85,85,]),'block':([42,96,102,104,165,219,226,269,279,310,315,333,338,348,],[100,161,168,170,223,272,276,308,312,326,331,340,344,350,]),'array_elements':([48,],[106,]),'type_opt':([78,88,89,],[135,149,150,]),'struct_field_inits_opt':([86,],[144,]),'struct_field_inits':([86,],[145,]),'struct_field_init':([86,197,],[147,241,]),'implements_opt':([92,],[153,]),'colon_opt':([93,],[156,]),'import_items':([99,],[163,]),'arguments':([113,],[173,]),'lambda_parameters':([117,],[178,]),'lambda_parameter':([117,232,],[179,282,]),'type':([136,138,233,280,292,316,320,346,],[188,190,283,313,314,332,334,349,]),'interface_list':([154,],[204,]),'enum_variants_opt':([159,],[208,]),'enum_variants':([159,],[209,]),'enum_variant':([159,265,],[211,307,]),'match_arms':([160,],[212,]),'match_arm':([160,212,],[213,268,]),'pattern':([160,212,],[214,214,]),'else_opt':([161,],[218,]),'parameters':([201,249,322,335,],[246,295,336,342,]),'parameter':([201,249,294,322,335,],[247,247,318,247,247,]),'struct_members':([203,],[250,]),'struct_member':([203,250,],[251,297,]),'field_declaration':([203,250,262,324,],[252,252,305,337,]),'method_declaration':([203,250,],[253,253,]),'mut_opt':([203,250,262,324,],[254,254,254,254,]),'interface_members':([206,],[259,]),'interface_method':([206,259,],[260,302,]),'optional_comma':([209,],[264,]),'opt_lambda_return':([231,],[279,]),'enum_fields':([262,],[304,]),'opt_return_type':([293,319,345,],[315,333,348,]),'default_opt':([314,],[328,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',25),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',32),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',37),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',44),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',51),
  ('statement -> throw_statement','statement',1,'p_statement','parser.py',52),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',53),
  ('statement -> constant_declaration','statement',1,'p_statement','parser.py',54),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',55),
  ('statement -> struct_declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> interface_declaration','statement',1,'p_statement','parser.py',57),
  ('statement -> enum_declaration','statement',1,'p_statement','parser.py',58),
  ('statement -> match_statement','statement',1,'p_statement','parser.py',59),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',60),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',61),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',62),
  ('statement -> assignment_identifier','statement',1,'p_statement','parser.py',63),
  ('statement -> assignment_member','statement',1,'p_statement','parser.py',64),
  ('statement -> import_statement','statement',1,'p_statement','parser.py',65),
  ('statement -> type_alias_declaration','statement',1,'p_statement','parser.py',66),
  ('statement -> try_finally','statement',1,'p_statement','parser.py',67),
  ('statement -> try_catch_finally','statement',1,'p_statement','parser.py',68),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',69),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',70),
  ('statement -> test_declaration','statement',1,'p_statement','parser.py',71),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',78),
  ('throw_statement -> THROW expression SEMICOLON','throw_statement',3,'p_throw_statement','parser.py',85),
  ('variable_declaration -> LET IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let','parser.py',94),
  ('variable_declaration -> MUT IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_mut','parser.py',100),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt','parser.py',106),
  ('mut_opt -> empty','mut_opt',1,'p_mut_opt','parser.py',107),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','parser.py',114),
  ('type_opt -> empty','type_opt',1,'p_type_opt','parser.py',115),
  ('constant_declaration -> CONST IDENTIFIER type_opt ASSIGN expression SEMICOLON','constant_declaration',6,'p_constant_declaration','parser.py',122),
  ('type_alias_declaration -> IDENTIFIER IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',132),
  ('opt_return_type -> ARROW type','opt_return_type',2,'p_opt_return_type','parser.py',141),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','parser.py',142),
  ('function_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',8,'p_function_declaration','parser.py',150),
  ('function_declaration -> decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',9,'p_function_declaration_async','parser.py',162),
  ('decorators_opt -> decorators','decorators_opt',1,'p_decorators_opt','parser.py',174),
  ('decorators_opt -> empty','decorators_opt',1,'p_decorators_opt','parser.py',175),
  ('decorators -> decorators decorator','decorators',2,'p_decorators','parser.py',180),
  ('decorators -> decorator','decorators',1,'p_decorators','parser.py',181),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',189),
  ('struct_declaration -> STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',196),
  ('implements_opt -> IMPLEMENTS interface_list','implements_opt',2,'p_implements_opt','parser.py',204),
  ('implements_opt -> empty','implements_opt',1,'p_implements_opt','parser.py',205),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list','parser.py',210),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list','parser.py',211),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members','parser.py',219),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members','parser.py',220),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',228),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',229),
  ('field_declaration -> mut_opt IDENTIFIER COLON type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',238),
  ('method_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','method_declaration',8,'p_method_declaration','parser.py',250),
  ('interface_declaration -> INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACE','interface_declaration',6,'p_interface_declaration','parser.py',268),
  ('colon_opt -> COLON','colon_opt',1,'p_colon_opt','parser.py',275),
  ('colon_opt -> empty','colon_opt',1,'p_colon_opt','parser.py',276),
  ('interface_members -> interface_members interface_method','interface_members',2,'p_interface_members','parser.py',281),
  ('interface_members -> interface_method','interface_members',1,'p_interface_members','parser.py',282),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_method',8,'p_interface_method','parser.py',290),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_method',6,'p_interface_method','parser.py',291),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',304),
  ('enum_variants_opt -> enum_variants optional_comma','enum_variants_opt',2,'p_enum_variants_opt','parser.py',311),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',312),
  ('enum_variants -> enum_variants COMMA enum_variant','enum_variants',3,'p_enum_variants','parser.py',317),
  ('enum_variants -> enum_variant','enum_variants',1,'p_enum_variants','parser.py',318),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant','parser.py',326),
  ('enum_variant -> IDENTIFIER LBRACE enum_fields RBRACE','enum_variant',4,'p_enum_variant','parser.py',327),
  ('enum_fields -> enum_fields COMMA field_declaration','enum_fields',3,'p_enum_fields','parser.py',338),
  ('enum_fields -> field_declaration','enum_fields',1,'p_enum_fields','parser.py',339),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_comma','parser.py',347),
  ('optional_comma -> empty','optional_comma',1,'p_optional_comma','parser.py',348),
  ('expression -> LBRACKET array_elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',355),
  ('array_elements -> array_elements COMMA expression','array_elements',3,'p_array_elements_multiple','parser.py',360),
  ('array_elements -> expression','array_elements',1,'p_array_elements_single','parser.py',365),
  ('array_elements -> empty','array_elements',1,'p_array_elements_empty','parser.py',370),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','parser.py',377),
  ('for_loop -> FOR IDENTIFIER IN expression block','for_loop',5,'p_for_loop','parser.py',384),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',391),
  ('match_arms -> match_arms match_arm','match_arms',2,'p_match_arms','parser.py',398),
  ('match_arms -> match_arm','match_arms',1,'p_match_arms','parser.py',399),
  ('match_arm -> pattern ARROW block','match_arm',3,'p_match_arm','parser.py',407),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',414),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_number','parser.py',415),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',424),
  ('if_statement -> IF expression block else_opt','if_statement',4,'p_if_statement','parser.py',431),
  ('else_opt -> ELSE if_statement','else_opt',2,'p_else_opt','parser.py',440),
  ('else_opt -> ELSE block','else_opt',2,'p_else_opt','parser.py',441),
  ('else_opt -> empty','else_opt',1,'p_else_opt','parser.py',442),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',454),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',455),
  ('assignment_identifier -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',465),
  ('assignment_identifier -> IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',466),
  ('assignment_identifier -> IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',467),
  ('assignment_identifier -> IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',468),
  ('assignment_identifier -> IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',469),
  ('assignment_member -> expression DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',482),
  ('assignment_member -> expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',483),
  ('assignment_member -> expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',484),
  ('assignment_member -> expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',485),
  ('assignment_member -> expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',486),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',501),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',506),
  ('expression -> expression DOT DOT expression','expression',4,'p_expression_range','parser.py',511),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',518),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items','parser.py',525),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items','parser.py',526),
  ('expression -> LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPAREN','expression',8,'p_expression_lambda','parser.py',536),
  ('lambda_parameters -> lambda_parameters COMMA lambda_parameter','lambda_parameters',3,'p_lambda_parameters_multiple','parser.py',541),
  ('lambda_parameters -> lambda_parameter','lambda_parameters',1,'p_lambda_parameters_single','parser.py',546),
  ('lambda_parameter -> IDENTIFIER COLON type','lambda_parameter',3,'p_lambda_parameter','parser.py',551),
  ('opt_lambda_return -> ARROW type','opt_lambda_return',2,'p_opt_lambda_return','parser.py',556),
  ('opt_lambda_return -> empty','opt_lambda_return',1,'p_opt_lambda_return','parser.py',557),
  ('try_finally -> TRY block FINALLY block','try_finally',4,'p_try_finally','parser.py',564),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block','try_catch_finally',9,'p_try_catch_finally','parser.py',569),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block','try_catch_finally',7,'p_try_catch_finally','parser.py',570),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',597),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',602),
  ('parameters -> empty','parameters',1,'p_parameters_empty','parser.py',607),
  ('parameter -> IDENTIFIER COLON type default_opt','parameter',4,'p_parameter','parser.py',612),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','parser.py',613),
  ('default_opt -> ASSIGN expression','default_opt',2,'p_default_opt','parser.py',627),
  ('default_opt -> empty','default_opt',1,'p_default_opt','parser.py',628),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',635),
  ('type -> IDENTIFIER','type',1,'p_type_identifier','parser.py',642),
  ('test_declaration -> TEST STRING block','test_declaration',3,'p_test_declaration','parser.py',649),
  ('primary_expression -> IDENTIFIER struct_instantiation_opt','primary_expression',2,'p_primary_expression','parser.py',658),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',659),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',660),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',661),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',677),
  ('postfix_expression -> postfix_expression LPAREN arguments RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',678),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',679),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',689),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','parser.py',690),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',691),
  ('expression -> unary_expression','expression',1,'p_expression','parser.py',702),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',703),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',704),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',705),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',706),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',707),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',708),
  ('expression -> expression LEQ expression','expression',3,'p_expression','parser.py',709),
  ('expression -> expression GEQ expression','expression',3,'p_expression','parser.py',710),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',711),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',712),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',713),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',714),
  ('struct_instantiation_opt -> LBRACE struct_field_inits_opt RBRACE','struct_instantiation_opt',3,'p_struct_instantiation_opt','parser.py',722),
  ('struct_instantiation_opt -> empty','struct_instantiation_opt',1,'p_struct_instantiation_opt','parser.py',723),
  ('struct_field_inits_opt -> struct_field_inits','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',731),
  ('struct_field_inits_opt -> empty','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',732),
  ('struct_field_inits -> struct_field_inits COMMA struct_field_init','struct_field_inits',3,'p_struct_field_inits_multiple','parser.py',737),
  ('struct_field_inits -> struct_field_init','struct_field_inits',1,'p_struct_field_inits_single','parser.py',742),
  ('struct_field_init -> IDENTIFIER COLON expression','struct_field_init',3,'p_struct_field_init','parser.py',747),
  ('struct_field_init -> IDENTIFIER','struct_field_init',1,'p_struct_field_init_shorthand','parser.py',752),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',759),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',760),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',761),
]
