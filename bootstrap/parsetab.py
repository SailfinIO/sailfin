
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTrightARROWrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT CATCH COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FINALLY FN FOR FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TEST THROW TRY UNDERSCORE WHILEprogram : statementsstatements : statements statementstatements : statementempty :statement : print_statement\n| throw_statement\n| variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| interface_declaration\n| enum_declaration\n| match_statement\n| if_statement\n| return_statement\n| expression_statement\n| assignment_identifier\n| assignment_member\n| import_statement\n| type_alias_declaration\n| try_finally\n| try_catch_finally\n| while_loop\n| for_loop\n| test_declarationprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONthrow_statement : THROW expression SEMICOLONvariable_declaration : LET IDENTIFIER type_opt ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER type_opt ASSIGN expression SEMICOLONmut_opt : MUT\n| emptytype_opt : COLON type\n| emptyconstant_declaration : CONST IDENTIFIER type_opt ASSIGN expression SEMICOLONtype_alias_declaration : IDENTIFIER IDENTIFIER ASSIGN type SEMICOLONopt_return_type : ARROW type\n| emptyfunction_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockfunction_declaration : decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockdecorators_opt : decorators\n| emptydecorators : decorators decorator\n| decoratordecorator : AT IDENTIFIERstruct_declaration : STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACEimplements_opt : IMPLEMENTS interface_list\n| emptyinterface_list : interface_list COMMA IDENTIFIER\n| IDENTIFIERstruct_members : struct_members struct_member\n| struct_memberstruct_member : field_declaration\n| method_declarationfield_declaration : mut_opt IDENTIFIER COLON type SEMICOLONmethod_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockinterface_declaration : INTERFACE IDENTIFIER COLON LBRACE interface_members RBRACEinterface_members : interface_members interface_method\n| interface_methodinterface_method : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants optional_comma\n| emptyenum_variants : enum_variants COMMA enum_variant\n| enum_variantenum_variant : IDENTIFIER\n| IDENTIFIER LBRACE enum_fields RBRACEenum_fields : enum_fields COMMA field_declaration\n| field_declarationoptional_comma : COMMA\n| emptyexpression : LBRACKET array_elements RBRACKETarray_elements : array_elements COMMA expressionarray_elements : expressionarray_elements : emptywhile_loop : WHILE expression blockfor_loop : FOR IDENTIFIER IN expression blockmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arms match_arm\n| match_armmatch_arm : pattern ARROW blockpattern : NUMBER\n| MINUS NUMBERpattern : UNDERSCOREif_statement : IF expression block else_optelse_opt : ELSE if_statement\n| ELSE block\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment_identifier : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONassignment_member : expression DOT IDENTIFIER ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : AWAIT expressionexpression : expression DOT DOT expressionimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIER\n| IDENTIFIERexpression : LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPARENlambda_parameters : lambda_parameters COMMA lambda_parameterlambda_parameters : lambda_parameterlambda_parameter : IDENTIFIER COLON typeopt_lambda_return : ARROW type\n| emptytry_finally : TRY block FINALLY blocktry_catch_finally : TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block\n| TRY block CATCH LPAREN IDENTIFIER RPAREN blockparameters : parameters COMMA parameterparameters : parameterparameters : emptyparameter : IDENTIFIER COLON type default_opt\n| IDENTIFIERdefault_opt : ASSIGN expression\n| emptyblock : LBRACE statements RBRACEtype : IDENTIFIERtest_declaration : TEST STRING blockprimary_expression : IDENTIFIER struct_instantiation_opt\n| NUMBER\n| STRING\n| LPAREN expression RPARENpostfix_expression : primary_expression\n| postfix_expression LPAREN arguments RPAREN\n| postfix_expression DOT IDENTIFIERunary_expression : MINUS unary_expression %prec UMINUS\n| NOT unary_expression\n| postfix_expressionexpression : unary_expression\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionstruct_instantiation_opt : LBRACE struct_field_inits_opt RBRACE\n| emptystruct_field_inits_opt : struct_field_inits\n| emptystruct_field_inits : struct_field_inits COMMA struct_field_initstruct_field_inits : struct_field_initstruct_field_init : IDENTIFIER COLON expressionarguments : arguments COMMA expression\n| expression\n| empty'
    
_lr_action_items = {end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,98,134,159,160,166,168,189,190,191,192,193,216,218,221,223,238,261,265,269,270,274,282,283,284,285,286,287,288,289,294,299,309,323,324,329,338,342,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-101,-90,-27,-4,-89,-76,-125,-91,-92,-93,-94,-95,-85,-88,-113,-123,-35,-61,-78,-86,-87,-77,-96,-97,-98,-99,-100,-28,-29,-34,-45,-56,-26,-104,-115,-38,-39,-114,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,41,50,54,56,57,58,62,63,85,86,87,98,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,134,144,145,146,147,157,159,160,161,162,165,166,168,169,174,179,189,190,191,192,193,194,205,206,207,208,209,210,211,216,218,221,223,226,238,239,240,248,249,250,251,257,258,261,262,263,264,265,266,269,270,272,274,282,283,284,285,286,287,288,289,294,295,299,300,302,303,305,306,309,321,323,324,325,329,335,338,339,342,345,348,349,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-128,-136,-135,-130,-127,-2,-4,-101,-126,-4,-150,-90,-102,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-27,194,-151,-152,-154,-4,-4,-89,219,-106,223,-76,-125,-72,-132,-103,-91,-92,-93,-94,-95,-149,-66,261,-4,-63,-65,265,-80,-85,-88,-113,-123,-131,-35,-153,-155,294,-51,-52,-53,299,-58,-61,-62,-70,-71,-78,-79,-86,-87,-105,-77,-96,-97,-98,-99,-100,-28,-29,-34,-45,-50,-56,-57,321,-69,-64,-81,-26,-67,-104,-115,-107,-38,-68,-39,-54,-114,-60,-55,-59,]),'DOT':([25,27,30,41,50,54,56,57,61,62,64,77,85,87,95,96,97,102,107,109,110,112,118,119,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[59,64,-4,-128,-136,114,-130,-127,119,-4,120,119,-126,-150,119,119,119,119,119,119,-133,-134,-129,120,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-72,119,-132,-103,-149,119,119,-131,119,119,119,119,119,119,119,119,119,119,119,-107,119,]),'SEMICOLON':([27,30,39,41,50,54,56,57,62,77,85,87,97,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,174,179,187,188,194,226,232,233,234,235,236,237,241,242,276,307,325,332,341,347,],[63,-4,98,-128,-136,-135,-130,-127,-4,134,-126,-150,160,-102,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,189,190,191,192,193,-72,-132,-103,-124,238,-149,-131,282,283,284,285,286,287,288,289,309,323,-107,339,345,349,]),'PLUS':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[65,-4,-128,-136,-135,-130,-127,65,-4,65,-126,-150,65,65,65,65,65,65,-133,-134,-129,-137,-138,-139,-140,65,65,65,65,65,65,65,65,65,65,65,65,65,-72,65,-132,-103,-149,65,65,-131,65,65,65,65,65,65,65,65,65,65,65,-107,65,]),'MULTIPLY':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[67,-4,-128,-136,-135,-130,-127,67,-4,67,-126,-150,67,67,67,67,67,67,-133,-134,-129,67,67,-139,-140,67,67,67,67,67,67,67,67,67,67,67,67,67,-72,67,-132,-103,-149,67,67,-131,67,67,67,67,67,67,67,67,67,67,67,-107,67,]),'DIVIDE':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[68,-4,-128,-136,-135,-130,-127,68,-4,68,-126,-150,68,68,68,68,68,68,-133,-134,-129,68,68,-139,-140,68,68,68,68,68,68,68,68,68,68,68,68,68,-72,68,-132,-103,-149,68,68,-131,68,68,68,68,68,68,68,68,68,68,68,-107,68,]),'LT':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[69,-4,-128,-136,-135,-130,-127,69,-4,69,-126,-150,69,69,69,69,69,69,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,69,69,69,69,69,69,69,69,69,-72,69,-132,-103,-149,69,69,-131,69,69,69,69,69,69,69,69,69,69,69,-107,69,]),'GT':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[70,-4,-128,-136,-135,-130,-127,70,-4,70,-126,-150,70,70,70,70,70,70,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,70,70,70,70,70,70,70,70,70,-72,70,-132,-103,-149,70,70,-131,70,70,70,70,70,70,70,70,70,70,70,-107,70,]),'LEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[71,-4,-128,-136,-135,-130,-127,71,-4,71,-126,-150,71,71,71,71,71,71,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,71,71,71,71,71,71,71,71,71,-72,71,-132,-103,-149,71,71,-131,71,71,71,71,71,71,71,71,71,71,71,-107,71,]),'GEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[72,-4,-128,-136,-135,-130,-127,72,-4,72,-126,-150,72,72,72,72,72,72,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,72,72,72,72,72,72,72,72,72,-72,72,-132,-103,-149,72,72,-131,72,72,72,72,72,72,72,72,72,72,72,-107,72,]),'EQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[73,-4,-128,-136,-135,-130,-127,73,-4,73,-126,-150,73,73,73,73,73,73,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,73,73,73,73,73,73,73,-72,73,-132,-103,-149,73,73,-131,73,73,73,73,73,73,73,73,73,73,73,-107,73,]),'NEQ':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[74,-4,-128,-136,-135,-130,-127,74,-4,74,-126,-150,74,74,74,74,74,74,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,74,74,74,74,74,74,74,-72,74,-132,-103,-149,74,74,-131,74,74,74,74,74,74,74,74,74,74,74,-107,74,]),'AND':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[75,-4,-128,-136,-135,-130,-127,75,-4,75,-126,-150,75,75,75,75,75,75,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,75,75,75,75,75,75,-72,75,-132,-103,-149,75,75,-131,75,75,75,75,75,75,75,75,75,75,75,-107,75,]),'OR':([27,30,41,50,54,56,57,61,62,77,85,87,95,96,97,102,107,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,169,172,174,179,194,224,225,226,228,232,233,234,235,236,237,240,241,242,275,325,337,],[76,-4,-128,-136,-135,-130,-127,76,-4,76,-126,-150,76,76,76,76,76,76,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,76,76,76,76,76,-72,76,-132,-103,-149,76,76,-131,76,76,76,76,76,76,76,76,76,76,76,-107,76,]),'ASSIGN':([30,78,79,88,89,121,135,137,149,150,186,187,312,],[80,-4,138,-4,-4,180,185,-33,197,198,-32,-124,327,]),'PLUS_ASSIGN':([30,121,],[81,181,]),'MINUS_ASSIGN':([30,121,],[82,182,]),'MULTIPLY_ASSIGN':([30,121,],[83,183,]),'DIVIDE_ASSIGN':([30,121,],[84,184,]),'LBRACE':([30,40,41,42,50,54,56,57,62,85,87,92,94,95,96,102,104,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,153,155,156,163,169,174,179,187,194,202,203,205,217,224,226,229,267,277,279,291,298,308,311,313,315,317,325,330,331,336,343,346,],[86,99,-128,101,-136,-135,-130,-127,86,-126,-150,-4,157,158,101,101,101,-102,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,201,-47,204,101,-72,-132,-103,-124,-149,-46,-49,260,101,101,-131,-4,101,101,-112,-4,-48,101,-111,101,-37,-4,-107,-36,101,101,-4,101,]),'RPAREN':([41,50,54,56,57,61,62,85,87,109,110,112,113,118,122,123,124,125,126,127,128,129,130,131,132,133,169,171,172,173,174,176,177,179,187,194,199,223,226,228,243,244,245,246,247,273,275,280,281,293,310,312,316,320,325,326,328,333,334,337,340,],[-128,-136,-135,-130,-127,118,-4,-126,-150,-102,-133,-134,-4,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-72,226,-157,-158,-132,229,-109,-103,-124,-149,-4,-123,-131,276,-120,291,-117,-118,-4,308,-156,-108,-110,317,325,-4,-116,-4,-107,-119,-122,-4,341,-121,343,]),'RBRACKET':([41,48,50,54,56,57,62,85,87,106,107,108,109,110,112,118,122,123,124,125,126,127,128,129,130,131,132,133,169,174,179,194,225,226,325,],[-128,-4,-136,-135,-130,-127,-4,-126,-150,169,-74,-75,-102,-133,-134,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-72,-132,-103,-149,-73,-131,-107,]),'COMMA':([41,48,50,54,56,57,62,85,87,106,107,108,109,110,112,113,118,122,123,124,125,126,127,128,129,130,131,132,133,145,147,161,162,169,171,172,173,174,176,177,179,187,194,199,202,203,205,207,209,225,226,239,240,243,244,245,246,247,272,275,280,281,293,298,302,303,305,312,316,320,321,325,326,328,333,334,335,337,339,340,],[-128,-4,-136,-135,-130,-127,-4,-126,-150,170,-74,-75,-102,-133,-134,-4,-129,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,195,-154,220,-106,-72,227,-157,-158,-132,230,-109,-103,-124,-149,-4,256,-49,-66,263,-65,-73,-131,-153,-155,-120,292,-117,-118,-4,-105,-156,-108,-110,292,-48,322,-69,-64,-4,-116,-4,-67,-107,-119,-122,-4,292,-68,-121,-54,292,]),'INFO':([59,],[116,]),'COLON':([78,88,89,93,148,178,243,296,],[136,136,136,156,196,231,290,318,]),'IMPLEMENTS':([92,],[154,]),'FINALLY':([100,223,324,],[163,-123,336,]),'CATCH':([100,223,],[164,-123,]),'IN':([103,],[167,]),'UNDERSCORE':([158,210,211,223,266,306,],[215,215,-80,-123,-79,-81,]),'ELSE':([159,223,],[217,-123,]),'ARROW':([212,213,215,229,268,291,317,341,343,],[267,-82,-84,278,-83,314,314,344,314,]),'FROM':([219,],[271,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,101,],[2,165,]),'statement':([0,2,101,165,],[3,58,3,58,]),'print_statement':([0,2,101,165,],[4,4,4,4,]),'throw_statement':([0,2,101,165,],[5,5,5,5,]),'variable_declaration':([0,2,101,165,],[6,6,6,6,]),'constant_declaration':([0,2,101,165,],[7,7,7,7,]),'function_declaration':([0,2,101,165,],[8,8,8,8,]),'struct_declaration':([0,2,101,165,],[9,9,9,9,]),'interface_declaration':([0,2,101,165,],[10,10,10,10,]),'enum_declaration':([0,2,101,165,],[11,11,11,11,]),'match_statement':([0,2,101,165,],[12,12,12,12,]),'if_statement':([0,2,101,165,217,],[13,13,13,13,269,]),'return_statement':([0,2,101,165,],[14,14,14,14,]),'expression_statement':([0,2,101,165,],[15,15,15,15,]),'assignment_identifier':([0,2,101,165,],[16,16,16,16,]),'assignment_member':([0,2,101,165,],[17,17,17,17,]),'import_statement':([0,2,101,165,],[18,18,18,18,]),'type_alias_declaration':([0,2,101,165,],[19,19,19,19,]),'try_finally':([0,2,101,165,],[20,20,20,20,]),'try_catch_finally':([0,2,101,165,],[21,21,21,21,]),'while_loop':([0,2,101,165,],[22,22,22,22,]),'for_loop':([0,2,101,165,],[23,23,23,23,]),'test_declaration':([0,2,101,165,],[24,24,24,24,]),'expression':([0,2,26,28,37,38,39,43,48,49,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,165,167,170,175,180,181,182,183,184,185,196,197,198,227,327,],[27,27,61,77,95,96,97,102,107,109,122,123,124,125,126,127,128,129,130,131,132,133,139,140,141,142,143,27,61,172,179,27,224,225,228,232,233,234,235,236,237,240,241,242,275,337,]),'decorators_opt':([0,2,101,165,201,248,],[33,33,33,33,253,253,]),'decorators':([0,2,101,165,201,248,],[46,46,46,46,46,46,]),'empty':([0,2,30,48,62,78,86,88,89,92,101,113,157,159,165,199,201,207,229,247,248,260,291,312,317,320,322,333,343,],[47,47,87,108,87,137,146,137,137,155,47,173,208,218,47,246,255,264,279,246,255,304,315,328,315,246,304,246,315,]),'unary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,165,167,170,175,180,181,182,183,184,185,196,197,198,227,327,],[50,50,50,50,50,50,50,50,50,50,110,112,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'decorator':([0,2,46,101,165,201,248,],[52,52,105,52,52,52,52,]),'postfix_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,165,167,170,175,180,181,182,183,184,185,196,197,198,227,327,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'primary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,65,66,67,68,69,70,71,72,73,74,75,76,80,81,82,83,84,101,111,113,120,165,167,170,175,180,181,182,183,184,185,196,197,198,227,327,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'struct_instantiation_opt':([30,62,],[85,85,]),'block':([42,96,102,104,163,217,224,267,277,308,313,331,336,346,],[100,159,166,168,221,270,274,306,310,324,329,338,342,348,]),'array_elements':([48,],[106,]),'type_opt':([78,88,89,],[135,149,150,]),'struct_field_inits_opt':([86,],[144,]),'struct_field_inits':([86,],[145,]),'struct_field_init':([86,195,],[147,239,]),'implements_opt':([92,],[153,]),'import_items':([99,],[161,]),'arguments':([113,],[171,]),'lambda_parameters':([117,],[176,]),'lambda_parameter':([117,230,],[177,280,]),'type':([136,138,231,278,290,314,318,344,],[186,188,281,311,312,330,332,347,]),'interface_list':([154,],[202,]),'enum_variants_opt':([157,],[206,]),'enum_variants':([157,],[207,]),'enum_variant':([157,263,],[209,305,]),'match_arms':([158,],[210,]),'match_arm':([158,210,],[211,266,]),'pattern':([158,210,],[212,212,]),'else_opt':([159,],[216,]),'parameters':([199,247,320,333,],[244,293,334,340,]),'parameter':([199,247,292,320,333,],[245,245,316,245,245,]),'struct_members':([201,],[248,]),'struct_member':([201,248,],[249,295,]),'field_declaration':([201,248,260,322,],[250,250,303,335,]),'method_declaration':([201,248,],[251,251,]),'mut_opt':([201,248,260,322,],[252,252,252,252,]),'interface_members':([204,],[257,]),'interface_method':([204,257,],[258,300,]),'optional_comma':([207,],[262,]),'opt_lambda_return':([229,],[277,]),'enum_fields':([260,],[302,]),'opt_return_type':([291,317,343,],[313,331,346,]),'default_opt':([312,],[326,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',25),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',32),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',37),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',44),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',51),
  ('statement -> throw_statement','statement',1,'p_statement','parser.py',52),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',53),
  ('statement -> constant_declaration','statement',1,'p_statement','parser.py',54),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',55),
  ('statement -> struct_declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> interface_declaration','statement',1,'p_statement','parser.py',57),
  ('statement -> enum_declaration','statement',1,'p_statement','parser.py',58),
  ('statement -> match_statement','statement',1,'p_statement','parser.py',59),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',60),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',61),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',62),
  ('statement -> assignment_identifier','statement',1,'p_statement','parser.py',63),
  ('statement -> assignment_member','statement',1,'p_statement','parser.py',64),
  ('statement -> import_statement','statement',1,'p_statement','parser.py',65),
  ('statement -> type_alias_declaration','statement',1,'p_statement','parser.py',66),
  ('statement -> try_finally','statement',1,'p_statement','parser.py',67),
  ('statement -> try_catch_finally','statement',1,'p_statement','parser.py',68),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',69),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',70),
  ('statement -> test_declaration','statement',1,'p_statement','parser.py',71),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',78),
  ('throw_statement -> THROW expression SEMICOLON','throw_statement',3,'p_throw_statement','parser.py',85),
  ('variable_declaration -> LET IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let','parser.py',94),
  ('variable_declaration -> MUT IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_mut','parser.py',100),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt','parser.py',106),
  ('mut_opt -> empty','mut_opt',1,'p_mut_opt','parser.py',107),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','parser.py',114),
  ('type_opt -> empty','type_opt',1,'p_type_opt','parser.py',115),
  ('constant_declaration -> CONST IDENTIFIER type_opt ASSIGN expression SEMICOLON','constant_declaration',6,'p_constant_declaration','parser.py',122),
  ('type_alias_declaration -> IDENTIFIER IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',132),
  ('opt_return_type -> ARROW type','opt_return_type',2,'p_opt_return_type','parser.py',141),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','parser.py',142),
  ('function_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',8,'p_function_declaration','parser.py',150),
  ('function_declaration -> decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',9,'p_function_declaration_async','parser.py',162),
  ('decorators_opt -> decorators','decorators_opt',1,'p_decorators_opt','parser.py',174),
  ('decorators_opt -> empty','decorators_opt',1,'p_decorators_opt','parser.py',175),
  ('decorators -> decorators decorator','decorators',2,'p_decorators','parser.py',180),
  ('decorators -> decorator','decorators',1,'p_decorators','parser.py',181),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',189),
  ('struct_declaration -> STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',196),
  ('implements_opt -> IMPLEMENTS interface_list','implements_opt',2,'p_implements_opt','parser.py',204),
  ('implements_opt -> empty','implements_opt',1,'p_implements_opt','parser.py',205),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list','parser.py',210),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list','parser.py',211),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members','parser.py',219),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members','parser.py',220),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',228),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',229),
  ('field_declaration -> mut_opt IDENTIFIER COLON type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',238),
  ('method_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','method_declaration',8,'p_method_declaration','parser.py',250),
  ('interface_declaration -> INTERFACE IDENTIFIER COLON LBRACE interface_members RBRACE','interface_declaration',6,'p_interface_declaration','parser.py',268),
  ('interface_members -> interface_members interface_method','interface_members',2,'p_interface_members','parser.py',275),
  ('interface_members -> interface_method','interface_members',1,'p_interface_members','parser.py',276),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_method',8,'p_interface_method','parser.py',284),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_method',6,'p_interface_method','parser.py',285),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',298),
  ('enum_variants_opt -> enum_variants optional_comma','enum_variants_opt',2,'p_enum_variants_opt','parser.py',305),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',306),
  ('enum_variants -> enum_variants COMMA enum_variant','enum_variants',3,'p_enum_variants','parser.py',311),
  ('enum_variants -> enum_variant','enum_variants',1,'p_enum_variants','parser.py',312),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant','parser.py',320),
  ('enum_variant -> IDENTIFIER LBRACE enum_fields RBRACE','enum_variant',4,'p_enum_variant','parser.py',321),
  ('enum_fields -> enum_fields COMMA field_declaration','enum_fields',3,'p_enum_fields','parser.py',332),
  ('enum_fields -> field_declaration','enum_fields',1,'p_enum_fields','parser.py',333),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_comma','parser.py',341),
  ('optional_comma -> empty','optional_comma',1,'p_optional_comma','parser.py',342),
  ('expression -> LBRACKET array_elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',349),
  ('array_elements -> array_elements COMMA expression','array_elements',3,'p_array_elements_multiple','parser.py',354),
  ('array_elements -> expression','array_elements',1,'p_array_elements_single','parser.py',359),
  ('array_elements -> empty','array_elements',1,'p_array_elements_empty','parser.py',364),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','parser.py',371),
  ('for_loop -> FOR IDENTIFIER IN expression block','for_loop',5,'p_for_loop','parser.py',378),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',385),
  ('match_arms -> match_arms match_arm','match_arms',2,'p_match_arms','parser.py',392),
  ('match_arms -> match_arm','match_arms',1,'p_match_arms','parser.py',393),
  ('match_arm -> pattern ARROW block','match_arm',3,'p_match_arm','parser.py',401),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',408),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_number','parser.py',409),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',418),
  ('if_statement -> IF expression block else_opt','if_statement',4,'p_if_statement','parser.py',425),
  ('else_opt -> ELSE if_statement','else_opt',2,'p_else_opt','parser.py',434),
  ('else_opt -> ELSE block','else_opt',2,'p_else_opt','parser.py',435),
  ('else_opt -> empty','else_opt',1,'p_else_opt','parser.py',436),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',448),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',449),
  ('assignment_identifier -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',459),
  ('assignment_identifier -> IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',460),
  ('assignment_identifier -> IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',461),
  ('assignment_identifier -> IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',462),
  ('assignment_identifier -> IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',463),
  ('assignment_member -> expression DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',476),
  ('assignment_member -> expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',477),
  ('assignment_member -> expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',478),
  ('assignment_member -> expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',479),
  ('assignment_member -> expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',480),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',495),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',500),
  ('expression -> expression DOT DOT expression','expression',4,'p_expression_range','parser.py',505),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',512),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items','parser.py',519),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items','parser.py',520),
  ('expression -> LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPAREN','expression',8,'p_expression_lambda','parser.py',530),
  ('lambda_parameters -> lambda_parameters COMMA lambda_parameter','lambda_parameters',3,'p_lambda_parameters_multiple','parser.py',535),
  ('lambda_parameters -> lambda_parameter','lambda_parameters',1,'p_lambda_parameters_single','parser.py',540),
  ('lambda_parameter -> IDENTIFIER COLON type','lambda_parameter',3,'p_lambda_parameter','parser.py',545),
  ('opt_lambda_return -> ARROW type','opt_lambda_return',2,'p_opt_lambda_return','parser.py',550),
  ('opt_lambda_return -> empty','opt_lambda_return',1,'p_opt_lambda_return','parser.py',551),
  ('try_finally -> TRY block FINALLY block','try_finally',4,'p_try_finally','parser.py',558),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block','try_catch_finally',9,'p_try_catch_finally','parser.py',563),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block','try_catch_finally',7,'p_try_catch_finally','parser.py',564),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',591),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',596),
  ('parameters -> empty','parameters',1,'p_parameters_empty','parser.py',601),
  ('parameter -> IDENTIFIER COLON type default_opt','parameter',4,'p_parameter','parser.py',606),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','parser.py',607),
  ('default_opt -> ASSIGN expression','default_opt',2,'p_default_opt','parser.py',621),
  ('default_opt -> empty','default_opt',1,'p_default_opt','parser.py',622),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',629),
  ('type -> IDENTIFIER','type',1,'p_type_identifier','parser.py',636),
  ('test_declaration -> TEST STRING block','test_declaration',3,'p_test_declaration','parser.py',643),
  ('primary_expression -> IDENTIFIER struct_instantiation_opt','primary_expression',2,'p_primary_expression','parser.py',652),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',653),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',654),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',655),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',671),
  ('postfix_expression -> postfix_expression LPAREN arguments RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',672),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',673),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',683),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','parser.py',684),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',685),
  ('expression -> unary_expression','expression',1,'p_expression','parser.py',696),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',697),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',698),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',699),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',700),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',701),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',702),
  ('expression -> expression LEQ expression','expression',3,'p_expression','parser.py',703),
  ('expression -> expression GEQ expression','expression',3,'p_expression','parser.py',704),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',705),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',706),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',707),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',708),
  ('struct_instantiation_opt -> LBRACE struct_field_inits_opt RBRACE','struct_instantiation_opt',3,'p_struct_instantiation_opt','parser.py',716),
  ('struct_instantiation_opt -> empty','struct_instantiation_opt',1,'p_struct_instantiation_opt','parser.py',717),
  ('struct_field_inits_opt -> struct_field_inits','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',725),
  ('struct_field_inits_opt -> empty','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',726),
  ('struct_field_inits -> struct_field_inits COMMA struct_field_init','struct_field_inits',3,'p_struct_field_inits_multiple','parser.py',731),
  ('struct_field_inits -> struct_field_init','struct_field_inits',1,'p_struct_field_inits_single','parser.py',736),
  ('struct_field_init -> IDENTIFIER COLON expression','struct_field_init',3,'p_struct_field_init','parser.py',741),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',749),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',750),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',751),
]
