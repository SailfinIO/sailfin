
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftISleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTrightARROWrightUMINUSleftAMPleftPIPErightASSIGNPLUS_ASSIGNMINUS_ASSIGNMULTIPLY_ASSIGNDIVIDE_ASSIGNAMP AND ARROW ASSIGN ASYNC AT AWAIT CATCH COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FAT_ARROW FINALLY FN FOR FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFO INTERFACE IS LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PIPE PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TEST THROW TRY UNDERSCORE WHILEprogram : statementsstatements : statements statementstatements : statementempty :statement : print_statement\n| throw_statement\n| variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| interface_declaration\n| enum_declaration\n| match_statement\n| if_statement\n| return_statement\n| expression_statement\n| import_statement\n| type_alias_declaration\n| try_finally\n| try_catch_finally\n| while_loop\n| for_loop\n| test_declarationprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONthrow_statement : THROW expression SEMICOLONvariable_declaration : LET IDENTIFIER type_opt ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER type_opt ASSIGN expression SEMICOLONmut_opt : MUT\n| emptytype_opt : COLON type\n| emptyconstant_declaration : CONST IDENTIFIER type_opt ASSIGN expression SEMICOLONtype_alias_declaration : IDENTIFIER IDENTIFIER ASSIGN type SEMICOLONopt_return_type : ARROW type_expr\n| emptyfunction_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockfunction_declaration : decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockdecorators_opt : decorators\n| emptydecorators : decorators decorator\n| decoratordecorator : AT IDENTIFIERstruct_declaration : STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACEimplements_opt : IMPLEMENTS interface_list\n| emptyinterface_list : interface_list COMMA IDENTIFIER\n| IDENTIFIERstruct_members : struct_members struct_member\n| struct_memberstruct_member : field_declaration\n| method_declarationfield_declaration : mut_opt IDENTIFIER COLON type SEMICOLONmethod_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockinterface_declaration : INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACEcolon_opt : COLON\n| emptyinterface_members : interface_members interface_method\n| interface_methodinterface_method : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants optional_comma\n| emptyenum_variants : enum_variants COMMA enum_variant\n| enum_variantenum_variant : IDENTIFIER ASSIGN STRINGenum_variant : IDENTIFIER\n| IDENTIFIER LBRACE enum_fields RBRACEenum_field_declaration : IDENTIFIER COLON typeenum_fields : enum_fields COMMA enum_field_declaration\n| enum_field_declarationoptional_comma : COMMA\n| emptyexpression : LBRACKET array_elements RBRACKETarray_elements : array_elements COMMA expressionarray_elements : expressionarray_elements : emptywhile_loop : WHILE expression blockfor_loop : FOR IDENTIFIER IN expression blockmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arm_list_optmatch_arm_list_opt : match_arm_list\n| emptymatch_arm_list : match_arm_list COMMA match_arm\n| match_armguard_opt : IF expression\n| emptymatch_arm : match_pattern guard_opt match_arrow match_arm_bodymatch_arrow : FAT_ARROWmatch_arm_body : block\n| expressionmatch_pattern : NUMBERmatch_pattern : MINUS NUMBERmatch_pattern : IDENTIFIER LBRACE pattern_field_names RBRACEmatch_pattern : IDENTIFIERmatch_pattern : UNDERSCOREpattern_field_names : pattern_field_names COMMA IDENTIFIER\n| IDENTIFIERif_statement : IF expression block else_optelse_opt : ELSE if_statement\n| ELSE block\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONlvalue : IDENTIFIER\n| lvalue DOT IDENTIFIERassignment_expression : lvalue ASSIGN expression %prec ASSIGN\n| lvalue PLUS_ASSIGN expression %prec ASSIGN\n| lvalue MINUS_ASSIGN expression %prec ASSIGN\n| lvalue MULTIPLY_ASSIGN expression %prec ASSIGN\n| lvalue DIVIDE_ASSIGN expression %prec ASSIGNnonassignment_expression : unary_expression\n| nonassignment_expression PLUS unary_expression\n| nonassignment_expression MINUS unary_expression\n| nonassignment_expression MULTIPLY unary_expression\n| nonassignment_expression DIVIDE unary_expression\n| nonassignment_expression LT unary_expression\n| nonassignment_expression GT unary_expression\n| nonassignment_expression LEQ unary_expression\n| nonassignment_expression GEQ unary_expression\n| nonassignment_expression EQ unary_expression\n| nonassignment_expression NEQ unary_expression\n| nonassignment_expression AND unary_expression\n| nonassignment_expression OR unary_expressionexpression_statement : expression SEMICOLONexpression : AWAIT expressionexpression : expression DOT DOT expressionexpression : expression IS typeimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIER\n| IDENTIFIERexpression : LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPARENlambda_parameters : lambda_parameters COMMA lambda_parameterlambda_parameters : lambda_parameterlambda_parameter : IDENTIFIER COLON typeopt_lambda_return : ARROW type\n| emptytry_finally : TRY block FINALLY blocktry_catch_finally : TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block\n| TRY block CATCH LPAREN IDENTIFIER RPAREN blockparameters : parameters COMMA parameterparameters : parameterparameters : emptyparameter : IDENTIFIER COLON type default_opt\n| IDENTIFIERdefault_opt : ASSIGN expression\n| emptyblock : LBRACE statements_opt RBRACEstatements_opt : statements\n| emptytype_primary : IDENTIFIER\n| LPAREN type_expr RPARENtype_suffix : type_suffix LBRACKET RBRACKET\n| emptytype_expr_postfix : type_primary type_suffixtype_expr : type_expr PIPE type_expr_postfix\n| type_expr AMP type_expr_postfix\n| type_expr_postfixtype : type_exprtest_declaration : TEST STRING blockprimary_expression : IDENTIFIER struct_instantiation_opt\n| NUMBER\n| STRING\n| LPAREN expression RPARENpostfix_expression : postfix_expression LBRACKET expression RBRACKETpostfix_expression : primary_expression\n| postfix_expression LPAREN arguments RPAREN\n| postfix_expression DOT IDENTIFIERunary_expression : MINUS unary_expression %prec UMINUS\n| NOT unary_expression\n| postfix_expressionexpression : nonassignment_expression assignment_optassignment_opt : ASSIGN expression\n| PLUS_ASSIGN expression\n| MINUS_ASSIGN expression\n| MULTIPLY_ASSIGN expression\n| DIVIDE_ASSIGN expression\n| emptystruct_instantiation_opt : LBRACE struct_field_inits_opt RBRACE\n| emptystruct_field_inits_opt : struct_field_inits\n| emptystruct_field_inits : struct_field_inits COMMA struct_field_initstruct_field_inits : struct_field_initstruct_field_init : IDENTIFIER COLON expressionstruct_field_init : IDENTIFIERarguments : arguments COMMA expression\n| expression\n| empty'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[23,23,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,23,-25,-4,-103,23,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'THROW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,26,-25,-4,-103,26,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[27,27,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,27,-25,-4,-103,27,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,207,226,228,231,233,248,258,259,260,261,272,276,283,284,288,297,298,299,304,305,309,325,345,346,351,362,363,366,372,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,29,-25,-4,-103,29,-78,-160,264,-99,-102,-138,-148,-33,264,-49,-50,-51,-61,-80,-100,-101,-79,-26,-27,-32,-43,-48,-54,-24,-129,-140,-36,-37,-52,-139,-53,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,30,-25,-4,-103,30,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,32,-25,-4,-103,32,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[33,33,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,33,-25,-4,-103,33,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[34,34,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,34,-25,-4,-103,34,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,35,-25,-4,-103,35,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,221,222,224,225,226,227,228,231,233,248,272,276,281,283,284,288,297,298,299,304,309,325,343,345,346,351,362,366,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,36,-25,-4,-103,36,-78,-160,279,-92,-95,-96,-99,36,-102,-138,-148,-33,-61,-80,-93,-100,-101,-79,-26,-27,-32,-43,-54,-24,-94,-129,-140,-36,-37,-139,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[37,37,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,37,-25,-4,-103,37,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[38,38,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,38,-25,-4,-103,38,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,28,29,30,32,33,34,35,36,37,41,42,46,47,51,52,53,57,62,64,69,73,81,82,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,118,120,122,128,129,131,133,142,144,149,150,151,152,158,160,161,162,164,187,192,193,197,201,202,203,204,205,207,226,228,230,231,232,233,238,241,242,248,257,258,259,260,261,262,264,265,266,269,271,272,274,276,277,279,282,283,284,288,292,297,298,299,300,302,304,305,307,309,318,319,325,330,334,336,337,339,344,345,346,349,351,355,362,363,366,368,372,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,61,61,66,67,71,72,75,76,77,61,61,61,61,86,61,61,61,114,61,-2,-125,127,138,141,-104,154,28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,186,190,61,127,-25,127,127,206,209,211,224,-4,-103,28,-78,61,-160,61,61,127,127,61,138,61,61,61,253,-4,-99,-102,286,-138,287,-148,61,190,127,-33,253,-4,-49,-50,-51,306,-28,-29,308,311,313,-61,211,-80,224,61,321,-100,-101,-79,127,-26,-27,-32,127,253,-43,-48,335,-54,61,-89,-24,127,127,253,127,313,359,-129,-140,61,-36,253,-37,-52,-139,127,-53,]),'TRY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[40,40,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,40,-25,-4,-103,40,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[41,41,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,41,-25,-4,-103,41,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[42,42,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,42,-25,-4,-103,42,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'TEST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,84,129,151,152,158,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[43,43,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,43,-25,-4,-103,43,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,28,35,36,37,39,41,46,47,54,55,56,57,61,62,68,70,81,84,106,107,108,109,110,113,116,117,121,122,126,127,129,151,152,158,160,161,162,164,186,187,194,195,197,200,202,203,204,226,228,231,233,236,237,238,246,248,272,276,279,283,284,288,296,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[46,46,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,46,46,-4,46,46,46,-163,46,46,46,116,-166,-162,-2,-4,-125,-161,-180,-104,46,46,46,46,46,46,46,46,46,-164,46,-4,-151,-25,-4,-103,46,-78,46,-160,46,-168,46,245,-154,46,-179,46,46,46,-99,-102,-138,-148,-165,-167,46,-152,-33,-61,-80,46,-100,-101,-79,-153,-26,-27,-32,-43,-54,46,-89,-24,-129,-140,46,-36,-37,-139,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,35,36,37,41,46,47,57,62,81,84,106,107,108,109,110,113,116,117,122,129,151,152,158,160,161,162,164,187,197,202,203,204,226,228,231,233,238,248,272,276,279,283,284,288,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[47,47,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,47,47,47,47,47,47,47,47,-2,-125,-104,47,47,47,47,47,47,47,47,47,47,-25,-4,-103,47,-78,47,-160,47,47,47,47,47,47,-99,-102,-138,-148,47,-33,-61,-80,47,-100,-101,-79,-26,-27,-32,-43,-54,47,-89,-24,-129,-140,47,-36,-37,-139,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,28,35,36,37,39,41,46,47,51,53,54,55,56,57,59,61,62,64,68,70,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,119,121,122,128,129,131,133,141,151,152,156,158,160,161,162,164,186,187,192,193,197,200,202,203,204,206,226,228,231,233,236,237,238,242,248,272,276,279,283,284,288,292,297,298,299,300,304,309,311,318,319,325,330,334,335,337,345,346,349,351,362,366,368,],[24,24,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,24,24,-4,24,24,24,-163,24,24,24,113,113,117,-166,-162,-2,120,-4,-125,128,-161,-180,-104,24,113,113,113,113,113,113,113,113,113,113,113,113,24,24,24,24,24,24,24,24,187,-164,24,128,-25,128,128,205,-4,-103,232,24,-78,24,-160,24,-168,24,128,128,24,-179,24,24,24,257,-99,-102,-138,-148,-165,-167,24,128,-33,-61,-80,24,-100,-101,-79,128,-26,-27,-32,128,-43,-54,336,24,-89,-24,128,128,355,128,-129,-140,24,-36,-37,-139,128,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,31,44,45,49,57,62,74,81,84,88,114,129,151,152,158,159,160,162,207,210,226,228,231,233,248,258,259,260,261,263,265,267,268,272,276,283,284,288,297,298,299,304,305,309,310,325,345,346,351,362,363,366,369,372,373,],[-4,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,59,73,-38,-39,-41,-2,-125,142,-104,-4,-40,-42,-25,-4,-103,-4,-39,-78,-160,-4,269,-99,-102,-138,-148,-33,-4,-49,-50,-51,307,-39,269,-58,-61,-80,-100,-101,-79,-26,-27,-32,-43,-48,-54,-57,-24,-129,-140,-36,-37,-52,-139,-60,-53,-59,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,31,44,45,49,57,62,81,84,88,114,129,151,152,158,159,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[-4,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,74,-38,-39,-41,-2,-125,-104,-4,-40,-42,-25,-4,-103,-4,-39,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,44,49,57,62,81,84,88,114,129,151,152,158,160,162,207,226,228,231,233,248,258,259,260,261,272,276,283,284,288,297,298,299,304,305,309,325,345,346,351,362,363,366,372,],[52,52,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,52,-41,-2,-125,-104,52,-40,-42,-25,-4,-103,52,-78,-160,52,-99,-102,-138,-148,-33,52,-49,-50,-51,-61,-80,-100,-101,-79,-26,-27,-32,-43,-48,-54,-24,-129,-140,-36,-37,-52,-139,-53,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,28,35,36,37,39,41,46,47,48,50,51,53,54,55,56,57,61,62,68,70,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,115,116,117,121,122,129,150,151,152,158,160,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,186,187,197,200,202,203,204,226,228,231,233,236,237,238,248,272,276,277,279,283,284,288,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[51,51,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,51,51,-4,51,51,51,-163,51,51,51,95,-112,51,51,-171,-166,-162,-2,-4,-125,-161,-180,-104,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-169,51,-170,51,51,-164,51,-25,223,-4,-103,51,-78,51,-160,51,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,51,51,-179,51,51,51,-99,-102,-138,-148,-165,-167,51,-33,-61,-80,223,51,-100,-101,-79,-26,-27,-32,-43,-54,51,-89,-24,-129,-140,51,-36,-37,-139,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,35,36,37,41,46,47,51,53,57,62,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,129,151,152,158,160,161,162,164,187,197,202,203,204,226,228,231,233,238,248,272,276,279,283,284,288,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[53,53,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,53,53,53,53,53,53,53,53,53,53,-2,-125,-104,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-25,-4,-103,53,-78,53,-160,53,53,53,53,53,53,-99,-102,-138,-148,53,-33,-61,-80,53,-100,-101,-79,-26,-27,-32,-43,-54,53,-89,-24,-129,-140,53,-36,-37,-139,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,35,36,37,41,46,47,51,53,57,62,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,129,150,151,152,158,160,161,162,164,187,197,202,203,204,223,226,228,231,233,238,248,272,276,277,279,283,284,288,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[56,56,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,56,56,56,56,56,56,56,56,56,56,-2,-125,-104,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-25,222,-4,-103,56,-78,56,-160,56,56,56,56,56,56,281,-99,-102,-138,-148,56,-33,-61,-80,222,56,-100,-101,-79,-26,-27,-32,-43,-54,56,-89,-24,-129,-140,56,-36,-37,-139,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,35,36,37,41,43,46,47,51,53,57,62,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,129,151,152,158,160,161,162,164,187,197,202,203,204,226,228,231,233,238,248,270,272,276,279,283,284,285,288,297,298,299,304,309,318,319,325,345,346,349,351,362,366,],[39,39,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,39,39,39,39,39,39,87,39,39,39,39,-2,-125,-104,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-25,-4,-103,39,-78,39,-160,39,39,39,39,39,39,-99,-102,-138,-148,39,-33,312,-61,-80,39,-100,-101,323,-79,-26,-27,-32,-43,-54,39,-89,-24,-129,-140,39,-36,-37,-139,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,57,62,81,129,151,152,160,162,226,228,231,233,248,272,276,283,284,288,297,298,299,304,309,325,345,346,351,362,366,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-2,-125,-104,-25,-4,-103,-78,-160,-99,-102,-138,-148,-33,-61,-80,-100,-101,-79,-26,-27,-32,-43,-54,-24,-129,-140,-36,-37,-139,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,39,48,50,54,55,56,57,61,62,68,69,70,81,84,92,93,111,112,115,121,123,124,125,126,127,129,134,135,136,137,138,149,150,151,152,153,154,157,158,159,160,162,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,186,191,194,195,200,211,212,213,214,215,216,217,218,219,220,226,228,231,233,236,237,243,244,246,248,249,250,258,259,260,261,267,268,272,273,274,275,276,283,284,286,288,296,297,298,299,304,305,309,310,312,314,315,316,317,321,322,325,338,340,341,342,345,346,347,351,357,358,359,362,363,366,369,372,373,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-163,-4,-112,-171,-166,-162,-2,-4,-125,-161,-4,-180,-104,-4,-126,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-25,200,-181,-182,-184,-186,-4,-4,-4,-103,229,-131,233,-149,-150,-78,-160,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,-168,-127,-155,-154,-179,-67,272,-4,-63,-65,276,-81,-82,-83,-85,-99,-102,-138,-148,-165,-167,-156,-157,-152,-33,-183,-185,304,-49,-50,-51,309,-58,-61,-62,-72,-73,-80,-100,-101,-130,-79,-153,-26,-27,-32,-43,-48,-54,-57,-66,338,-71,-64,-84,-98,343,-24,-68,-88,-90,-91,-129,-140,-132,-36,-69,-70,-97,-37,-52,-139,-60,-53,-59,]),'DOT':([23,25,28,39,48,50,54,55,56,60,61,63,65,68,70,78,79,80,85,90,92,93,111,112,115,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,186,191,194,195,200,234,235,236,237,239,243,244,246,247,250,251,252,289,296,320,342,347,361,],[58,63,-4,-163,-4,-112,118,-166,-162,63,-4,122,63,-161,-180,63,63,63,63,63,63,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,63,63,-168,-127,-155,-154,-179,63,63,-165,-167,63,-156,-157,-152,63,63,63,63,63,-153,63,63,-132,63,]),'SEMICOLON':([25,28,37,39,48,50,54,55,56,61,65,68,70,80,92,93,111,112,115,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,186,191,194,195,199,200,236,237,243,244,246,247,251,252,290,296,323,347,354,365,371,],[62,-4,81,-163,-4,-112,-171,-166,-162,-4,129,-161,-180,152,-126,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,-168,-127,-155,-154,248,-179,-165,-167,-156,-157,-152,297,298,299,325,-153,345,-132,363,369,373,]),'IS':([25,28,39,48,50,54,55,56,60,61,65,68,70,78,79,80,85,90,92,93,111,112,115,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,186,191,194,195,200,234,235,236,237,239,243,244,246,247,250,251,252,289,296,320,342,347,361,],[64,-4,-163,-4,-112,-171,-166,-162,64,-4,64,-161,-180,64,64,64,64,64,64,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,64,64,-168,-127,-155,-154,-179,64,64,-165,-167,64,-156,-157,-152,64,64,64,64,64,-153,64,64,-132,64,]),'LBRACE':([28,38,39,40,48,50,54,55,56,61,68,70,75,76,77,78,79,85,87,92,93,111,112,115,121,123,124,125,126,127,143,145,146,147,148,155,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,186,191,194,195,200,208,209,211,224,227,234,236,237,240,243,244,246,291,293,296,301,308,318,319,324,327,329,331,333,347,352,353,360,367,370,],[69,82,-163,84,-4,-112,-171,-166,-162,69,-161,-180,-4,-4,149,150,84,84,84,-126,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,207,-45,210,-55,-56,84,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,-168,-127,-155,-154,-179,-44,-47,271,282,84,84,-165,-167,-4,-156,-157,-152,84,-137,-153,-4,-46,84,-89,84,-136,84,-35,-4,-132,-34,84,84,-4,84,]),'PLUS':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,94,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'MULTIPLY':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,96,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'DIVIDE':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,97,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'LT':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,98,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'GT':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,99,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'LEQ':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,100,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'GEQ':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,101,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'EQ':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,102,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'NEQ':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,103,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'AND':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,104,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'OR':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,105,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'ASSIGN':([28,39,48,50,54,55,56,61,66,67,68,70,71,72,112,115,121,124,125,126,127,130,132,139,140,165,166,167,168,169,170,171,172,173,174,175,176,186,194,195,198,200,211,236,237,243,244,246,296,328,],[-4,-163,106,-112,-171,-166,-162,-4,-4,133,-161,-180,-4,-4,-169,-170,-164,-159,-158,-4,-151,197,-31,203,204,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-155,-154,-30,-179,270,-165,-167,-156,-157,-152,-153,349,]),'PLUS_ASSIGN':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,107,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'MINUS_ASSIGN':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,108,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'MULTIPLY_ASSIGN':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,109,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'DIVIDE_ASSIGN':([28,39,48,50,54,55,56,61,68,70,112,115,121,165,166,167,168,169,170,171,172,173,174,175,176,186,200,236,237,],[-4,-163,110,-112,-171,-166,-162,-4,-161,-180,-169,-170,-164,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-168,-179,-165,-167,]),'RPAREN':([39,48,50,54,55,56,60,61,68,70,92,93,111,112,115,117,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,188,189,191,194,195,196,200,205,233,236,237,239,243,244,246,253,254,255,256,257,287,289,294,295,296,303,326,328,332,336,347,348,350,355,356,361,364,],[-163,-4,-112,-171,-166,-162,121,-4,-161,-180,-126,-172,-178,-169,-170,-4,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,237,-188,-189,-168,240,-134,-127,-155,-154,246,-179,-4,-148,-165,-167,290,-156,-157,-152,-145,301,-142,-143,-4,324,-187,-133,-135,-153,333,347,-4,-141,-4,-132,-144,-147,-4,365,-146,367,]),'RBRACKET':([39,46,48,50,54,55,56,61,68,70,89,90,91,92,93,111,112,115,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,186,191,194,195,200,235,236,237,243,244,245,246,296,347,],[-163,-4,-4,-112,-171,-166,-162,-4,-161,-180,163,-76,-77,-126,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,236,-168,-127,-155,-154,-179,-75,-165,-167,-156,-157,296,-152,-153,-132,]),'COMMA':([39,46,48,50,54,55,56,61,68,70,89,90,91,92,93,111,112,115,117,121,123,124,125,126,127,135,137,138,153,154,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,188,189,191,194,195,200,205,208,209,211,213,215,218,220,233,235,236,237,243,244,246,249,250,253,254,255,256,257,286,289,294,295,296,303,308,312,314,315,316,317,321,322,328,332,336,338,340,341,342,347,348,350,355,356,357,358,359,361,364,],[-163,-4,-4,-112,-171,-166,-162,-4,-161,-180,164,-76,-77,-126,-172,-178,-169,-170,-4,-164,-128,-159,-158,-4,-151,201,-184,-186,230,-131,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,238,-188,-189,-168,241,-134,-127,-155,-154,-179,-4,266,-47,-67,274,-65,277,-85,-148,-75,-165,-167,-156,-157,-152,-183,-185,-145,302,-142,-143,-4,-130,-187,-133,-135,-153,302,-46,-66,339,-71,-64,-84,-98,344,-4,-141,-4,-68,-88,-90,-91,-132,-144,-147,-4,302,-69,-70,-97,-146,302,]),'FAT_ARROW':([39,48,50,54,55,56,61,68,70,92,93,111,112,115,121,123,124,125,126,127,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,186,191,194,195,200,221,222,224,225,236,237,243,244,246,278,280,281,296,320,343,347,],[-163,-4,-112,-171,-166,-162,-4,-161,-180,-126,-172,-178,-169,-170,-164,-128,-159,-158,-4,-151,-74,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-173,-174,-175,-176,-177,-168,-127,-155,-154,-179,-4,-92,-95,-96,-165,-167,-156,-157,-152,319,-87,-93,-153,-86,-94,-132,]),'INFO':([58,],[119,]),'COLON':([66,71,72,76,138,190,253,306,313,],[131,131,131,147,202,242,300,334,337,]),'IMPLEMENTS':([75,],[144,]),'FINALLY':([83,233,346,],[155,-148,360,]),'CATCH':([83,233,],[156,-148,]),'IN':([86,],[161,]),'PIPE':([124,125,126,127,194,195,196,243,244,246,296,352,],[192,-158,-4,-151,-155,-154,192,-156,-157,-152,-153,192,]),'AMP':([124,125,126,127,194,195,196,243,244,246,296,352,],[193,-158,-4,-151,-155,-154,193,-156,-157,-152,-153,193,]),'UNDERSCORE':([150,277,],[225,225,]),'ELSE':([151,233,],[227,-148,]),'FROM':([229,],[285,]),'ARROW':([240,301,333,365,367,],[292,330,330,368,330,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,84,],[2,158,]),'statement':([0,2,84,158,],[3,57,3,57,]),'print_statement':([0,2,84,158,],[4,4,4,4,]),'throw_statement':([0,2,84,158,],[5,5,5,5,]),'variable_declaration':([0,2,84,158,],[6,6,6,6,]),'constant_declaration':([0,2,84,158,],[7,7,7,7,]),'function_declaration':([0,2,84,158,],[8,8,8,8,]),'struct_declaration':([0,2,84,158,],[9,9,9,9,]),'interface_declaration':([0,2,84,158,],[10,10,10,10,]),'enum_declaration':([0,2,84,158,],[11,11,11,11,]),'match_statement':([0,2,84,158,],[12,12,12,12,]),'if_statement':([0,2,84,158,227,],[13,13,13,13,283,]),'return_statement':([0,2,84,158,],[14,14,14,14,]),'expression_statement':([0,2,84,158,],[15,15,15,15,]),'import_statement':([0,2,84,158,],[16,16,16,16,]),'type_alias_declaration':([0,2,84,158,],[17,17,17,17,]),'try_finally':([0,2,84,158,],[18,18,18,18,]),'try_catch_finally':([0,2,84,158,],[19,19,19,19,]),'while_loop':([0,2,84,158,],[20,20,20,20,]),'for_loop':([0,2,84,158,],[21,21,21,21,]),'test_declaration':([0,2,84,158,],[22,22,22,22,]),'expression':([0,2,24,26,35,36,37,41,46,47,84,106,107,108,109,110,113,116,117,122,158,161,164,187,197,202,203,204,238,279,318,349,],[25,25,60,65,78,79,80,85,90,92,25,177,178,179,180,181,60,182,184,191,25,234,235,239,247,250,251,252,289,320,342,361,]),'decorators_opt':([0,2,84,158,207,258,],[31,31,31,31,263,263,]),'decorators':([0,2,84,158,207,258,],[44,44,44,44,44,44,]),'empty':([0,2,28,46,48,61,66,69,71,72,75,76,84,117,126,149,150,151,158,205,207,213,221,240,257,258,301,328,333,336,355,367,],[45,45,70,91,111,70,132,136,132,132,145,148,159,185,195,214,219,228,45,256,265,275,280,293,256,265,331,350,331,256,256,331,]),'nonassignment_expression':([0,2,24,26,35,36,37,41,46,47,84,106,107,108,109,110,113,116,117,122,158,161,164,187,197,202,203,204,238,279,318,349,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'decorator':([0,2,44,84,158,207,258,],[49,49,88,49,49,49,49,]),'unary_expression':([0,2,24,26,35,36,37,41,46,47,51,53,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,158,161,164,187,197,202,203,204,238,279,318,349,],[50,50,50,50,50,50,50,50,50,50,112,115,50,165,166,167,168,169,170,171,172,173,174,175,176,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'postfix_expression':([0,2,24,26,35,36,37,41,46,47,51,53,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,158,161,164,187,197,202,203,204,238,279,318,349,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'primary_expression':([0,2,24,26,35,36,37,41,46,47,51,53,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,116,117,122,158,161,164,187,197,202,203,204,238,279,318,349,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'struct_instantiation_opt':([28,61,],[68,68,]),'block':([40,79,85,87,155,227,234,291,318,324,329,353,360,370,],[83,151,160,162,231,284,288,326,341,346,351,362,366,372,]),'array_elements':([46,],[89,]),'assignment_opt':([48,],[93,]),'type':([64,131,133,242,292,300,334,337,368,],[123,198,199,295,327,328,354,357,371,]),'type_expr':([64,128,131,133,242,292,300,330,334,337,368,],[124,196,124,124,124,124,124,352,124,124,124,]),'type_expr_postfix':([64,128,131,133,192,193,242,292,300,330,334,337,368,],[125,125,125,125,243,244,125,125,125,125,125,125,125,]),'type_primary':([64,128,131,133,192,193,242,292,300,330,334,337,368,],[126,126,126,126,126,126,126,126,126,126,126,126,126,]),'type_opt':([66,71,72,],[130,139,140,]),'struct_field_inits_opt':([69,],[134,]),'struct_field_inits':([69,],[135,]),'struct_field_init':([69,201,],[137,249,]),'implements_opt':([75,],[143,]),'colon_opt':([76,],[146,]),'import_items':([82,],[153,]),'statements_opt':([84,],[157,]),'arguments':([117,],[183,]),'lambda_parameters':([120,],[188,]),'lambda_parameter':([120,241,],[189,294,]),'type_suffix':([126,],[194,]),'interface_list':([144,],[208,]),'enum_variants_opt':([149,],[212,]),'enum_variants':([149,],[213,]),'enum_variant':([149,274,],[215,316,]),'match_arms':([150,],[216,]),'match_arm_list_opt':([150,],[217,]),'match_arm_list':([150,],[218,]),'match_arm':([150,277,],[220,317,]),'match_pattern':([150,277,],[221,221,]),'else_opt':([151,],[226,]),'parameters':([205,257,336,355,],[254,303,356,364,]),'parameter':([205,257,302,336,355,],[255,255,332,255,255,]),'struct_members':([207,],[258,]),'struct_member':([207,258,],[259,305,]),'field_declaration':([207,258,],[260,260,]),'method_declaration':([207,258,],[261,261,]),'mut_opt':([207,258,],[262,262,]),'interface_members':([210,],[267,]),'interface_method':([210,267,],[268,310,]),'optional_comma':([213,],[273,]),'guard_opt':([221,],[278,]),'opt_lambda_return':([240,],[291,]),'enum_fields':([271,],[314,]),'enum_field_declaration':([271,339,],[315,358,]),'match_arrow':([278,],[318,]),'pattern_field_names':([282,],[322,]),'opt_return_type':([301,333,367,],[329,353,370,]),'match_arm_body':([318,],[340,]),'default_opt':([328,],[348,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',30),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',37),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',42),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',49),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',56),
  ('statement -> throw_statement','statement',1,'p_statement','parser.py',57),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',58),
  ('statement -> constant_declaration','statement',1,'p_statement','parser.py',59),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',60),
  ('statement -> struct_declaration','statement',1,'p_statement','parser.py',61),
  ('statement -> interface_declaration','statement',1,'p_statement','parser.py',62),
  ('statement -> enum_declaration','statement',1,'p_statement','parser.py',63),
  ('statement -> match_statement','statement',1,'p_statement','parser.py',64),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',65),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',66),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> import_statement','statement',1,'p_statement','parser.py',68),
  ('statement -> type_alias_declaration','statement',1,'p_statement','parser.py',69),
  ('statement -> try_finally','statement',1,'p_statement','parser.py',70),
  ('statement -> try_catch_finally','statement',1,'p_statement','parser.py',71),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',72),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',73),
  ('statement -> test_declaration','statement',1,'p_statement','parser.py',74),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',82),
  ('throw_statement -> THROW expression SEMICOLON','throw_statement',3,'p_throw_statement','parser.py',89),
  ('variable_declaration -> LET IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let','parser.py',96),
  ('variable_declaration -> MUT IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_mut','parser.py',102),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt','parser.py',108),
  ('mut_opt -> empty','mut_opt',1,'p_mut_opt','parser.py',109),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','parser.py',116),
  ('type_opt -> empty','type_opt',1,'p_type_opt','parser.py',117),
  ('constant_declaration -> CONST IDENTIFIER type_opt ASSIGN expression SEMICOLON','constant_declaration',6,'p_constant_declaration','parser.py',124),
  ('type_alias_declaration -> IDENTIFIER IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',134),
  ('opt_return_type -> ARROW type_expr','opt_return_type',2,'p_opt_return_type','parser.py',143),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','parser.py',144),
  ('function_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',8,'p_function_declaration','parser.py',152),
  ('function_declaration -> decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',9,'p_function_declaration_async','parser.py',164),
  ('decorators_opt -> decorators','decorators_opt',1,'p_decorators_opt','parser.py',176),
  ('decorators_opt -> empty','decorators_opt',1,'p_decorators_opt','parser.py',177),
  ('decorators -> decorators decorator','decorators',2,'p_decorators','parser.py',182),
  ('decorators -> decorator','decorators',1,'p_decorators','parser.py',183),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',191),
  ('struct_declaration -> STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',198),
  ('implements_opt -> IMPLEMENTS interface_list','implements_opt',2,'p_implements_opt','parser.py',206),
  ('implements_opt -> empty','implements_opt',1,'p_implements_opt','parser.py',207),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list','parser.py',212),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list','parser.py',213),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members','parser.py',221),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members','parser.py',222),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',230),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',231),
  ('field_declaration -> mut_opt IDENTIFIER COLON type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',240),
  ('method_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','method_declaration',8,'p_method_declaration','parser.py',252),
  ('interface_declaration -> INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACE','interface_declaration',6,'p_interface_declaration','parser.py',270),
  ('colon_opt -> COLON','colon_opt',1,'p_colon_opt','parser.py',277),
  ('colon_opt -> empty','colon_opt',1,'p_colon_opt','parser.py',278),
  ('interface_members -> interface_members interface_method','interface_members',2,'p_interface_members','parser.py',283),
  ('interface_members -> interface_method','interface_members',1,'p_interface_members','parser.py',284),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_method',8,'p_interface_method','parser.py',292),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_method',6,'p_interface_method','parser.py',293),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',306),
  ('enum_variants_opt -> enum_variants optional_comma','enum_variants_opt',2,'p_enum_variants_opt','parser.py',313),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',314),
  ('enum_variants -> enum_variants COMMA enum_variant','enum_variants',3,'p_enum_variants','parser.py',319),
  ('enum_variants -> enum_variant','enum_variants',1,'p_enum_variants','parser.py',320),
  ('enum_variant -> IDENTIFIER ASSIGN STRING','enum_variant',3,'p_enum_variant_assignment','parser.py',329),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant','parser.py',336),
  ('enum_variant -> IDENTIFIER LBRACE enum_fields RBRACE','enum_variant',4,'p_enum_variant','parser.py',337),
  ('enum_field_declaration -> IDENTIFIER COLON type','enum_field_declaration',3,'p_enum_field_declaration','parser.py',345),
  ('enum_fields -> enum_fields COMMA enum_field_declaration','enum_fields',3,'p_enum_fields','parser.py',350),
  ('enum_fields -> enum_field_declaration','enum_fields',1,'p_enum_fields','parser.py',351),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_comma','parser.py',359),
  ('optional_comma -> empty','optional_comma',1,'p_optional_comma','parser.py',360),
  ('expression -> LBRACKET array_elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',368),
  ('array_elements -> array_elements COMMA expression','array_elements',3,'p_array_elements_multiple','parser.py',373),
  ('array_elements -> expression','array_elements',1,'p_array_elements_single','parser.py',378),
  ('array_elements -> empty','array_elements',1,'p_array_elements_empty','parser.py',383),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','parser.py',390),
  ('for_loop -> FOR IDENTIFIER IN expression block','for_loop',5,'p_for_loop','parser.py',397),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',404),
  ('match_arms -> match_arm_list_opt','match_arms',1,'p_match_arms','parser.py',409),
  ('match_arm_list_opt -> match_arm_list','match_arm_list_opt',1,'p_match_arm_list_opt','parser.py',414),
  ('match_arm_list_opt -> empty','match_arm_list_opt',1,'p_match_arm_list_opt','parser.py',415),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list','parser.py',420),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list','parser.py',421),
  ('guard_opt -> IF expression','guard_opt',2,'p_guard_opt','parser.py',429),
  ('guard_opt -> empty','guard_opt',1,'p_guard_opt','parser.py',430),
  ('match_arm -> match_pattern guard_opt match_arrow match_arm_body','match_arm',4,'p_match_arm','parser.py',438),
  ('match_arrow -> FAT_ARROW','match_arrow',1,'p_match_arrow','parser.py',443),
  ('match_arm_body -> block','match_arm_body',1,'p_match_arm_body','parser.py',448),
  ('match_arm_body -> expression','match_arm_body',1,'p_match_arm_body','parser.py',449),
  ('match_pattern -> NUMBER','match_pattern',1,'p_match_pattern_number','parser.py',462),
  ('match_pattern -> MINUS NUMBER','match_pattern',2,'p_match_pattern_negative','parser.py',467),
  ('match_pattern -> IDENTIFIER LBRACE pattern_field_names RBRACE','match_pattern',4,'p_match_pattern_struct','parser.py',472),
  ('match_pattern -> IDENTIFIER','match_pattern',1,'p_match_pattern_simple','parser.py',477),
  ('match_pattern -> UNDERSCORE','match_pattern',1,'p_match_pattern_wildcard','parser.py',482),
  ('pattern_field_names -> pattern_field_names COMMA IDENTIFIER','pattern_field_names',3,'p_pattern_field_names','parser.py',487),
  ('pattern_field_names -> IDENTIFIER','pattern_field_names',1,'p_pattern_field_names','parser.py',488),
  ('if_statement -> IF expression block else_opt','if_statement',4,'p_if_statement','parser.py',498),
  ('else_opt -> ELSE if_statement','else_opt',2,'p_else_opt','parser.py',507),
  ('else_opt -> ELSE block','else_opt',2,'p_else_opt','parser.py',508),
  ('else_opt -> empty','else_opt',1,'p_else_opt','parser.py',509),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',521),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',522),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue','parser.py',532),
  ('lvalue -> lvalue DOT IDENTIFIER','lvalue',3,'p_lvalue','parser.py',533),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',541),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',542),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',543),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',544),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',545),
  ('nonassignment_expression -> unary_expression','nonassignment_expression',1,'p_nonassignment_expression','parser.py',557),
  ('nonassignment_expression -> nonassignment_expression PLUS unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',558),
  ('nonassignment_expression -> nonassignment_expression MINUS unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',559),
  ('nonassignment_expression -> nonassignment_expression MULTIPLY unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',560),
  ('nonassignment_expression -> nonassignment_expression DIVIDE unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',561),
  ('nonassignment_expression -> nonassignment_expression LT unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',562),
  ('nonassignment_expression -> nonassignment_expression GT unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',563),
  ('nonassignment_expression -> nonassignment_expression LEQ unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',564),
  ('nonassignment_expression -> nonassignment_expression GEQ unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',565),
  ('nonassignment_expression -> nonassignment_expression EQ unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',566),
  ('nonassignment_expression -> nonassignment_expression NEQ unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',567),
  ('nonassignment_expression -> nonassignment_expression AND unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',568),
  ('nonassignment_expression -> nonassignment_expression OR unary_expression','nonassignment_expression',3,'p_nonassignment_expression','parser.py',569),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',577),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',582),
  ('expression -> expression DOT DOT expression','expression',4,'p_expression_range','parser.py',587),
  ('expression -> expression IS type','expression',3,'p_expression_typecheck','parser.py',592),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',599),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items','parser.py',606),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items','parser.py',607),
  ('expression -> LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPAREN','expression',8,'p_expression_lambda','parser.py',617),
  ('lambda_parameters -> lambda_parameters COMMA lambda_parameter','lambda_parameters',3,'p_lambda_parameters_multiple','parser.py',622),
  ('lambda_parameters -> lambda_parameter','lambda_parameters',1,'p_lambda_parameters_single','parser.py',627),
  ('lambda_parameter -> IDENTIFIER COLON type','lambda_parameter',3,'p_lambda_parameter','parser.py',632),
  ('opt_lambda_return -> ARROW type','opt_lambda_return',2,'p_opt_lambda_return','parser.py',637),
  ('opt_lambda_return -> empty','opt_lambda_return',1,'p_opt_lambda_return','parser.py',638),
  ('try_finally -> TRY block FINALLY block','try_finally',4,'p_try_finally','parser.py',645),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block','try_catch_finally',9,'p_try_catch_finally','parser.py',650),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block','try_catch_finally',7,'p_try_catch_finally','parser.py',651),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',678),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',683),
  ('parameters -> empty','parameters',1,'p_parameters_empty','parser.py',688),
  ('parameter -> IDENTIFIER COLON type default_opt','parameter',4,'p_parameter','parser.py',693),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','parser.py',694),
  ('default_opt -> ASSIGN expression','default_opt',2,'p_default_opt','parser.py',708),
  ('default_opt -> empty','default_opt',1,'p_default_opt','parser.py',709),
  ('block -> LBRACE statements_opt RBRACE','block',3,'p_block','parser.py',716),
  ('statements_opt -> statements','statements_opt',1,'p_statements_opt','parser.py',721),
  ('statements_opt -> empty','statements_opt',1,'p_statements_opt','parser.py',722),
  ('type_primary -> IDENTIFIER','type_primary',1,'p_type_primary','parser.py',748),
  ('type_primary -> LPAREN type_expr RPAREN','type_primary',3,'p_type_primary','parser.py',749),
  ('type_suffix -> type_suffix LBRACKET RBRACKET','type_suffix',3,'p_type_suffix','parser.py',760),
  ('type_suffix -> empty','type_suffix',1,'p_type_suffix','parser.py',761),
  ('type_expr_postfix -> type_primary type_suffix','type_expr_postfix',2,'p_type_expr_postfix','parser.py',771),
  ('type_expr -> type_expr PIPE type_expr_postfix','type_expr',3,'p_type_expr','parser.py',778),
  ('type_expr -> type_expr AMP type_expr_postfix','type_expr',3,'p_type_expr','parser.py',779),
  ('type_expr -> type_expr_postfix','type_expr',1,'p_type_expr','parser.py',780),
  ('type -> type_expr','type',1,'p_type','parser.py',793),
  ('test_declaration -> TEST STRING block','test_declaration',3,'p_test_declaration','parser.py',801),
  ('primary_expression -> IDENTIFIER struct_instantiation_opt','primary_expression',2,'p_primary_expression','parser.py',810),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',811),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',812),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',813),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_index','parser.py',829),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',834),
  ('postfix_expression -> postfix_expression LPAREN arguments RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',835),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',836),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',846),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','parser.py',847),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',848),
  ('expression -> nonassignment_expression assignment_opt','expression',2,'p_expression','parser.py',859),
  ('assignment_opt -> ASSIGN expression','assignment_opt',2,'p_assignment_opt','parser.py',874),
  ('assignment_opt -> PLUS_ASSIGN expression','assignment_opt',2,'p_assignment_opt','parser.py',875),
  ('assignment_opt -> MINUS_ASSIGN expression','assignment_opt',2,'p_assignment_opt','parser.py',876),
  ('assignment_opt -> MULTIPLY_ASSIGN expression','assignment_opt',2,'p_assignment_opt','parser.py',877),
  ('assignment_opt -> DIVIDE_ASSIGN expression','assignment_opt',2,'p_assignment_opt','parser.py',878),
  ('assignment_opt -> empty','assignment_opt',1,'p_assignment_opt','parser.py',879),
  ('struct_instantiation_opt -> LBRACE struct_field_inits_opt RBRACE','struct_instantiation_opt',3,'p_struct_instantiation_opt','parser.py',887),
  ('struct_instantiation_opt -> empty','struct_instantiation_opt',1,'p_struct_instantiation_opt','parser.py',888),
  ('struct_field_inits_opt -> struct_field_inits','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',896),
  ('struct_field_inits_opt -> empty','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',897),
  ('struct_field_inits -> struct_field_inits COMMA struct_field_init','struct_field_inits',3,'p_struct_field_inits_multiple','parser.py',902),
  ('struct_field_inits -> struct_field_init','struct_field_inits',1,'p_struct_field_inits_single','parser.py',907),
  ('struct_field_init -> IDENTIFIER COLON expression','struct_field_init',3,'p_struct_field_init','parser.py',912),
  ('struct_field_init -> IDENTIFIER','struct_field_init',1,'p_struct_field_init_shorthand','parser.py',917),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',924),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',925),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',926),
]
