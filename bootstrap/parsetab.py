
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftORleftANDleftEQNEQleftLTGTLEQGEQleftISleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTrightARROWrightUMINUSleftAMPleftPIPEAMP AND ARROW ASSIGN ASYNC AT AWAIT CATCH COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FAT_ARROW FINALLY FN FOR FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT IN INFO INTERFACE IS LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NOT NUMBER OR PIPE PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT TEST THROW TRY UNDERSCORE WHILEprogram : statementsstatements : statements statementstatements : statementempty :statement : print_statement\n| throw_statement\n| variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| interface_declaration\n| enum_declaration\n| match_statement\n| if_statement\n| return_statement\n| expression_statement\n| assignment_identifier\n| assignment_member\n| import_statement\n| type_alias_declaration\n| try_finally\n| try_catch_finally\n| while_loop\n| for_loop\n| test_declarationprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONthrow_statement : THROW expression SEMICOLONvariable_declaration : LET IDENTIFIER type_opt ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER type_opt ASSIGN expression SEMICOLONmut_opt : MUT\n| emptytype_opt : COLON type\n| emptyconstant_declaration : CONST IDENTIFIER type_opt ASSIGN expression SEMICOLONtype_alias_declaration : IDENTIFIER IDENTIFIER ASSIGN type SEMICOLONopt_return_type : ARROW type_expr\n| emptyfunction_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockfunction_declaration : decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockdecorators_opt : decorators\n| emptydecorators : decorators decorator\n| decoratordecorator : AT IDENTIFIERstruct_declaration : STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACEimplements_opt : IMPLEMENTS interface_list\n| emptyinterface_list : interface_list COMMA IDENTIFIER\n| IDENTIFIERstruct_members : struct_members struct_member\n| struct_memberstruct_member : field_declaration\n| method_declarationfield_declaration : mut_opt IDENTIFIER COLON type SEMICOLONmethod_declaration : decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type blockinterface_declaration : INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACEcolon_opt : COLON\n| emptyinterface_members : interface_members interface_method\n| interface_methodinterface_method : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants optional_comma\n| emptyenum_variants : enum_variants COMMA enum_variant\n| enum_variantenum_variant : IDENTIFIER ASSIGN STRINGenum_variant : IDENTIFIER\n| IDENTIFIER LBRACE enum_fields RBRACEenum_field_declaration : IDENTIFIER COLON typeenum_fields : enum_fields COMMA enum_field_declaration\n| enum_field_declarationoptional_comma : COMMA\n| emptyexpression : LBRACKET array_elements RBRACKETarray_elements : array_elements COMMA expressionarray_elements : expressionarray_elements : emptywhile_loop : WHILE expression blockfor_loop : FOR IDENTIFIER IN expression blockmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arm_list_optmatch_arm_list_opt : match_arm_list\n| emptymatch_arm_list : match_arm_list COMMA match_arm\n| match_armguard_opt : IF expression\n| emptymatch_arm : match_pattern guard_opt match_arrow match_arm_bodymatch_arrow : FAT_ARROWmatch_arm_body : block\n| expressionmatch_pattern : NUMBERmatch_pattern : MINUS NUMBERmatch_pattern : IDENTIFIER LBRACE pattern_field_names RBRACEmatch_pattern : IDENTIFIERmatch_pattern : UNDERSCOREpattern_field_names : pattern_field_names COMMA IDENTIFIER\n| IDENTIFIERif_statement : IF expression block else_optelse_opt : ELSE if_statement\n| ELSE block\n| emptyreturn_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment_identifier : IDENTIFIER ASSIGN expression SEMICOLON\n| IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONassignment_member : expression DOT IDENTIFIER ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON\n| expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLONexpression_statement : expression SEMICOLONexpression : AWAIT expressionexpression : expression DOT DOT expressionexpression : expression IS typeimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIER\n| IDENTIFIERexpression : LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPARENlambda_parameters : lambda_parameters COMMA lambda_parameterlambda_parameters : lambda_parameterlambda_parameter : IDENTIFIER COLON typeopt_lambda_return : ARROW type\n| emptytry_finally : TRY block FINALLY blocktry_catch_finally : TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block\n| TRY block CATCH LPAREN IDENTIFIER RPAREN blockparameters : parameters COMMA parameterparameters : parameterparameters : emptyparameter : IDENTIFIER COLON type default_opt\n| IDENTIFIERdefault_opt : ASSIGN expression\n| emptyblock : LBRACE statements_opt RBRACEstatements_opt : statements\n| emptytype_primary : IDENTIFIER\n| LPAREN type_expr RPARENtype_suffix : type_suffix LBRACKET RBRACKET\n| emptytype_expr_postfix : type_primary type_suffixtype_expr : type_expr PIPE type_expr_postfix\n| type_expr AMP type_expr_postfix\n| type_expr_postfixtype : type_exprtest_declaration : TEST STRING blockprimary_expression : IDENTIFIER struct_instantiation_opt\n| NUMBER\n| STRING\n| LPAREN expression RPARENpostfix_expression : postfix_expression LBRACKET expression RBRACKETpostfix_expression : primary_expression\n| postfix_expression LPAREN arguments RPAREN\n| postfix_expression DOT IDENTIFIERunary_expression : MINUS unary_expression %prec UMINUS\n| NOT unary_expression\n| postfix_expressionexpression : unary_expression\n| expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionstruct_instantiation_opt : LBRACE struct_field_inits_opt RBRACE\n| emptystruct_field_inits_opt : struct_field_inits\n| emptystruct_field_inits : struct_field_inits COMMA struct_field_initstruct_field_inits : struct_field_initstruct_field_init : IDENTIFIER COLON expressionstruct_field_init : IDENTIFIERarguments : arguments COMMA expression\n| expression\n| empty'
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[25,25,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,25,-27,-4,-105,25,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'THROW':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[28,28,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,28,-27,-4,-105,28,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[29,29,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,29,-27,-4,-105,29,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,218,237,239,242,244,264,274,275,276,277,288,292,299,300,304,312,313,314,315,316,318,319,320,325,326,330,346,366,367,372,383,384,387,393,],[31,31,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,31,-27,-4,-105,31,-80,-152,-107,-108,-109,-110,-111,280,-101,-104,-130,-140,-35,280,-51,-52,-53,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-50,-56,-26,-121,-132,-38,-39,-54,-131,-55,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[32,32,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,32,-27,-4,-105,32,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[34,34,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,34,-27,-4,-105,34,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[35,35,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,35,-27,-4,-105,35,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[36,36,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,36,-27,-4,-105,36,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[37,37,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,37,-27,-4,-105,37,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,232,233,235,236,237,238,239,242,244,264,288,292,297,299,300,304,312,313,314,315,316,318,319,320,325,330,346,364,366,367,372,383,387,],[38,38,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,38,-27,-4,-105,38,-80,-152,-107,-108,-109,-110,-111,295,-94,-97,-98,-101,38,-104,-130,-140,-35,-63,-82,-95,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-96,-121,-132,-38,-39,-131,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[39,39,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,39,-27,-4,-105,39,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,34,35,36,37,38,39,43,44,48,49,51,53,55,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,87,91,99,100,102,112,114,115,116,119,122,129,142,144,146,160,162,167,168,169,170,176,178,179,180,182,188,193,194,195,196,197,198,199,203,206,207,208,209,210,212,213,214,215,216,218,237,239,241,242,243,244,249,252,253,264,273,274,275,276,277,278,280,281,282,285,287,288,290,292,293,295,298,299,300,304,308,312,313,314,315,316,318,319,320,321,323,325,326,328,330,339,340,346,351,355,357,358,360,365,366,367,370,372,376,383,384,387,389,393,],[30,30,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,62,62,79,80,89,90,93,94,95,62,62,62,62,104,62,62,62,62,117,-2,-117,123,128,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,156,159,-106,172,30,62,62,62,187,191,62,128,-27,128,128,217,220,222,235,-4,-105,30,-80,62,-152,62,62,62,62,62,62,62,128,128,62,-107,-108,-109,-110,-111,156,62,62,62,269,-4,-101,-104,302,-130,303,-140,62,191,128,-35,269,-4,-51,-52,-53,327,-30,-31,329,332,334,-63,222,-82,235,62,342,-102,-103,-81,128,-112,-113,-114,-115,-116,-28,-29,-34,128,269,-45,-50,356,-56,62,-91,-26,128,128,269,128,334,380,-121,-132,62,-38,269,-39,-54,-131,128,-55,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[40,40,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,40,-27,-4,-105,40,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'TRY':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[42,42,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,42,-27,-4,-105,42,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[43,43,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,43,-27,-4,-105,43,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[44,44,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,44,-27,-4,-105,44,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'TEST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,102,142,169,170,176,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[45,45,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,45,-27,-4,-105,45,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,30,37,38,39,41,43,48,49,54,56,57,58,62,63,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,88,99,102,112,114,115,120,122,127,128,142,169,170,176,178,179,180,182,187,188,193,194,195,196,197,200,201,203,206,207,208,209,210,211,213,214,215,237,239,242,244,247,248,249,262,264,288,292,295,299,300,304,312,313,314,315,316,317,318,319,320,325,330,339,340,346,366,367,370,372,383,387,],[48,48,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,48,48,-4,48,48,48,-155,48,48,48,114,-158,-154,-2,-4,-117,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-153,-178,-106,48,48,48,48,-156,48,-4,-143,-27,-4,-105,48,-80,48,-152,48,-160,48,48,48,48,48,48,261,-146,48,-107,-108,-109,-110,-111,-177,48,48,48,-101,-104,-130,-140,-157,-159,48,-144,-35,-63,-82,48,-102,-103,-81,-112,-113,-114,-115,-116,-145,-28,-29,-34,-45,-56,48,-91,-26,-121,-132,48,-38,-39,-131,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,37,38,39,43,48,49,58,63,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,99,102,112,114,115,122,142,169,170,176,178,179,180,182,188,193,194,195,196,197,203,206,207,208,209,210,213,214,215,237,239,242,244,249,264,288,292,295,299,300,304,312,313,314,315,316,318,319,320,325,330,339,340,346,366,367,370,372,383,387,],[49,49,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,49,49,49,49,49,49,49,49,-2,-117,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-106,49,49,49,49,49,-27,-4,-105,49,-80,49,-152,49,49,49,49,49,49,49,49,-107,-108,-109,-110,-111,49,49,49,-101,-104,-130,-140,49,-35,-63,-82,49,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,49,-91,-26,-121,-132,49,-38,-39,-131,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,30,37,38,39,41,43,48,49,51,53,54,56,57,58,60,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,86,88,99,102,112,114,115,118,120,122,129,142,144,146,159,169,170,174,176,178,179,180,182,187,188,193,194,195,196,197,198,199,203,206,207,208,209,210,211,213,214,215,217,237,239,242,244,247,248,249,253,264,288,292,295,299,300,304,308,312,313,314,315,316,318,319,320,321,325,330,332,339,340,346,351,355,356,358,366,367,370,372,383,387,389,],[26,26,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,26,26,-4,26,26,26,-155,26,26,26,112,112,115,-158,-154,-2,119,-4,-117,129,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-153,-178,-106,26,26,26,26,188,-156,26,129,-27,129,129,216,-4,-105,243,26,-80,26,-152,26,-160,26,26,26,26,26,26,129,129,26,-107,-108,-109,-110,-111,-177,26,26,26,273,-101,-104,-130,-140,-157,-159,26,129,-35,-63,-82,26,-102,-103,-81,129,-112,-113,-114,-115,-116,-28,-29,-34,129,-45,-56,357,26,-91,-26,129,129,376,129,-121,-132,26,-38,-39,-131,129,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,33,46,47,52,58,63,92,99,102,106,117,142,169,170,176,177,178,180,206,207,208,209,210,218,221,237,239,242,244,264,274,275,276,277,279,281,283,284,288,292,299,300,304,312,313,314,315,316,318,319,320,325,326,330,331,346,366,367,372,383,384,387,390,393,394,],[-4,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,60,91,-40,-41,-43,-2,-117,160,-106,-4,-42,-44,-27,-4,-105,-4,-41,-80,-152,-107,-108,-109,-110,-111,-4,285,-101,-104,-130,-140,-35,-4,-51,-52,-53,328,-41,285,-60,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-50,-56,-59,-26,-121,-132,-38,-39,-54,-131,-62,-55,-61,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,33,46,47,52,58,63,99,102,106,117,142,169,170,176,177,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[-4,-4,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,92,-40,-41,-43,-2,-117,-106,-4,-42,-44,-27,-4,-105,-4,-41,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,30,37,38,39,41,43,48,49,50,51,53,54,56,57,58,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,81,82,83,84,85,86,88,96,97,98,99,102,103,108,110,111,112,113,114,115,120,122,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,147,148,149,150,151,168,169,170,176,178,179,180,181,182,183,185,187,188,192,193,194,195,196,197,200,201,203,206,207,208,209,210,211,213,214,215,237,239,242,244,245,246,247,248,249,250,254,255,256,257,258,259,260,262,263,264,266,267,268,288,292,293,295,299,300,304,305,312,313,314,315,316,317,318,319,320,325,330,339,340,341,346,363,366,367,368,370,372,382,383,387,],[51,51,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,51,67,51,-4,51,51,51,-155,51,51,51,-164,51,51,-163,-158,-154,-2,67,-4,-117,51,51,51,51,51,51,51,51,51,51,51,51,67,51,51,51,51,51,-153,-178,67,67,67,-106,51,67,67,67,-161,51,-162,51,51,-156,51,-120,-151,-150,-4,-143,-165,-166,-167,-168,67,67,67,67,67,67,67,67,-27,67,67,67,67,67,234,-4,-105,51,-80,51,-152,-76,51,67,67,-160,51,-119,51,51,51,51,51,-147,-146,51,-107,-108,-109,-110,-111,-177,51,51,51,-101,-104,-130,-140,67,67,-157,-159,51,67,67,67,67,67,67,-148,-149,-144,67,-35,67,67,67,-63,-82,234,51,-102,-103,-81,67,-112,-113,-114,-115,-116,-145,-28,-29,-34,-45,-56,51,-91,67,-26,67,-121,-132,-124,51,-38,67,-39,-131,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,37,38,39,43,48,49,51,53,58,63,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,99,102,112,114,115,122,142,169,170,176,178,179,180,182,188,193,194,195,196,197,203,206,207,208,209,210,213,214,215,237,239,242,244,249,264,288,292,295,299,300,304,312,313,314,315,316,318,319,320,325,330,339,340,346,366,367,370,372,383,387,],[53,53,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,53,53,53,53,53,53,53,53,53,53,-2,-117,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-106,53,53,53,53,53,-27,-4,-105,53,-80,53,-152,53,53,53,53,53,53,53,53,-107,-108,-109,-110,-111,53,53,53,-101,-104,-130,-140,53,-35,-63,-82,53,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,53,-91,-26,-121,-132,53,-38,-39,-131,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,46,52,58,63,99,102,106,117,142,169,170,176,178,180,206,207,208,209,210,218,237,239,242,244,264,274,275,276,277,288,292,299,300,304,312,313,314,315,316,318,319,320,325,326,330,346,366,367,372,383,384,387,393,],[55,55,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,55,-43,-2,-117,-106,55,-42,-44,-27,-4,-105,55,-80,-152,-107,-108,-109,-110,-111,55,-101,-104,-130,-140,-35,55,-51,-52,-53,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-50,-56,-26,-121,-132,-38,-39,-54,-131,-55,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,37,38,39,43,48,49,51,53,58,63,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,99,102,112,114,115,122,142,168,169,170,176,178,179,180,182,188,193,194,195,196,197,203,206,207,208,209,210,213,214,215,234,237,239,242,244,249,264,288,292,293,295,299,300,304,312,313,314,315,316,318,319,320,325,330,339,340,346,366,367,370,372,383,387,],[57,57,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,57,57,57,57,57,57,57,57,57,57,-2,-117,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-106,57,57,57,57,57,-27,233,-4,-105,57,-80,57,-152,57,57,57,57,57,57,57,57,-107,-108,-109,-110,-111,57,57,57,297,-101,-104,-130,-140,57,-35,-63,-82,233,57,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,57,-91,-26,-121,-132,57,-38,-39,-131,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,37,38,39,43,45,48,49,51,53,58,63,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,99,102,112,114,115,122,142,169,170,176,178,179,180,182,188,193,194,195,196,197,203,206,207,208,209,210,213,214,215,237,239,242,244,249,264,286,288,292,295,299,300,301,304,312,313,314,315,316,318,319,320,325,330,339,340,346,366,367,370,372,383,387,],[41,41,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,41,41,41,41,41,41,105,41,41,41,41,-2,-117,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-106,41,41,41,41,41,-27,-4,-105,41,-80,41,-152,41,41,41,41,41,41,41,41,-107,-108,-109,-110,-111,41,41,41,-101,-104,-130,-140,41,-35,333,-63,-82,41,-102,-103,344,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,41,-91,-26,-121,-132,41,-38,-39,-131,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,58,63,99,142,169,170,178,180,206,207,208,209,210,237,239,242,244,264,288,292,299,300,304,312,313,314,315,316,318,319,320,325,330,346,366,367,372,383,387,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-2,-117,-106,-27,-4,-105,-80,-152,-107,-108,-109,-110,-111,-101,-104,-130,-140,-35,-63,-82,-102,-103,-81,-112,-113,-114,-115,-116,-28,-29,-34,-45,-56,-26,-121,-132,-38,-39,-131,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,41,50,54,56,57,58,62,63,86,87,88,99,102,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,152,153,154,155,156,167,168,169,170,171,172,175,176,177,178,180,181,187,192,200,201,206,207,208,209,210,211,222,223,224,225,226,227,228,229,230,231,237,239,242,244,247,248,259,260,262,264,265,266,274,275,276,277,283,284,288,289,290,291,292,299,300,302,304,312,313,314,315,316,317,318,319,320,325,326,330,331,333,335,336,337,338,342,343,346,359,361,362,363,366,367,368,372,378,379,380,383,384,387,390,393,394,],[-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-155,-164,-163,-158,-154,-2,-4,-117,-153,-4,-178,-106,-4,-118,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-27,211,-179,-180,-182,-184,-4,-4,-4,-105,240,-123,244,-141,-142,-80,-152,-76,-160,-119,-147,-146,-107,-108,-109,-110,-111,-177,-69,288,-4,-65,-67,292,-83,-84,-85,-87,-101,-104,-130,-140,-157,-159,-148,-149,-144,-35,-181,-183,325,-51,-52,-53,330,-60,-63,-64,-74,-75,-82,-102,-103,-122,-81,-112,-113,-114,-115,-116,-145,-28,-29,-34,-45,-50,-56,-59,-68,359,-73,-66,-86,-100,364,-26,-70,-90,-92,-93,-121,-132,-124,-38,-71,-72,-99,-39,-54,-131,-62,-55,-61,]),'DOT':([25,27,30,41,50,54,56,57,61,62,64,78,86,88,96,97,98,103,108,110,111,113,120,121,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[59,64,-4,-155,-164,116,-158,-154,121,-4,122,121,-153,-178,121,121,121,121,121,121,-161,-162,-156,122,-120,-151,-150,-4,-143,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-76,121,121,-160,-119,-147,-146,-177,121,121,-157,-159,121,121,121,121,121,121,-148,-149,-144,121,121,121,121,121,-145,121,121,-124,121,]),'SEMICOLON':([27,30,39,41,50,54,56,57,62,78,86,88,98,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,187,192,200,201,205,211,247,248,254,255,256,257,258,259,260,262,263,267,268,306,317,344,368,375,386,392,],[63,-4,99,-155,-164,-163,-158,-154,-4,142,-153,-178,170,-118,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,206,207,208,209,210,-76,-160,-119,-147,-146,264,-177,-157,-159,312,313,314,315,316,-148,-149,-144,318,319,320,346,-145,366,-124,384,390,394,]),'IS':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[65,-4,-155,-164,-163,-158,-154,65,-4,65,-153,-178,65,65,65,65,65,65,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,65,65,65,65,65,65,65,65,65,65,65,65,65,-76,65,65,-160,-119,-147,-146,-177,65,65,-157,-159,65,65,65,65,65,65,-148,-149,-144,65,65,65,65,65,-145,65,65,-124,65,]),'PLUS':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[66,-4,-155,-164,-163,-158,-154,66,-4,66,-153,-178,66,66,66,66,66,66,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,66,66,66,66,66,66,66,66,66,66,66,66,66,-76,66,66,-160,-119,-147,-146,-177,66,66,-157,-159,66,66,66,66,66,66,-148,-149,-144,66,66,66,66,66,-145,66,66,-124,66,]),'MULTIPLY':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[68,-4,-155,-164,-163,-158,-154,68,-4,68,-153,-178,68,68,68,68,68,68,-161,-162,-156,-120,-151,-150,-4,-143,68,68,-167,-168,68,68,68,68,68,68,68,68,68,68,68,68,68,-76,68,68,-160,-119,-147,-146,-177,68,68,-157,-159,68,68,68,68,68,68,-148,-149,-144,68,68,68,68,68,-145,68,68,-124,68,]),'DIVIDE':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[69,-4,-155,-164,-163,-158,-154,69,-4,69,-153,-178,69,69,69,69,69,69,-161,-162,-156,-120,-151,-150,-4,-143,69,69,-167,-168,69,69,69,69,69,69,69,69,69,69,69,69,69,-76,69,69,-160,-119,-147,-146,-177,69,69,-157,-159,69,69,69,69,69,69,-148,-149,-144,69,69,69,69,69,-145,69,69,-124,69,]),'LT':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[70,-4,-155,-164,-163,-158,-154,70,-4,70,-153,-178,70,70,70,70,70,70,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,70,70,70,70,70,70,70,70,70,-76,70,70,-160,-119,-147,-146,-177,70,70,-157,-159,70,70,70,70,70,70,-148,-149,-144,70,70,70,70,70,-145,70,70,-124,70,]),'GT':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[71,-4,-155,-164,-163,-158,-154,71,-4,71,-153,-178,71,71,71,71,71,71,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,71,71,71,71,71,71,71,71,71,-76,71,71,-160,-119,-147,-146,-177,71,71,-157,-159,71,71,71,71,71,71,-148,-149,-144,71,71,71,71,71,-145,71,71,-124,71,]),'LEQ':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[72,-4,-155,-164,-163,-158,-154,72,-4,72,-153,-178,72,72,72,72,72,72,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,72,72,72,72,72,72,72,72,72,-76,72,72,-160,-119,-147,-146,-177,72,72,-157,-159,72,72,72,72,72,72,-148,-149,-144,72,72,72,72,72,-145,72,72,-124,72,]),'GEQ':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[73,-4,-155,-164,-163,-158,-154,73,-4,73,-153,-178,73,73,73,73,73,73,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,73,73,73,73,73,73,73,73,73,-76,73,73,-160,-119,-147,-146,-177,73,73,-157,-159,73,73,73,73,73,73,-148,-149,-144,73,73,73,73,73,-145,73,73,-124,73,]),'EQ':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[74,-4,-155,-164,-163,-158,-154,74,-4,74,-153,-178,74,74,74,74,74,74,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,74,74,74,74,74,74,74,-76,74,74,-160,-119,-147,-146,-177,74,74,-157,-159,74,74,74,74,74,74,-148,-149,-144,74,74,74,74,74,-145,74,74,-124,74,]),'NEQ':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[75,-4,-155,-164,-163,-158,-154,75,-4,75,-153,-178,75,75,75,75,75,75,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,75,75,75,75,75,75,75,-76,75,75,-160,-119,-147,-146,-177,75,75,-157,-159,75,75,75,75,75,75,-148,-149,-144,75,75,75,75,75,-145,75,75,-124,75,]),'AND':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[76,-4,-155,-164,-163,-158,-154,76,-4,76,-153,-178,76,76,76,76,76,76,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,76,76,76,76,76,76,-76,76,76,-160,-119,-147,-146,-177,76,76,-157,-159,76,76,76,76,76,76,-148,-149,-144,76,76,76,76,76,-145,76,76,-124,76,]),'OR':([27,30,41,50,54,56,57,61,62,78,86,88,96,97,98,103,108,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,181,183,185,187,192,200,201,211,245,246,247,248,250,254,255,256,257,258,259,260,262,263,266,267,268,305,317,341,363,368,382,],[77,-4,-155,-164,-163,-158,-154,77,-4,77,-153,-178,77,77,77,77,77,77,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,77,77,77,77,77,-76,77,77,-160,-119,-147,-146,-177,77,77,-157,-159,77,77,77,77,77,77,-148,-149,-144,77,77,77,77,77,-145,77,77,-124,77,]),'ASSIGN':([30,79,80,89,90,123,125,126,127,128,143,145,157,158,200,201,204,222,259,260,262,317,349,],[81,-4,146,-4,-4,193,-151,-150,-4,-143,203,-33,214,215,-147,-146,-32,286,-148,-149,-144,-145,370,]),'PLUS_ASSIGN':([30,123,],[82,194,]),'MINUS_ASSIGN':([30,123,],[83,195,]),'MULTIPLY_ASSIGN':([30,123,],[84,196,]),'DIVIDE_ASSIGN':([30,123,],[85,197,]),'LBRACE':([30,40,41,42,50,54,56,57,62,86,88,93,94,95,96,97,103,105,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,161,163,164,165,166,173,181,187,192,200,201,211,219,220,222,235,238,245,247,248,251,259,260,262,307,309,317,322,329,339,340,345,348,350,352,354,368,373,374,381,388,391,],[87,100,-155,102,-164,-163,-158,-154,87,-153,-178,-4,-4,167,168,102,102,102,-118,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,218,-47,221,-57,-58,102,-76,-160,-119,-147,-146,-177,-46,-49,287,298,102,102,-157,-159,-4,-148,-149,-144,102,-129,-145,-4,-48,102,-91,102,-128,102,-37,-4,-124,-36,102,102,-4,102,]),'RPAREN':([41,50,54,56,57,61,62,86,88,110,111,113,115,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,181,184,185,186,187,189,190,192,200,201,202,211,216,244,247,248,250,259,260,262,269,270,271,272,273,303,305,310,311,317,324,347,349,353,357,368,369,371,376,377,382,385,],[-155,-164,-163,-158,-154,120,-4,-153,-178,-118,-161,-162,-4,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-76,248,-186,-187,-160,251,-126,-119,-147,-146,262,-177,-4,-140,-157,-159,306,-148,-149,-144,-137,322,-134,-135,-4,345,-185,-125,-127,-145,354,368,-4,-133,-4,-124,-136,-139,-4,386,-138,388,]),'RBRACKET':([41,48,50,54,56,57,62,86,88,107,108,109,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,181,183,187,192,200,201,211,246,247,248,259,260,261,262,317,368,],[-155,-4,-164,-163,-158,-154,-4,-153,-178,181,-78,-79,-118,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-76,247,-160,-119,-147,-146,-177,-77,-157,-159,-148,-149,317,-144,-145,-124,]),'COMMA':([41,48,50,54,56,57,62,86,88,107,108,109,110,111,113,115,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,153,155,156,171,172,181,184,185,186,187,189,190,192,200,201,211,216,219,220,222,224,226,229,231,244,246,247,248,259,260,262,265,266,269,270,271,272,273,302,305,310,311,317,324,329,333,335,336,337,338,342,343,349,353,357,359,361,362,363,368,369,371,376,377,378,379,380,382,385,],[-155,-4,-164,-163,-158,-154,-4,-153,-178,182,-78,-79,-118,-161,-162,-4,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,212,-182,-184,241,-123,-76,249,-186,-187,-160,252,-126,-119,-147,-146,-177,-4,282,-49,-69,290,-67,293,-87,-140,-77,-157,-159,-148,-149,-144,-181,-183,-137,323,-134,-135,-4,-122,-185,-125,-127,-145,323,-48,-68,360,-73,-66,-86,-100,365,-4,-133,-4,-70,-90,-92,-93,-124,-136,-139,-4,323,-71,-72,-99,-138,323,]),'FAT_ARROW':([41,50,54,56,57,62,86,88,110,111,113,120,124,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,181,187,192,200,201,211,232,233,235,236,247,248,259,260,262,294,296,297,317,341,364,368,],[-155,-164,-163,-158,-154,-4,-153,-178,-118,-161,-162,-156,-120,-151,-150,-4,-143,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-76,-160,-119,-147,-146,-177,-4,-94,-97,-98,-157,-159,-148,-149,-144,340,-89,-95,-145,-88,-96,-124,]),'INFO':([59,],[118,]),'COLON':([79,89,90,94,156,191,269,327,334,],[144,144,144,165,213,253,321,355,358,]),'IMPLEMENTS':([93,],[162,]),'FINALLY':([101,244,367,],[173,-140,381,]),'CATCH':([101,244,],[174,-140,]),'IN':([104,],[179,]),'PIPE':([125,126,127,128,200,201,202,259,260,262,317,373,],[198,-150,-4,-143,-147,-146,198,-148,-149,-144,-145,198,]),'AMP':([125,126,127,128,200,201,202,259,260,262,317,373,],[199,-150,-4,-143,-147,-146,199,-148,-149,-144,-145,199,]),'UNDERSCORE':([168,293,],[236,236,]),'ELSE':([169,244,],[238,-140,]),'FROM':([240,],[301,]),'ARROW':([251,322,354,386,388,],[308,351,351,389,351,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,102,],[2,176,]),'statement':([0,2,102,176,],[3,58,3,58,]),'print_statement':([0,2,102,176,],[4,4,4,4,]),'throw_statement':([0,2,102,176,],[5,5,5,5,]),'variable_declaration':([0,2,102,176,],[6,6,6,6,]),'constant_declaration':([0,2,102,176,],[7,7,7,7,]),'function_declaration':([0,2,102,176,],[8,8,8,8,]),'struct_declaration':([0,2,102,176,],[9,9,9,9,]),'interface_declaration':([0,2,102,176,],[10,10,10,10,]),'enum_declaration':([0,2,102,176,],[11,11,11,11,]),'match_statement':([0,2,102,176,],[12,12,12,12,]),'if_statement':([0,2,102,176,238,],[13,13,13,13,299,]),'return_statement':([0,2,102,176,],[14,14,14,14,]),'expression_statement':([0,2,102,176,],[15,15,15,15,]),'assignment_identifier':([0,2,102,176,],[16,16,16,16,]),'assignment_member':([0,2,102,176,],[17,17,17,17,]),'import_statement':([0,2,102,176,],[18,18,18,18,]),'type_alias_declaration':([0,2,102,176,],[19,19,19,19,]),'try_finally':([0,2,102,176,],[20,20,20,20,]),'try_catch_finally':([0,2,102,176,],[21,21,21,21,]),'while_loop':([0,2,102,176,],[22,22,22,22,]),'for_loop':([0,2,102,176,],[23,23,23,23,]),'test_declaration':([0,2,102,176,],[24,24,24,24,]),'expression':([0,2,26,28,37,38,39,43,48,49,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,102,112,114,115,122,176,179,182,188,193,194,195,196,197,203,213,214,215,249,295,339,370,],[27,27,61,78,96,97,98,103,108,110,130,131,132,133,134,135,136,137,138,139,140,141,147,148,149,150,151,27,61,183,185,192,27,245,246,250,254,255,256,257,258,263,266,267,268,305,341,363,382,]),'decorators_opt':([0,2,102,176,218,274,],[33,33,33,33,279,279,]),'decorators':([0,2,102,176,218,274,],[46,46,46,46,46,46,]),'empty':([0,2,30,48,62,79,87,89,90,93,94,102,115,127,167,168,169,176,216,218,224,232,251,273,274,322,349,354,357,376,388,],[47,47,88,109,88,145,154,145,145,163,166,177,186,201,225,230,239,47,272,281,291,296,309,272,281,352,371,352,272,272,352,]),'unary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,102,112,114,115,122,176,179,182,188,193,194,195,196,197,203,213,214,215,249,295,339,370,],[50,50,50,50,50,50,50,50,50,50,111,113,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'decorator':([0,2,46,102,176,218,274,],[52,52,106,52,52,52,52,]),'postfix_expression':([0,2,26,28,37,38,39,43,48,49,51,53,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,102,112,114,115,122,176,179,182,188,193,194,195,196,197,203,213,214,215,249,295,339,370,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'primary_expression':([0,2,26,28,37,38,39,43,48,49,51,53,66,67,68,69,70,71,72,73,74,75,76,77,81,82,83,84,85,102,112,114,115,122,176,179,182,188,193,194,195,196,197,203,213,214,215,249,295,339,370,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'struct_instantiation_opt':([30,62,],[86,86,]),'block':([42,97,103,105,173,238,245,307,339,345,350,374,381,391,],[101,169,178,180,242,300,304,347,362,367,372,383,387,393,]),'array_elements':([48,],[107,]),'type':([65,144,146,253,308,321,355,358,389,],[124,204,205,311,348,349,375,378,392,]),'type_expr':([65,129,144,146,253,308,321,351,355,358,389,],[125,202,125,125,125,125,125,373,125,125,125,]),'type_expr_postfix':([65,129,144,146,198,199,253,308,321,351,355,358,389,],[126,126,126,126,259,260,126,126,126,126,126,126,126,]),'type_primary':([65,129,144,146,198,199,253,308,321,351,355,358,389,],[127,127,127,127,127,127,127,127,127,127,127,127,127,]),'type_opt':([79,89,90,],[143,157,158,]),'struct_field_inits_opt':([87,],[152,]),'struct_field_inits':([87,],[153,]),'struct_field_init':([87,212,],[155,265,]),'implements_opt':([93,],[161,]),'colon_opt':([94,],[164,]),'import_items':([100,],[171,]),'statements_opt':([102,],[175,]),'arguments':([115,],[184,]),'lambda_parameters':([119,],[189,]),'lambda_parameter':([119,252,],[190,310,]),'type_suffix':([127,],[200,]),'interface_list':([162,],[219,]),'enum_variants_opt':([167,],[223,]),'enum_variants':([167,],[224,]),'enum_variant':([167,290,],[226,337,]),'match_arms':([168,],[227,]),'match_arm_list_opt':([168,],[228,]),'match_arm_list':([168,],[229,]),'match_arm':([168,293,],[231,338,]),'match_pattern':([168,293,],[232,232,]),'else_opt':([169,],[237,]),'parameters':([216,273,357,376,],[270,324,377,385,]),'parameter':([216,273,323,357,376,],[271,271,353,271,271,]),'struct_members':([218,],[274,]),'struct_member':([218,274,],[275,326,]),'field_declaration':([218,274,],[276,276,]),'method_declaration':([218,274,],[277,277,]),'mut_opt':([218,274,],[278,278,]),'interface_members':([221,],[283,]),'interface_method':([221,283,],[284,331,]),'optional_comma':([224,],[289,]),'guard_opt':([232,],[294,]),'opt_lambda_return':([251,],[307,]),'enum_fields':([287,],[335,]),'enum_field_declaration':([287,360,],[336,379,]),'match_arrow':([294,],[339,]),'pattern_field_names':([298,],[343,]),'opt_return_type':([322,354,388,],[350,374,391,]),'match_arm_body':([339,],[361,]),'default_opt':([349,],[369,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',27),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',34),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',39),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',46),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',53),
  ('statement -> throw_statement','statement',1,'p_statement','parser.py',54),
  ('statement -> variable_declaration','statement',1,'p_statement','parser.py',55),
  ('statement -> constant_declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> function_declaration','statement',1,'p_statement','parser.py',57),
  ('statement -> struct_declaration','statement',1,'p_statement','parser.py',58),
  ('statement -> interface_declaration','statement',1,'p_statement','parser.py',59),
  ('statement -> enum_declaration','statement',1,'p_statement','parser.py',60),
  ('statement -> match_statement','statement',1,'p_statement','parser.py',61),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',62),
  ('statement -> return_statement','statement',1,'p_statement','parser.py',63),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',64),
  ('statement -> assignment_identifier','statement',1,'p_statement','parser.py',65),
  ('statement -> assignment_member','statement',1,'p_statement','parser.py',66),
  ('statement -> import_statement','statement',1,'p_statement','parser.py',67),
  ('statement -> type_alias_declaration','statement',1,'p_statement','parser.py',68),
  ('statement -> try_finally','statement',1,'p_statement','parser.py',69),
  ('statement -> try_catch_finally','statement',1,'p_statement','parser.py',70),
  ('statement -> while_loop','statement',1,'p_statement','parser.py',71),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',72),
  ('statement -> test_declaration','statement',1,'p_statement','parser.py',73),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',80),
  ('throw_statement -> THROW expression SEMICOLON','throw_statement',3,'p_throw_statement','parser.py',87),
  ('variable_declaration -> LET IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let','parser.py',94),
  ('variable_declaration -> MUT IDENTIFIER type_opt ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_mut','parser.py',100),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt','parser.py',106),
  ('mut_opt -> empty','mut_opt',1,'p_mut_opt','parser.py',107),
  ('type_opt -> COLON type','type_opt',2,'p_type_opt','parser.py',114),
  ('type_opt -> empty','type_opt',1,'p_type_opt','parser.py',115),
  ('constant_declaration -> CONST IDENTIFIER type_opt ASSIGN expression SEMICOLON','constant_declaration',6,'p_constant_declaration','parser.py',122),
  ('type_alias_declaration -> IDENTIFIER IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',132),
  ('opt_return_type -> ARROW type_expr','opt_return_type',2,'p_opt_return_type','parser.py',141),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','parser.py',142),
  ('function_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',8,'p_function_declaration','parser.py',150),
  ('function_declaration -> decorators_opt ASYNC FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','function_declaration',9,'p_function_declaration_async','parser.py',162),
  ('decorators_opt -> decorators','decorators_opt',1,'p_decorators_opt','parser.py',174),
  ('decorators_opt -> empty','decorators_opt',1,'p_decorators_opt','parser.py',175),
  ('decorators -> decorators decorator','decorators',2,'p_decorators','parser.py',180),
  ('decorators -> decorator','decorators',1,'p_decorators','parser.py',181),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',189),
  ('struct_declaration -> STRUCT IDENTIFIER implements_opt LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',196),
  ('implements_opt -> IMPLEMENTS interface_list','implements_opt',2,'p_implements_opt','parser.py',204),
  ('implements_opt -> empty','implements_opt',1,'p_implements_opt','parser.py',205),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list','parser.py',210),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list','parser.py',211),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members','parser.py',219),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members','parser.py',220),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',228),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',229),
  ('field_declaration -> mut_opt IDENTIFIER COLON type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',238),
  ('method_declaration -> decorators_opt FN IDENTIFIER LPAREN parameters RPAREN opt_return_type block','method_declaration',8,'p_method_declaration','parser.py',250),
  ('interface_declaration -> INTERFACE IDENTIFIER colon_opt LBRACE interface_members RBRACE','interface_declaration',6,'p_interface_declaration','parser.py',268),
  ('colon_opt -> COLON','colon_opt',1,'p_colon_opt','parser.py',275),
  ('colon_opt -> empty','colon_opt',1,'p_colon_opt','parser.py',276),
  ('interface_members -> interface_members interface_method','interface_members',2,'p_interface_members','parser.py',281),
  ('interface_members -> interface_method','interface_members',1,'p_interface_members','parser.py',282),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_method',8,'p_interface_method','parser.py',290),
  ('interface_method -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_method',6,'p_interface_method','parser.py',291),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',304),
  ('enum_variants_opt -> enum_variants optional_comma','enum_variants_opt',2,'p_enum_variants_opt','parser.py',311),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',312),
  ('enum_variants -> enum_variants COMMA enum_variant','enum_variants',3,'p_enum_variants','parser.py',317),
  ('enum_variants -> enum_variant','enum_variants',1,'p_enum_variants','parser.py',318),
  ('enum_variant -> IDENTIFIER ASSIGN STRING','enum_variant',3,'p_enum_variant_assignment','parser.py',327),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant','parser.py',334),
  ('enum_variant -> IDENTIFIER LBRACE enum_fields RBRACE','enum_variant',4,'p_enum_variant','parser.py',335),
  ('enum_field_declaration -> IDENTIFIER COLON type','enum_field_declaration',3,'p_enum_field_declaration','parser.py',343),
  ('enum_fields -> enum_fields COMMA enum_field_declaration','enum_fields',3,'p_enum_fields','parser.py',348),
  ('enum_fields -> enum_field_declaration','enum_fields',1,'p_enum_fields','parser.py',349),
  ('optional_comma -> COMMA','optional_comma',1,'p_optional_comma','parser.py',357),
  ('optional_comma -> empty','optional_comma',1,'p_optional_comma','parser.py',358),
  ('expression -> LBRACKET array_elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',366),
  ('array_elements -> array_elements COMMA expression','array_elements',3,'p_array_elements_multiple','parser.py',371),
  ('array_elements -> expression','array_elements',1,'p_array_elements_single','parser.py',376),
  ('array_elements -> empty','array_elements',1,'p_array_elements_empty','parser.py',381),
  ('while_loop -> WHILE expression block','while_loop',3,'p_while_loop','parser.py',388),
  ('for_loop -> FOR IDENTIFIER IN expression block','for_loop',5,'p_for_loop','parser.py',395),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',402),
  ('match_arms -> match_arm_list_opt','match_arms',1,'p_match_arms','parser.py',407),
  ('match_arm_list_opt -> match_arm_list','match_arm_list_opt',1,'p_match_arm_list_opt','parser.py',412),
  ('match_arm_list_opt -> empty','match_arm_list_opt',1,'p_match_arm_list_opt','parser.py',413),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list','parser.py',418),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list','parser.py',419),
  ('guard_opt -> IF expression','guard_opt',2,'p_guard_opt','parser.py',427),
  ('guard_opt -> empty','guard_opt',1,'p_guard_opt','parser.py',428),
  ('match_arm -> match_pattern guard_opt match_arrow match_arm_body','match_arm',4,'p_match_arm','parser.py',436),
  ('match_arrow -> FAT_ARROW','match_arrow',1,'p_match_arrow','parser.py',441),
  ('match_arm_body -> block','match_arm_body',1,'p_match_arm_body','parser.py',446),
  ('match_arm_body -> expression','match_arm_body',1,'p_match_arm_body','parser.py',447),
  ('match_pattern -> NUMBER','match_pattern',1,'p_match_pattern_number','parser.py',460),
  ('match_pattern -> MINUS NUMBER','match_pattern',2,'p_match_pattern_negative','parser.py',465),
  ('match_pattern -> IDENTIFIER LBRACE pattern_field_names RBRACE','match_pattern',4,'p_match_pattern_struct','parser.py',470),
  ('match_pattern -> IDENTIFIER','match_pattern',1,'p_match_pattern_simple','parser.py',475),
  ('match_pattern -> UNDERSCORE','match_pattern',1,'p_match_pattern_wildcard','parser.py',480),
  ('pattern_field_names -> pattern_field_names COMMA IDENTIFIER','pattern_field_names',3,'p_pattern_field_names','parser.py',485),
  ('pattern_field_names -> IDENTIFIER','pattern_field_names',1,'p_pattern_field_names','parser.py',486),
  ('if_statement -> IF expression block else_opt','if_statement',4,'p_if_statement','parser.py',496),
  ('else_opt -> ELSE if_statement','else_opt',2,'p_else_opt','parser.py',505),
  ('else_opt -> ELSE block','else_opt',2,'p_else_opt','parser.py',506),
  ('else_opt -> empty','else_opt',1,'p_else_opt','parser.py',507),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',519),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',520),
  ('assignment_identifier -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',530),
  ('assignment_identifier -> IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',531),
  ('assignment_identifier -> IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',532),
  ('assignment_identifier -> IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',533),
  ('assignment_identifier -> IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_identifier',4,'p_assignment_identifier','parser.py',534),
  ('assignment_member -> expression DOT IDENTIFIER ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',547),
  ('assignment_member -> expression DOT IDENTIFIER PLUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',548),
  ('assignment_member -> expression DOT IDENTIFIER MINUS_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',549),
  ('assignment_member -> expression DOT IDENTIFIER MULTIPLY_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',550),
  ('assignment_member -> expression DOT IDENTIFIER DIVIDE_ASSIGN expression SEMICOLON','assignment_member',6,'p_assignment_member','parser.py',551),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',566),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',571),
  ('expression -> expression DOT DOT expression','expression',4,'p_expression_range','parser.py',576),
  ('expression -> expression IS type','expression',3,'p_expression_typecheck','parser.py',581),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',588),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items','parser.py',595),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items','parser.py',596),
  ('expression -> LPAREN FN LPAREN lambda_parameters RPAREN opt_lambda_return block RPAREN','expression',8,'p_expression_lambda','parser.py',606),
  ('lambda_parameters -> lambda_parameters COMMA lambda_parameter','lambda_parameters',3,'p_lambda_parameters_multiple','parser.py',611),
  ('lambda_parameters -> lambda_parameter','lambda_parameters',1,'p_lambda_parameters_single','parser.py',616),
  ('lambda_parameter -> IDENTIFIER COLON type','lambda_parameter',3,'p_lambda_parameter','parser.py',621),
  ('opt_lambda_return -> ARROW type','opt_lambda_return',2,'p_opt_lambda_return','parser.py',626),
  ('opt_lambda_return -> empty','opt_lambda_return',1,'p_opt_lambda_return','parser.py',627),
  ('try_finally -> TRY block FINALLY block','try_finally',4,'p_try_finally','parser.py',634),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block FINALLY block','try_catch_finally',9,'p_try_catch_finally','parser.py',639),
  ('try_catch_finally -> TRY block CATCH LPAREN IDENTIFIER RPAREN block','try_catch_finally',7,'p_try_catch_finally','parser.py',640),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',667),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',672),
  ('parameters -> empty','parameters',1,'p_parameters_empty','parser.py',677),
  ('parameter -> IDENTIFIER COLON type default_opt','parameter',4,'p_parameter','parser.py',682),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','parser.py',683),
  ('default_opt -> ASSIGN expression','default_opt',2,'p_default_opt','parser.py',697),
  ('default_opt -> empty','default_opt',1,'p_default_opt','parser.py',698),
  ('block -> LBRACE statements_opt RBRACE','block',3,'p_block','parser.py',705),
  ('statements_opt -> statements','statements_opt',1,'p_statements_opt','parser.py',710),
  ('statements_opt -> empty','statements_opt',1,'p_statements_opt','parser.py',711),
  ('type_primary -> IDENTIFIER','type_primary',1,'p_type_primary','parser.py',723),
  ('type_primary -> LPAREN type_expr RPAREN','type_primary',3,'p_type_primary','parser.py',724),
  ('type_suffix -> type_suffix LBRACKET RBRACKET','type_suffix',3,'p_type_suffix','parser.py',734),
  ('type_suffix -> empty','type_suffix',1,'p_type_suffix','parser.py',735),
  ('type_expr_postfix -> type_primary type_suffix','type_expr_postfix',2,'p_type_expr_postfix','parser.py',745),
  ('type_expr -> type_expr PIPE type_expr_postfix','type_expr',3,'p_type_expr','parser.py',752),
  ('type_expr -> type_expr AMP type_expr_postfix','type_expr',3,'p_type_expr','parser.py',753),
  ('type_expr -> type_expr_postfix','type_expr',1,'p_type_expr','parser.py',754),
  ('type -> type_expr','type',1,'p_type','parser.py',767),
  ('test_declaration -> TEST STRING block','test_declaration',3,'p_test_declaration','parser.py',775),
  ('primary_expression -> IDENTIFIER struct_instantiation_opt','primary_expression',2,'p_primary_expression','parser.py',784),
  ('primary_expression -> NUMBER','primary_expression',1,'p_primary_expression','parser.py',785),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','parser.py',786),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',787),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_index','parser.py',803),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',808),
  ('postfix_expression -> postfix_expression LPAREN arguments RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',809),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','parser.py',810),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',820),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','parser.py',821),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',822),
  ('expression -> unary_expression','expression',1,'p_expression','parser.py',833),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',834),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',835),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',836),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',837),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',838),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',839),
  ('expression -> expression LEQ expression','expression',3,'p_expression','parser.py',840),
  ('expression -> expression GEQ expression','expression',3,'p_expression','parser.py',841),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',842),
  ('expression -> expression NEQ expression','expression',3,'p_expression','parser.py',843),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',844),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',845),
  ('struct_instantiation_opt -> LBRACE struct_field_inits_opt RBRACE','struct_instantiation_opt',3,'p_struct_instantiation_opt','parser.py',853),
  ('struct_instantiation_opt -> empty','struct_instantiation_opt',1,'p_struct_instantiation_opt','parser.py',854),
  ('struct_field_inits_opt -> struct_field_inits','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',862),
  ('struct_field_inits_opt -> empty','struct_field_inits_opt',1,'p_struct_field_inits_opt','parser.py',863),
  ('struct_field_inits -> struct_field_inits COMMA struct_field_init','struct_field_inits',3,'p_struct_field_inits_multiple','parser.py',868),
  ('struct_field_inits -> struct_field_init','struct_field_inits',1,'p_struct_field_inits_single','parser.py',873),
  ('struct_field_init -> IDENTIFIER COLON expression','struct_field_init',3,'p_struct_field_init','parser.py',878),
  ('struct_field_init -> IDENTIFIER','struct_field_init',1,'p_struct_field_init_shorthand','parser.py',883),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',890),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',891),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',892),
]
