
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTleftLPARENRPARENrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FALSE FN FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NULL NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN ROUTINE RPAREN SEMICOLON STRING STRUCT TRUE TYPE UNDERSCOREprogram : statementsstatements : statements statementstatements : statementstatement : variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| enum_declaration\n| interface_declaration\n| print_statement\n| if_statement\n| return_statement\n| assignment\n| expression_statement\n| match_statement \n| import_statementmatch_statement : MATCH expression LBRACE match_arms RBRACE\nmatch_arms :\n           | match_arm_list maybe_comma\nmatch_arm_list : match_armmatch_arm_list : match_arm_list COMMA match_armmaybe_comma : COMMA\n| empty\nmatch_arm : pattern ARROW inline_statementinline_statement : PRINT DOT INFO LPAREN expression RPARENinline_statement : assignment_expressioninline_statement : expressionpattern : MINUS NUMBERpattern : NUMBERpattern : UNDERSCOREassignment_expression : lvalue ASSIGN expression\n| lvalue PLUS_ASSIGN expression\n| lvalue MINUS_ASSIGN expression\n| lvalue MULTIPLY_ASSIGN expression\n| lvalue DIVIDE_ASSIGN expressiontype_alias_declaration : TYPE IDENTIFIER ASSIGN type SEMICOLONinterface_declaration : INTERFACE IDENTIFIER LBRACE interface_members RBRACEinterface_members : interface_members interface_memberinterface_members : interface_memberinterface_member : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONinterface_list : interface_list COMMA IDENTIFIERinterface_list : IDENTIFIERstruct_members : struct_members struct_memberstruct_members : struct_memberstruct_member_field : mut_opt IDENTIFIER ARROW type SEMICOLONstruct_member : mut_field_declaration\n| field_declaration\n| method_declaration\n| struct_member_fieldexpression : IDENTIFIER LBRACE struct_initializers RBRACEstruct_initializers : struct_initializers COMMA struct_initializerstruct_initializers : struct_initializerstruct_initializers : struct_initializer : IDENTIFIER COLON expressionstruct_declaration : STRUCT IDENTIFIER IMPLEMENTS interface_list LBRACE struct_members RBRACEstruct_declaration : STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACEimplements_clause : IMPLEMENTS interface_listimplements_clause : method_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmethod_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmut_field_declaration : MUT LET IDENTIFIER ARROW type SEMICOLONfield_declaration : LET IDENTIFIER ARROW type SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants\n| emptyenum_variants : enum_variant_list maybe_trailing_commaenum_variant_list : enum_variantenum_variant_list : enum_variant_list COMMA enum_variantmaybe_trailing_comma : COMMA\n| empty\nenum_variant : IDENTIFIER LBRACE struct_members RBRACEenum_variant : IDENTIFIERdecorators : decorators decoratordecorators : decoratordecorator : AT IDENTIFIERconstant_declaration : CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ASSIGN expression SEMICOLONmut_opt : MUTmut_opt : function_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEexpression : AWAIT expressionprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIERimport_items : IDENTIFIERimport_items : block : LBRACE statements RBRACEif_statement : IF expression block else_clauseif_statement : IF LPAREN expression RPAREN block else_clauseelse_clause : ELSE if_statementelse_clause : ELSE blockelse_clause :return_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment : assignment_expression SEMICOLONlvalue : IDENTIFIERlvalue : expression DOT IDENTIFIERexpression : FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEexpression : FN LPAREN parameters RPAREN LBRACE statements RBRACEexpression_statement : expression SEMICOLONparameters : parameters COMMA parameter\n| parameters COMMAparameters : parameterparameters : parameter : IDENTIFIER ARROW typeparameter : IDENTIFIERtype : IDENTIFIER\n| type LT type_list GTtype_list : type_list COMMA typetype_list : typeexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| elements COMMAelements : expressionelements : expression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arguments RPAREN\n| expression LPAREN arguments RPARENexpression : expression DOT IDENTIFIERarguments : arguments COMMA expressionarguments : expressionarguments : empty :'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,43,48,81,82,132,133,135,168,179,181,200,207,210,212,213,214,215,216,217,218,223,224,228,232,233,234,235,236,245,254,256,257,259,260,266,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,330,333,337,338,339,340,341,342,347,348,349,354,356,357,358,359,360,361,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,64,-2,-111,-105,-106,-103,17,-104,219,-99,17,-81,17,219,219,-45,-47,-48,-49,-50,261,219,-64,-37,-101,-102,-98,-103,-17,-79,17,17,219,-57,-44,219,-100,-80,17,17,17,17,-56,-93,-94,-78,-77,17,17,17,17,-91,17,17,17,-89,17,-87,17,-63,-46,17,-85,17,17,-90,-62,17,-88,-86,-84,17,17,17,17,-61,-60,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,43,48,81,82,132,133,135,168,179,181,200,207,210,212,213,214,215,216,217,223,224,228,232,233,234,235,236,245,254,256,257,259,260,266,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,330,333,337,338,339,340,341,342,347,348,349,354,356,357,358,359,360,361,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,45,-2,-111,-105,-106,-103,20,-104,218,-99,20,-81,20,218,218,-45,-47,-48,-49,-50,218,-64,-37,-101,-102,-98,-103,-17,-79,20,20,218,-57,-44,218,-100,-80,20,20,20,20,-56,-93,-94,-78,-77,20,20,20,20,-91,20,20,20,-89,20,-87,20,-63,-46,20,-85,20,20,-90,-62,20,-88,-86,-84,20,20,20,20,-61,-60,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,21,-104,-99,21,-81,21,-64,-37,-101,-102,-98,-103,-17,-79,21,21,-57,-100,-80,21,21,21,21,-56,-93,-94,-78,-77,21,21,21,21,-91,21,21,21,-89,21,-87,21,21,-85,21,21,-90,21,-88,-86,-84,21,21,21,21,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,43,48,67,81,82,94,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,65,-75,-2,-111,-74,-105,-106,-76,-103,23,-104,-99,23,-81,23,-64,-37,-101,-102,-98,-103,-17,-79,23,23,-57,-100,-80,23,23,23,23,-56,-93,-94,-78,-77,23,23,23,23,-91,23,23,23,-89,23,-87,23,23,-85,23,23,-90,23,-88,-86,-84,23,23,23,23,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,23,25,30,31,33,36,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,67,79,81,82,85,86,87,88,89,94,116,130,132,133,135,145,147,148,152,168,175,176,178,179,181,198,200,207,210,212,213,214,215,216,217,220,223,224,228,229,232,233,234,235,236,240,244,245,249,254,256,257,259,260,266,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,330,333,335,336,337,338,339,340,341,342,347,348,349,352,354,356,357,358,359,360,361,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,66,68,73,73,73,73,-75,73,73,73,-2,73,-111,73,73,73,73,73,73,73,73,73,73,73,73,73,118,-74,73,-105,-106,73,73,73,73,73,-76,73,177,-103,24,-104,73,73,73,73,221,177,-39,73,-99,24,73,-81,24,221,221,-45,-47,-48,-49,-50,263,221,-64,-37,-38,-101,-102,-98,-103,-17,73,73,-79,73,24,24,221,-57,-44,221,-100,-80,24,24,24,24,-56,-93,-94,-78,-77,24,24,24,24,-91,24,24,24,-89,24,-87,24,-63,-46,-41,73,24,-85,24,24,-90,-62,24,-88,-86,-40,-84,24,24,24,24,-61,-60,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,26,-104,-99,26,-81,26,-64,-37,-101,-102,-98,-103,-17,-79,26,26,-57,-100,-80,26,26,26,26,-56,-93,-94,-78,-77,26,26,26,26,-91,26,26,26,-89,26,-87,26,26,-85,26,26,-90,26,-88,-86,-84,26,26,26,26,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,27,-104,-99,27,-81,27,-64,-37,-101,-102,-98,-103,-17,-79,27,27,-57,-100,-80,27,27,27,27,-56,-93,-94,-78,-77,27,27,27,27,-91,27,27,27,-89,27,-87,27,27,-85,27,27,-90,27,-88,-86,-84,27,27,27,27,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,28,-104,-99,28,-81,28,-64,-37,-101,-102,-98,-103,-17,-79,28,28,-57,-100,-80,28,28,28,28,-56,-93,-94,-78,-77,28,28,28,28,-91,28,28,28,-89,28,-87,28,28,-85,28,28,-90,28,-88,-86,-84,28,28,28,28,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,240,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,29,-104,-99,29,-81,29,-64,-37,-101,-102,-98,-103,-17,273,-79,29,29,-57,-100,-80,29,29,29,29,-56,-93,-94,-78,-77,29,29,29,29,-91,29,29,29,-89,29,-87,29,29,-85,29,29,-90,29,-88,-86,-84,29,29,29,29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,180,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,30,-104,-99,30,30,-81,30,-64,-37,-101,-102,-98,-103,-17,-79,30,30,-57,-100,-80,30,30,30,30,-56,-93,-94,-78,-77,30,30,30,30,-91,30,30,30,-89,30,-87,30,30,-85,30,30,-90,30,-88,-86,-84,30,30,30,30,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,31,-104,-99,31,-81,31,-64,-37,-101,-102,-98,-103,-17,-79,31,31,-57,-100,-80,31,31,31,31,-56,-93,-94,-78,-77,31,31,31,31,-91,31,31,31,-89,31,-87,31,31,-85,31,31,-90,31,-88,-86,-84,31,31,31,31,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,33,-104,-99,33,-81,33,-64,-37,-101,-102,-98,-103,-17,-79,33,33,-57,-100,-80,33,33,33,33,-56,-93,-94,-78,-77,33,33,33,33,-91,33,33,33,-89,33,-87,33,33,-85,33,33,-90,33,-88,-86,-84,33,33,33,33,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,224,228,232,233,234,235,236,245,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,337,338,339,340,341,347,348,349,354,356,357,358,359,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,34,-104,-99,34,-81,34,-64,-37,-101,-102,-98,-103,-17,-79,34,34,-57,-100,-80,34,34,34,34,-56,-93,-94,-78,-77,34,34,34,34,-91,34,34,34,-89,34,-87,34,34,-85,34,34,-90,34,-88,-86,-84,34,34,34,34,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,24,25,26,27,28,30,31,33,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,70,79,81,82,84,85,86,87,88,89,115,116,118,121,126,127,129,132,133,135,145,146,147,148,150,152,157,159,160,163,164,168,177,178,179,181,191,198,199,200,202,206,207,210,211,212,213,214,215,216,217,218,219,221,222,223,224,226,228,232,233,234,235,236,240,244,245,249,253,254,256,257,259,260,261,263,266,268,270,278,280,283,284,285,286,288,289,291,293,295,296,299,301,302,304,305,306,308,310,311,312,313,314,316,322,323,324,325,326,327,330,333,334,336,337,338,339,340,341,342,344,347,348,349,350,354,356,357,358,359,360,361,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-83,63,69,72,74,75,76,72,72,72,72,72,72,94,-2,95,-82,96,72,-111,72,72,72,72,72,72,72,72,72,72,72,72,72,114,117,119,120,124,72,-105,-106,138,72,72,72,72,72,154,72,158,124,165,166,169,-103,18,-104,72,154,72,72,96,72,154,124,124,124,154,-83,230,72,-99,18,243,72,154,-81,124,154,18,-83,258,-83,-45,-47,-48,-49,-50,-82,262,264,265,-83,-64,169,-37,-101,-102,-98,-103,-17,18,72,-79,72,154,18,18,-83,-57,-44,292,294,-83,124,-100,-80,154,154,18,154,18,18,18,-56,154,124,154,-93,-94,-78,-77,154,18,18,18,18,-91,18,154,124,18,18,-89,18,-87,18,-63,-46,154,72,18,-85,18,18,-90,-62,154,18,-88,-86,154,-84,18,18,18,18,-61,-60,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,224,228,232,233,234,235,236,240,244,245,249,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,336,337,338,339,340,341,347,348,349,354,356,357,358,359,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,38,38,38,38,38,38,38,-2,38,-111,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-105,-106,38,38,38,38,38,38,-103,38,-104,38,38,38,38,38,-99,38,38,-81,38,-64,-37,-101,-102,-98,-103,-17,38,38,-79,38,38,38,-57,-100,-80,38,38,38,38,-56,-93,-94,-78,-77,38,38,38,38,-91,38,38,38,-89,38,-87,38,38,38,-85,38,38,-90,38,-88,-86,-84,38,38,38,38,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,224,228,232,233,234,235,236,240,244,245,249,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,336,337,338,339,340,341,347,348,349,354,356,357,358,359,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,39,39,39,39,39,39,39,-2,39,-111,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-105,-106,39,39,39,39,39,39,-103,39,-104,39,39,39,39,39,-99,39,39,-81,39,-64,-37,-101,-102,-98,-103,-17,39,39,-79,39,39,39,-57,-100,-80,39,39,39,39,-56,-93,-94,-78,-77,39,39,39,39,-91,39,39,39,-89,39,-87,39,39,39,-85,39,39,-90,39,-88,-86,-84,39,39,39,39,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,25,30,31,33,35,38,39,40,41,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,78,79,80,81,82,83,85,86,87,88,89,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,125,132,133,134,135,136,139,140,141,142,143,144,145,147,148,149,151,152,153,156,165,178,179,181,182,192,194,195,197,198,200,207,224,228,231,232,233,234,235,236,238,240,244,245,246,249,254,256,259,270,274,277,278,281,284,286,288,289,290,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,328,336,337,338,339,340,341,346,347,348,349,354,356,357,358,359,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-143,50,40,40,40,40,-142,40,40,40,-141,-2,40,-111,40,40,40,40,40,40,40,40,40,40,40,40,40,50,-143,50,40,50,-105,-106,50,40,40,40,40,40,50,50,-139,50,-127,-128,-129,-130,50,50,50,50,50,50,50,50,-146,40,-140,-103,40,50,-104,187,50,50,50,50,50,-122,40,40,40,-51,-144,40,-145,50,-146,40,-99,40,-140,50,50,50,50,40,-81,40,-64,-37,50,-101,-102,-98,-103,-17,187,40,40,-79,50,40,40,40,-57,-100,50,50,-80,50,40,40,40,40,-110,-56,-93,-94,-78,-77,40,40,40,40,-91,40,40,40,-89,40,-87,40,-109,40,40,-85,40,40,-90,50,40,-88,-86,-84,40,40,40,40,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,24,25,30,31,33,35,38,39,40,41,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,71,72,73,78,79,80,81,82,83,85,86,87,88,89,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,119,120,125,131,132,133,134,135,139,140,141,142,143,144,145,147,148,149,151,152,153,156,158,165,178,179,181,182,192,194,195,197,198,200,207,224,228,230,231,232,233,234,235,236,240,244,245,246,249,254,256,259,264,270,274,277,278,281,284,286,288,289,290,291,294,299,301,302,304,306,308,310,311,312,313,320,322,323,324,325,326,327,328,336,337,338,339,340,341,346,347,348,349,354,356,357,358,359,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,47,61,70,25,79,25,25,-142,25,25,25,-141,-2,25,-111,25,25,25,25,25,25,25,25,25,25,25,25,25,121,61,47,70,61,25,61,-105,-106,61,25,25,25,25,25,61,61,-139,61,61,61,61,61,61,61,61,61,61,61,61,61,-146,25,159,160,-140,178,-103,25,61,-104,61,61,61,61,61,-122,25,25,25,-51,-144,25,-145,61,202,-146,25,-99,25,-140,61,61,61,61,25,-81,25,-64,-37,268,61,-101,-102,-98,-103,-17,25,25,-79,61,25,25,25,-57,295,-100,61,61,-80,61,25,25,25,25,-110,-56,316,-93,-94,-78,-77,25,25,25,25,-91,25,336,25,25,-89,25,-87,25,-109,25,25,-85,25,25,-90,61,25,-88,-86,-84,25,25,25,25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,136,145,147,148,152,178,179,181,187,198,200,207,224,228,232,233,234,235,236,238,240,244,245,249,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,336,337,338,339,340,341,347,348,349,354,356,357,358,359,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,41,41,41,41,41,41,41,-2,41,-111,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-105,-106,41,41,41,41,41,41,-103,41,-104,188,41,41,41,41,41,-99,41,241,41,-81,41,-64,-37,-101,-102,-98,-103,-17,188,41,41,-79,41,41,41,-57,-100,-80,41,41,41,41,-56,-93,-94,-78,-77,41,41,41,41,-91,41,41,41,-89,41,-87,41,41,41,-85,41,41,-90,41,-88,-86,-84,41,41,41,41,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,224,228,232,233,234,235,236,240,242,244,245,249,254,256,259,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,336,337,338,339,340,341,347,348,349,354,356,357,358,359,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,35,35,35,35,35,35,35,-2,35,-111,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-105,-106,35,35,35,35,35,35,-103,35,-104,35,35,35,35,35,-99,35,35,-81,35,-64,-37,-101,-102,-98,-103,-17,35,276,35,-79,35,35,35,-57,-100,-80,35,35,35,35,-56,-93,-94,-78,-77,35,35,35,35,-91,35,35,35,-89,35,-87,35,35,35,-85,35,35,-90,35,-88,-86,-84,35,35,35,35,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,43,48,67,81,82,94,132,133,135,168,179,181,200,207,210,212,213,214,215,216,217,220,223,224,228,232,233,234,235,236,245,254,256,257,259,260,266,270,278,284,286,288,289,291,299,301,302,304,306,308,310,311,312,313,322,323,324,325,326,327,330,333,337,338,339,340,341,342,347,348,349,354,356,357,358,359,360,361,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,42,-75,-2,-111,-74,-105,-106,-76,-103,42,-104,42,-99,42,-81,42,42,42,-45,-47,-48,-49,-50,42,42,-64,-37,-101,-102,-98,-103,-17,-79,42,42,42,-57,-44,42,-100,-80,42,42,42,42,-56,-93,-94,-78,-77,42,42,42,42,-91,42,42,42,-89,42,-87,42,-63,-46,42,-85,42,42,-90,-62,42,-88,-86,-84,42,42,42,42,-61,-60,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,135,179,200,224,228,232,233,234,235,236,245,259,270,278,291,299,301,302,304,312,324,326,338,341,348,349,354,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-111,-105,-106,-103,-104,-99,-81,-64,-37,-101,-102,-98,-103,-17,-79,-57,-100,-80,-56,-93,-94,-78,-77,-91,-89,-87,-85,-90,-88,-86,-84,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,35,41,43,46,48,72,81,82,84,90,93,97,98,101,102,103,104,105,106,107,108,109,110,111,112,114,125,129,132,135,136,137,138,139,140,141,142,143,144,149,151,153,165,169,170,171,172,173,174,175,176,179,181,183,184,185,195,196,200,212,213,214,215,216,217,224,225,226,227,228,229,232,233,234,235,236,237,238,239,243,245,256,257,259,260,266,267,270,271,272,274,275,278,288,290,291,297,299,301,302,304,308,310,312,313,322,324,326,327,328,330,333,335,338,339,340,341,342,347,348,349,352,353,354,358,359,360,361,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-143,-142,-141,-2,-54,-111,-143,-105,-106,-97,-92,-139,149,-53,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-146,-140,-150,-103,-104,-18,190,-96,-31,-32,-33,-34,-35,-122,-51,-144,-145,-146,-73,224,-65,-66,-150,-68,228,-39,-99,234,236,-150,-20,-55,-52,-81,259,-45,-47,-48,-49,-50,-64,-67,-70,-71,-37,-38,-101,-102,-98,-103,-17,-19,-22,-23,-95,-79,290,291,-57,-44,297,-69,-100,-21,-24,-27,-26,-80,312,-110,-56,-72,-93,-94,-78,-77,324,326,-91,328,338,-89,-87,341,-109,-63,-46,-41,-85,348,349,-90,-62,354,-88,-86,-40,-25,-84,360,361,-61,-60,]),'LBRACE':([18,34,35,41,72,74,75,76,78,83,90,93,101,102,103,104,105,106,107,108,109,110,111,112,125,128,144,149,151,153,154,162,165,166,167,169,180,182,205,251,252,255,258,279,282,287,290,307,309,321,328,351,355,],[46,84,-142,-141,46,-59,129,130,133,136,-92,-139,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-140,168,-122,-51,-144,-145,-118,207,-146,-43,210,223,133,-140,254,284,286,289,-42,-119,306,311,-110,323,325,337,-109,356,357,]),'SEMICOLON':([18,19,31,32,35,41,72,80,90,93,101,102,103,104,105,106,107,108,109,110,111,112,114,125,139,140,141,142,143,144,149,151,153,154,156,165,194,246,269,276,277,279,281,290,315,318,319,328,329,345,],[-143,48,81,82,-142,-141,-143,135,-92,-139,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-146,-140,-31,-32,-33,-34,-35,-122,-51,-144,-145,-118,200,-146,245,278,299,301,302,-119,304,-110,330,333,335,-109,342,352,]),'PLUS':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,49,-142,-141,49,-143,49,49,49,49,49,-139,49,-127,-128,-129,-130,49,49,49,49,49,49,49,49,-146,-140,49,49,49,49,49,49,-122,-51,-144,-145,49,-146,-140,49,49,49,49,49,49,49,49,49,-110,-109,49,]),'MULTIPLY':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,51,-142,-141,51,-143,51,51,51,51,51,-139,51,51,51,-129,-130,51,51,51,51,51,51,51,51,-146,-140,51,51,51,51,51,51,-122,-51,-144,-145,51,-146,-140,51,51,51,51,51,51,51,51,51,-110,-109,51,]),'DIVIDE':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,52,-142,-141,52,-143,52,52,52,52,52,-139,52,52,52,-129,-130,52,52,52,52,52,52,52,52,-146,-140,52,52,52,52,52,52,-122,-51,-144,-145,52,-146,-140,52,52,52,52,52,52,52,52,52,-110,-109,52,]),'LT':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,154,155,156,165,182,192,193,194,195,197,201,209,231,246,247,255,274,277,279,281,287,290,303,307,309,315,318,321,328,329,345,346,351,355,],[-143,53,-142,-141,53,-143,53,53,53,53,53,-139,53,-127,-128,-129,-130,-131,-132,-133,-134,53,53,53,53,-146,-140,53,53,53,53,53,53,-122,-51,-144,-145,-118,199,53,-146,-140,53,199,53,53,53,199,199,53,53,199,199,53,53,-119,53,199,-110,199,199,199,199,199,199,-109,199,199,53,199,199,]),'GT':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,154,156,165,182,192,194,195,197,231,246,247,248,274,277,279,281,290,303,328,346,],[-143,54,-142,-141,54,-143,54,54,54,54,54,-139,54,-127,-128,-129,-130,-131,-132,-133,-134,54,54,54,54,-146,-140,54,54,54,54,54,54,-122,-51,-144,-145,-118,54,-146,-140,54,54,54,54,54,54,-121,279,54,54,-119,54,-110,-120,-109,54,]),'LEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,55,-142,-141,55,-143,55,55,55,55,55,-139,55,-127,-128,-129,-130,-131,-132,-133,-134,55,55,55,55,-146,-140,55,55,55,55,55,55,-122,-51,-144,-145,55,-146,-140,55,55,55,55,55,55,55,55,55,-110,-109,55,]),'GEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,56,-142,-141,56,-143,56,56,56,56,56,-139,56,-127,-128,-129,-130,-131,-132,-133,-134,56,56,56,56,-146,-140,56,56,56,56,56,56,-122,-51,-144,-145,56,-146,-140,56,56,56,56,56,56,56,56,56,-110,-109,56,]),'EQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,57,-142,-141,57,-143,57,57,57,57,57,-139,57,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,57,57,-146,-140,57,57,57,57,57,57,-122,-51,-144,-145,57,-146,-140,57,57,57,57,57,57,57,57,57,-110,-109,57,]),'NEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,58,-142,-141,58,-143,58,58,58,58,58,-139,58,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,58,58,-146,-140,58,58,58,58,58,58,-122,-51,-144,-145,58,-146,-140,58,58,58,58,58,58,58,58,58,-110,-109,58,]),'AND':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,59,-142,-141,59,-143,59,59,59,59,59,-139,59,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,59,-146,-140,59,59,59,59,59,59,-122,-51,-144,-145,59,-146,-140,59,59,59,59,59,59,59,59,59,-110,-109,59,]),'OR':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,274,277,281,290,328,346,],[-143,60,-142,-141,60,-143,60,60,60,60,60,-139,60,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-146,-140,60,60,60,60,60,60,-122,-51,-144,-145,60,-146,-140,60,60,60,60,60,60,60,60,60,-110,-109,60,]),'DOT':([18,19,29,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,231,246,273,274,277,281,290,328,346,],[-143,62,77,-142,-141,126,-143,126,126,126,126,126,-139,126,126,126,126,126,126,126,126,126,126,126,126,126,-146,-140,126,126,126,126,126,126,-122,-51,-144,-145,126,-146,-140,126,126,126,126,126,126,300,62,126,126,-110,-109,126,]),'COMMA':([18,35,39,41,46,47,61,70,72,84,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,121,122,123,124,125,137,138,139,140,141,142,143,144,145,149,151,153,154,159,160,161,163,165,166,167,169,173,174,184,185,192,195,196,197,202,203,204,208,209,243,247,248,250,258,267,268,271,272,274,275,279,290,295,297,298,303,316,317,328,331,353,],[-143,-142,-126,-141,-54,-149,-149,-115,-143,-97,-92,145,-125,-139,150,-53,152,-148,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,152,-146,-115,163,-114,-117,-140,191,-96,-31,-32,-33,-34,-35,-122,-124,-51,-144,-145,-118,-115,-115,163,-113,-146,-43,211,-73,226,-68,238,-20,-123,-55,-52,-147,-115,163,163,-112,-116,-95,-121,280,163,-42,-69,-115,-21,-24,-27,-26,-119,-110,-115,-72,163,-120,-115,163,-109,163,-25,]),'ASSIGN':([18,37,63,95,114,154,155,193,201,279,],[-107,85,116,147,-108,-118,198,244,249,-119,]),'PLUS_ASSIGN':([18,37,114,],[-107,86,-108,]),'MINUS_ASSIGN':([18,37,114,],[-107,87,-108,]),'MULTIPLY_ASSIGN':([18,37,114,],[-107,88,-108,]),'DIVIDE_ASSIGN':([18,37,114,],[-107,89,-108,]),'RPAREN':([35,41,47,61,70,71,72,90,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,122,123,124,125,134,144,149,151,153,154,159,160,161,163,165,197,202,203,204,208,209,231,250,268,279,290,295,298,316,317,328,331,346,],[-142,-141,-149,-149,-115,125,-143,-92,-139,151,-148,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,153,-115,162,-114,-117,-140,182,-122,-51,-144,-145,-118,-115,-115,205,-113,-146,-147,-115,251,252,-112,-116,269,282,-115,-119,-110,-115,319,-115,332,-109,343,353,]),'RBRACKET':([35,39,41,72,90,91,92,93,101,102,103,104,105,106,107,108,109,110,111,112,125,144,145,149,151,153,165,192,290,328,],[-142,-126,-141,-143,-92,144,-125,-139,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-140,-122,-124,-51,-144,-145,-146,-123,-110,-109,]),'ARROW':([63,95,117,124,162,186,188,189,205,241,251,252,262,265,282,292,319,332,343,],[115,146,157,164,206,240,-29,-30,253,-28,283,285,293,296,305,314,334,344,350,]),'IMPLEMENTS':([74,],[127,]),'INFO':([77,300,],[131,320,]),'COLON':([96,],[148,]),'ELSE':([132,234,235,],[180,-98,180,]),'UNDERSCORE':([136,238,],[189,189,]),'FROM':([190,],[242,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,133,207,254,284,286,289,306,311,323,325,337,356,357,],[2,181,256,288,308,310,313,322,327,339,340,347,358,359,]),'statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[3,43,3,43,3,3,43,3,3,43,3,3,43,43,3,43,43,3,3,43,3,43,43,43,3,3,43,43,]),'variable_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'constant_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'enum_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'interface_declaration':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'print_statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,133,180,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[11,11,11,232,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assignment':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expression_statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'match_statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'import_statement':([0,2,133,181,207,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expression':([0,2,25,30,31,33,38,39,40,47,49,50,51,52,53,54,55,56,57,58,59,60,61,79,85,86,87,88,89,116,133,145,147,148,152,178,181,198,207,240,244,249,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,336,337,339,340,347,356,357,358,359,],[19,19,71,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,100,134,139,140,141,142,143,156,19,192,194,195,197,231,19,246,19,274,277,281,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,346,19,19,19,19,19,19,19,19,]),'decorators':([0,2,133,168,181,207,210,212,223,254,256,257,266,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[22,22,22,220,22,22,220,220,220,22,22,220,220,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'assignment_expression':([0,2,133,181,207,240,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[32,32,32,32,32,275,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'decorator':([0,2,22,133,168,181,207,210,212,220,223,254,256,257,266,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[36,36,67,36,36,36,36,36,36,67,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'lvalue':([0,2,133,181,207,240,254,256,284,286,288,289,306,308,310,311,313,322,323,325,327,337,339,340,347,356,357,358,359,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'mut_opt':([17,168,210,212,223,257,266,],[44,222,222,222,222,222,222,]),'elements':([39,],[91,]),'struct_initializers':([46,],[97,]),'struct_initializer':([46,150,],[98,196,]),'arguments':([47,61,],[99,113,]),'parameters':([70,121,159,160,202,268,295,316,],[122,161,203,204,250,298,317,331,]),'parameter':([70,121,159,160,163,202,268,295,316,],[123,123,123,123,208,123,123,123,123,]),'implements_clause':([74,],[128,]),'block':([78,180,182,],[132,233,235,]),'import_items':([84,],[137,]),'type':([115,146,157,164,199,206,253,280,283,285,293,296,305,314,334,344,350,],[155,193,201,209,247,255,287,303,307,309,315,318,321,329,345,351,355,]),'interface_list':([127,],[167,]),'enum_variants_opt':([129,],[170,]),'enum_variants':([129,],[171,]),'empty':([129,173,184,],[172,227,239,]),'enum_variant_list':([129,],[173,]),'enum_variant':([129,226,],[174,267,]),'interface_members':([130,],[175,]),'interface_member':([130,175,],[176,229,]),'else_clause':([132,235,],[179,270,]),'match_arms':([136,],[183,]),'match_arm_list':([136,],[184,]),'match_arm':([136,238,],[185,271,]),'pattern':([136,238,],[186,186,]),'struct_members':([168,210,223,],[212,257,266,]),'struct_member':([168,210,212,223,257,266,],[213,213,260,213,260,260,]),'mut_field_declaration':([168,210,212,223,257,266,],[214,214,214,214,214,214,]),'field_declaration':([168,210,212,223,257,266,],[215,215,215,215,215,215,]),'method_declaration':([168,210,212,223,257,266,],[216,216,216,216,216,216,]),'struct_member_field':([168,210,212,223,257,266,],[217,217,217,217,217,217,]),'maybe_trailing_comma':([173,],[225,]),'maybe_comma':([184,],[237,]),'type_list':([199,],[248,]),'inline_statement':([240,],[272,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',28),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',33),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',38),
  ('statement -> variable_declaration','statement',1,'p_statement_declaration','parser.py',43),
  ('statement -> constant_declaration','statement',1,'p_statement_declaration','parser.py',44),
  ('statement -> function_declaration','statement',1,'p_statement_declaration','parser.py',45),
  ('statement -> struct_declaration','statement',1,'p_statement_declaration','parser.py',46),
  ('statement -> enum_declaration','statement',1,'p_statement_declaration','parser.py',47),
  ('statement -> interface_declaration','statement',1,'p_statement_declaration','parser.py',48),
  ('statement -> print_statement','statement',1,'p_statement_declaration','parser.py',49),
  ('statement -> if_statement','statement',1,'p_statement_declaration','parser.py',50),
  ('statement -> return_statement','statement',1,'p_statement_declaration','parser.py',51),
  ('statement -> assignment','statement',1,'p_statement_declaration','parser.py',52),
  ('statement -> expression_statement','statement',1,'p_statement_declaration','parser.py',53),
  ('statement -> match_statement','statement',1,'p_statement_declaration','parser.py',54),
  ('statement -> import_statement','statement',1,'p_statement_declaration','parser.py',55),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',60),
  ('match_arms -> <empty>','match_arms',0,'p_match_arms','parser.py',66),
  ('match_arms -> match_arm_list maybe_comma','match_arms',2,'p_match_arms','parser.py',67),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list_single','parser.py',81),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list_multiple','parser.py',86),
  ('maybe_comma -> COMMA','maybe_comma',1,'p_maybe_comma','parser.py',91),
  ('maybe_comma -> empty','maybe_comma',1,'p_maybe_comma','parser.py',92),
  ('match_arm -> pattern ARROW inline_statement','match_arm',3,'p_match_arm','parser.py',99),
  ('inline_statement -> PRINT DOT INFO LPAREN expression RPAREN','inline_statement',6,'p_inline_statement_print','parser.py',104),
  ('inline_statement -> assignment_expression','inline_statement',1,'p_inline_statement_assignment','parser.py',109),
  ('inline_statement -> expression','inline_statement',1,'p_inline_statement_expression','parser.py',116),
  ('pattern -> MINUS NUMBER','pattern',2,'p_pattern_negative_number','parser.py',121),
  ('pattern -> NUMBER','pattern',1,'p_pattern_number','parser.py',126),
  ('pattern -> UNDERSCORE','pattern',1,'p_pattern_wildcard','parser.py',131),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',136),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',137),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',138),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',139),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',140),
  ('type_alias_declaration -> TYPE IDENTIFIER ASSIGN type SEMICOLON','type_alias_declaration',5,'p_type_alias_declaration','parser.py',164),
  ('interface_declaration -> INTERFACE IDENTIFIER LBRACE interface_members RBRACE','interface_declaration',5,'p_interface_declaration','parser.py',171),
  ('interface_members -> interface_members interface_member','interface_members',2,'p_interface_members_multiple','parser.py',176),
  ('interface_members -> interface_member','interface_members',1,'p_interface_members_single','parser.py',181),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_member',8,'p_interface_member','parser.py',186),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_member',6,'p_interface_member','parser.py',187),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list_multiple','parser.py',197),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list_single','parser.py',202),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members_multiple','parser.py',209),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members_single','parser.py',214),
  ('struct_member_field -> mut_opt IDENTIFIER ARROW type SEMICOLON','struct_member_field',5,'p_struct_member_field','parser.py',219),
  ('struct_member -> mut_field_declaration','struct_member',1,'p_struct_member','parser.py',224),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',225),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',226),
  ('struct_member -> struct_member_field','struct_member',1,'p_struct_member','parser.py',227),
  ('expression -> IDENTIFIER LBRACE struct_initializers RBRACE','expression',4,'p_expression_struct_instantiation','parser.py',232),
  ('struct_initializers -> struct_initializers COMMA struct_initializer','struct_initializers',3,'p_struct_initializers_multiple','parser.py',237),
  ('struct_initializers -> struct_initializer','struct_initializers',1,'p_struct_initializers_single','parser.py',244),
  ('struct_initializers -> <empty>','struct_initializers',0,'p_struct_initializers_empty','parser.py',251),
  ('struct_initializer -> IDENTIFIER COLON expression','struct_initializer',3,'p_struct_initializer','parser.py',256),
  ('struct_declaration -> STRUCT IDENTIFIER IMPLEMENTS interface_list LBRACE struct_members RBRACE','struct_declaration',7,'p_struct_declaration_with_implements','parser.py',261),
  ('struct_declaration -> STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',266),
  ('implements_clause -> IMPLEMENTS interface_list','implements_clause',2,'p_implements_clause_multiple','parser.py',271),
  ('implements_clause -> <empty>','implements_clause',0,'p_implements_clause_empty','parser.py',276),
  ('method_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',11,'p_method_declaration_with_decorators','parser.py',283),
  ('method_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',10,'p_method_declaration_without_decorators','parser.py',294),
  ('mut_field_declaration -> MUT LET IDENTIFIER ARROW type SEMICOLON','mut_field_declaration',6,'p_mut_field_declaration','parser.py',306),
  ('field_declaration -> LET IDENTIFIER ARROW type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',311),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',318),
  ('enum_variants_opt -> enum_variants','enum_variants_opt',1,'p_enum_variants_opt','parser.py',325),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',326),
  ('enum_variants -> enum_variant_list maybe_trailing_comma','enum_variants',2,'p_enum_variants','parser.py',334),
  ('enum_variant_list -> enum_variant','enum_variant_list',1,'p_enum_variant_list_single','parser.py',343),
  ('enum_variant_list -> enum_variant_list COMMA enum_variant','enum_variant_list',3,'p_enum_variant_list_multiple','parser.py',348),
  ('maybe_trailing_comma -> COMMA','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',355),
  ('maybe_trailing_comma -> empty','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',356),
  ('enum_variant -> IDENTIFIER LBRACE struct_members RBRACE','enum_variant',4,'p_enum_variant_with_fields','parser.py',362),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant_without_fields','parser.py',367),
  ('decorators -> decorators decorator','decorators',2,'p_decorators_multiple','parser.py',375),
  ('decorators -> decorator','decorators',1,'p_decorators_single','parser.py',380),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',385),
  ('constant_declaration -> CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLON','constant_declaration',8,'p_constant_declaration','parser.py',392),
  ('variable_declaration -> LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',8,'p_variable_declaration_let_with_type','parser.py',399),
  ('variable_declaration -> LET mut_opt IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let_without_type','parser.py',410),
  ('variable_declaration -> MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration_mut_with_type','parser.py',421),
  ('variable_declaration -> MUT IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration_mut_without_type','parser.py',432),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt_mut','parser.py',443),
  ('mut_opt -> <empty>','mut_opt',0,'p_mut_opt_empty','parser.py',448),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',12,'p_function_declaration_async_with_decorators','parser.py',456),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_async_with_decorators_no_return','parser.py',468),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_async_without_decorators','parser.py',480),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_async_without_decorators_no_return','parser.py',492),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_with_decorators','parser.py',506),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_with_decorators_no_return','parser.py',518),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_without_decorators','parser.py',530),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',8,'p_function_declaration_without_decorators_no_return','parser.py',542),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',554),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',562),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',569),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items_multiple','parser.py',574),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items_single','parser.py',579),
  ('import_items -> <empty>','import_items',0,'p_import_items_empty','parser.py',584),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',591),
  ('if_statement -> IF expression block else_clause','if_statement',4,'p_if_statement_no_parens','parser.py',596),
  ('if_statement -> IF LPAREN expression RPAREN block else_clause','if_statement',6,'p_if_statement_with_parens','parser.py',603),
  ('else_clause -> ELSE if_statement','else_clause',2,'p_else_clause_if','parser.py',610),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause_block','parser.py',618),
  ('else_clause -> <empty>','else_clause',0,'p_else_clause_empty','parser.py',625),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',634),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',635),
  ('assignment -> assignment_expression SEMICOLON','assignment',2,'p_assignment','parser.py',645),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue_identifier','parser.py',650),
  ('lvalue -> expression DOT IDENTIFIER','lvalue',3,'p_lvalue_member_access','parser.py',655),
  ('expression -> FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','expression',9,'p_expression_lambda','parser.py',662),
  ('expression -> FN LPAREN parameters RPAREN LBRACE statements RBRACE','expression',7,'p_expression_lambda_no_return','parser.py',668),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',674),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',681),
  ('parameters -> parameters COMMA','parameters',2,'p_parameters_multiple','parser.py',682),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',690),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','parser.py',695),
  ('parameter -> IDENTIFIER ARROW type','parameter',3,'p_parameter_with_type','parser.py',700),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter_without_type','parser.py',707),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',714),
  ('type -> type LT type_list GT','type',4,'p_type','parser.py',715),
  ('type_list -> type_list COMMA type','type_list',3,'p_type_list_multiple','parser.py',723),
  ('type_list -> type','type_list',1,'p_type_list_single','parser.py',728),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',735),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',740),
  ('elements -> elements COMMA','elements',2,'p_elements_multiple','parser.py',741),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',749),
  ('elements -> <empty>','elements',0,'p_elements_empty','parser.py',754),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',759),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',760),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',761),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',762),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',763),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',764),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',765),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',766),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',767),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',768),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',769),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',770),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',775),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',780),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',785),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',790),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',795),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',800),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',801),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_member_access','parser.py',812),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments_multiple','parser.py',817),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',822),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parser.py',827),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',832),
]
