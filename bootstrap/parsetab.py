
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTGTLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftDOTleftLPARENRPARENrightFAT_ARROWrightARROWrightUMINUSAND ARROW ASSIGN ASYNC AT AWAIT COLON COMMA CONST DIVIDE DIVIDE_ASSIGN DOT ELSE ENUM EQ FAT_ARROW FN FROM GEQ GT IDENTIFIER IF IMPLEMENTS IMPORT INFO INTERFACE LBRACE LBRACKET LEQ LET LPAREN LT MATCH MINUS MINUS_ASSIGN MULTIPLY MULTIPLY_ASSIGN MUT NEQ NUMBER OR PLUS PLUS_ASSIGN PRINT RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT UNDERSCOREprogram : statementsstatements : statements statementstatements : statementstatement : variable_declaration\n| constant_declaration\n| function_declaration\n| struct_declaration\n| enum_declaration\n| interface_declaration\n| print_statement\n| if_statement\n| return_statement\n| assignment\n| expression_statement\n| match_statement \n| import_statementmatch_pattern : NUMBER\n| MINUS NUMBERmatch_pattern : UNDERSCOREmatch_statement : MATCH expression LBRACE match_arms RBRACEmatch_arms : match_arm_list\n| match_arm_list COMMAmatch_arm_list : match_armmatch_arm_list : match_arm_list COMMA match_armmatch_arm : match_pattern FAT_ARROW inline_statementinline_statement : PRINT DOT INFO LPAREN expression RPARENinline_statement : assignment_expressioninline_statement : expressionassignment_expression : lvalue ASSIGN expression\n| lvalue PLUS_ASSIGN expression\n| lvalue MINUS_ASSIGN expression\n| lvalue MULTIPLY_ASSIGN expression\n| lvalue DIVIDE_ASSIGN expressioninterface_declaration : INTERFACE IDENTIFIER LBRACE interface_members RBRACEinterface_members : interface_members interface_memberinterface_members : interface_memberinterface_member : FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON\n| FN IDENTIFIER LPAREN parameters RPAREN SEMICOLONinterface_list : interface_list COMMA IDENTIFIERinterface_list : IDENTIFIERstruct_members : struct_members struct_memberstruct_members : struct_memberstruct_member_field : mut_opt IDENTIFIER ARROW type SEMICOLONstruct_member : mut_field_declaration\n| field_declaration\n| method_declaration\n| struct_member_fieldexpression : IDENTIFIER LBRACE struct_initializers RBRACEstruct_initializers : struct_initializers COMMA struct_initializerstruct_initializers : struct_initializerstruct_initializers : struct_initializer : IDENTIFIER COLON expressionstruct_declaration : STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACEimplements_clause : IMPLEMENTS interface_listimplements_clause : method_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmethod_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEmut_field_declaration : MUT LET IDENTIFIER ARROW type SEMICOLONfield_declaration : LET IDENTIFIER ARROW type SEMICOLONenum_declaration : ENUM IDENTIFIER LBRACE enum_variants_opt RBRACEenum_variants_opt : enum_variants\n| emptyenum_variants : enum_variant_list maybe_trailing_commaenum_variant_list : enum_variantenum_variant_list : enum_variant_list COMMA enum_variantmaybe_trailing_comma : COMMA\n| empty\nenum_variant : IDENTIFIER LBRACE struct_members RBRACEenum_variant : IDENTIFIERdecorators : decorators decoratordecorators : decoratordecorator : AT IDENTIFIERconstant_declaration : CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : LET mut_opt IDENTIFIER ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLONvariable_declaration : MUT IDENTIFIER ASSIGN expression SEMICOLONmut_opt : MUTmut_opt : function_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEfunction_declaration : FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACEexpression : AWAIT expressionprint_statement : PRINT DOT INFO LPAREN expression RPAREN SEMICOLONimport_statement : IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLONimport_items : import_items COMMA IDENTIFIERimport_items : IDENTIFIERimport_items : block : LBRACE statements RBRACEif_statement : IF expression block else_clauseif_statement : IF LPAREN expression RPAREN block else_clauseelse_clause : ELSE if_statementelse_clause : ELSE blockelse_clause :return_statement : RETURN expression SEMICOLON\n| RETURN SEMICOLONassignment : assignment_expression SEMICOLONlvalue : IDENTIFIERlvalue : expression DOT IDENTIFIERexpression : FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACEexpression : FN LPAREN parameters RPAREN LBRACE statements RBRACEexpression_statement : expression SEMICOLONparameters : parameters COMMA parameter\n| parameters COMMAparameters : parameterparameters : parameter : IDENTIFIER ARROW typeparameter : IDENTIFIERtype : IDENTIFIER\n| type LT type_list GTtype_list : type_list COMMA typetype_list : typeexpression : LBRACKET elements RBRACKETelements : elements COMMA expression\n| elements COMMAelements : expressionelements : expression : expression PLUS expression\n| expression MINUS expression\n| expression MULTIPLY expression\n| expression DIVIDE expression\n| expression LT expression\n| expression GT expression\n| expression LEQ expression\n| expression GEQ expression\n| expression EQ expression\n| expression NEQ expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIERexpression : IDENTIFIER LPAREN arguments RPAREN\n| expression LPAREN arguments RPARENexpression : expression DOT IDENTIFIERarguments : arguments COMMA expressionarguments : expressionarguments : empty :'
    
_lr_action_items = {'LET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,21,43,48,81,82,132,133,135,166,179,181,200,207,210,211,212,213,214,215,216,222,223,227,231,232,233,234,235,242,251,253,254,255,262,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,325,328,332,333,334,335,336,337,342,343,344,349,351,352,353,354,355,356,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,64,-2,-107,-101,-102,-99,17,-100,217,-95,17,-77,17,217,-42,-44,-45,-46,-47,256,217,-60,-34,-97,-98,-94,-99,-20,-75,17,17,-53,-41,217,-96,-76,17,17,17,17,-89,-90,-74,-73,17,17,17,17,-87,17,17,17,-85,17,-83,17,-59,-43,17,-81,17,17,-86,-58,17,-84,-82,-80,17,17,17,17,-57,-56,]),'MUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,43,48,81,82,132,133,135,166,179,181,200,207,210,211,212,213,214,215,222,223,227,231,232,233,234,235,242,251,253,254,255,262,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,325,328,332,333,334,335,336,337,342,343,344,349,351,352,353,354,355,356,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,45,-2,-107,-101,-102,-99,20,-100,216,-95,20,-77,20,216,-42,-44,-45,-46,-47,216,-60,-34,-97,-98,-94,-99,-20,-75,20,20,-53,-41,216,-96,-76,20,20,20,20,-89,-90,-74,-73,20,20,20,20,-87,20,20,20,-85,20,-83,20,-59,-43,20,-81,20,20,-86,-58,20,-84,-82,-80,20,20,20,20,-57,-56,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,21,-100,-95,21,-77,21,-60,-34,-97,-98,-94,-99,-20,-75,21,21,-53,-96,-76,21,21,21,21,-89,-90,-74,-73,21,21,21,21,-87,21,21,21,-85,21,-83,21,21,-81,21,21,-86,21,-84,-82,-80,21,21,21,21,]),'ASYNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,43,48,67,81,82,94,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,65,-71,-2,-107,-70,-101,-102,-72,-99,23,-100,-95,23,-77,23,-60,-34,-97,-98,-94,-99,-20,-75,23,23,-53,-96,-76,23,23,23,23,-89,-90,-74,-73,23,23,23,23,-87,23,23,23,-85,23,-83,23,23,-81,23,23,-86,23,-84,-82,-80,23,23,23,23,]),'FN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,23,25,30,31,33,36,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,65,67,79,81,82,85,86,87,88,89,94,116,130,132,133,135,145,147,148,152,166,175,176,178,179,181,198,200,207,210,211,212,213,214,215,218,222,223,227,228,231,232,233,234,235,237,241,242,246,251,253,254,255,262,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,325,328,330,331,332,333,334,335,336,337,342,343,344,347,349,351,352,353,354,355,356,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,66,68,73,73,73,73,-71,73,73,73,-2,73,-107,73,73,73,73,73,73,73,73,73,73,73,73,73,118,-70,73,-101,-102,73,73,73,73,73,-72,73,177,-99,24,-100,73,73,73,73,219,177,-36,73,-95,24,73,-77,24,219,-42,-44,-45,-46,-47,258,219,-60,-34,-35,-97,-98,-94,-99,-20,73,73,-75,73,24,24,-53,-41,219,-96,-76,24,24,24,24,-89,-90,-74,-73,24,24,24,24,-87,24,24,24,-85,24,-83,24,-59,-43,-38,73,24,-81,24,24,-86,-58,24,-84,-82,-37,-80,24,24,24,24,-57,-56,]),'STRUCT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,26,-100,-95,26,-77,26,-60,-34,-97,-98,-94,-99,-20,-75,26,26,-53,-96,-76,26,26,26,26,-89,-90,-74,-73,26,26,26,26,-87,26,26,26,-85,26,-83,26,26,-81,26,26,-86,26,-84,-82,-80,26,26,26,26,]),'ENUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,27,-100,-95,27,-77,27,-60,-34,-97,-98,-94,-99,-20,-75,27,27,-53,-96,-76,27,27,27,27,-89,-90,-74,-73,27,27,27,27,-87,27,27,27,-85,27,-83,27,27,-81,27,27,-86,27,-84,-82,-80,27,27,27,27,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,28,-100,-95,28,-77,28,-60,-34,-97,-98,-94,-99,-20,-75,28,28,-53,-96,-76,28,28,28,28,-89,-90,-74,-73,28,28,28,28,-87,28,28,28,-85,28,-83,28,28,-81,28,28,-86,28,-84,-82,-80,28,28,28,28,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,237,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,29,-100,-95,29,-77,29,-60,-34,-97,-98,-94,-99,-20,269,-75,29,29,-53,-96,-76,29,29,29,29,-89,-90,-74,-73,29,29,29,29,-87,29,29,29,-85,29,-83,29,29,-81,29,29,-86,29,-84,-82,-80,29,29,29,29,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,180,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,30,-100,-95,30,30,-77,30,-60,-34,-97,-98,-94,-99,-20,-75,30,30,-53,-96,-76,30,30,30,30,-89,-90,-74,-73,30,30,30,30,-87,30,30,30,-85,30,-83,30,30,-81,30,30,-86,30,-84,-82,-80,30,30,30,30,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,31,-100,-95,31,-77,31,-60,-34,-97,-98,-94,-99,-20,-75,31,31,-53,-96,-76,31,31,31,31,-89,-90,-74,-73,31,31,31,31,-87,31,31,31,-85,31,-83,31,31,-81,31,31,-86,31,-84,-82,-80,31,31,31,31,]),'MATCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,33,-100,-95,33,-77,33,-60,-34,-97,-98,-94,-99,-20,-75,33,33,-53,-96,-76,33,33,33,33,-89,-90,-74,-73,33,33,33,33,-87,33,33,33,-85,33,-83,33,33,-81,33,33,-86,33,-84,-82,-80,33,33,33,33,]),'IMPORT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,133,135,179,181,200,207,223,227,231,232,233,234,235,242,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,332,333,334,335,336,342,343,344,349,351,352,353,354,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,34,-100,-95,34,-77,34,-60,-34,-97,-98,-94,-99,-20,-75,34,34,-53,-96,-76,34,34,34,34,-89,-90,-74,-73,34,34,34,34,-87,34,34,34,-85,34,-83,34,34,-81,34,34,-86,34,-84,-82,-80,34,34,34,34,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,24,25,26,27,28,30,31,33,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,68,70,79,81,82,84,85,86,87,88,89,115,116,118,121,126,128,129,132,133,135,145,146,147,148,150,152,157,159,160,163,164,166,177,178,179,181,191,198,199,200,202,206,207,210,211,212,213,214,215,216,217,219,220,221,222,223,225,227,231,232,233,234,235,237,241,242,246,250,251,253,254,255,256,258,262,264,266,274,276,279,280,281,282,284,285,288,290,291,294,296,297,299,300,301,303,305,306,307,308,309,311,317,318,319,320,321,322,325,328,329,331,332,333,334,335,336,337,339,342,343,344,345,349,351,352,353,354,355,356,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-79,63,69,72,74,75,76,72,72,72,72,72,72,94,-2,95,-78,96,72,-107,72,72,72,72,72,72,72,72,72,72,72,72,72,114,117,119,120,124,72,-101,-102,138,72,72,72,72,72,154,72,158,124,165,168,169,-99,18,-100,72,154,72,72,96,72,154,124,124,124,154,-79,229,72,-95,18,240,72,154,-77,124,154,18,-79,-42,-44,-45,-46,-47,-78,257,259,260,261,-79,-60,169,-34,-97,-98,-94,-99,-20,18,72,-75,72,154,18,18,-53,-41,287,289,-79,124,-96,-76,154,154,18,154,18,18,18,154,124,154,-89,-90,-74,-73,154,18,18,18,18,-87,18,154,124,18,18,-85,18,-83,18,-59,-43,154,72,18,-81,18,18,-86,-58,154,18,-84,-82,154,-80,18,18,18,18,-57,-56,]),'AWAIT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,223,227,231,232,233,234,235,237,241,242,246,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,331,332,333,334,335,336,342,343,344,349,351,352,353,354,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,38,38,38,38,38,38,38,-2,38,-107,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-101,-102,38,38,38,38,38,38,-99,38,-100,38,38,38,38,38,-95,38,38,-77,38,-60,-34,-97,-98,-94,-99,-20,38,38,-75,38,38,38,-53,-96,-76,38,38,38,38,-89,-90,-74,-73,38,38,38,38,-87,38,38,38,-85,38,-83,38,38,38,-81,38,38,-86,38,-84,-82,-80,38,38,38,38,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,223,227,231,232,233,234,235,237,241,242,246,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,331,332,333,334,335,336,342,343,344,349,351,352,353,354,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,39,39,39,39,39,39,39,-2,39,-107,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-101,-102,39,39,39,39,39,39,-99,39,-100,39,39,39,39,39,-95,39,39,-77,39,-60,-34,-97,-98,-94,-99,-20,39,39,-75,39,39,39,-53,-96,-76,39,39,39,39,-89,-90,-74,-73,39,39,39,39,-87,39,39,39,-85,39,-83,39,39,39,-81,39,39,-86,39,-84,-82,-80,39,39,39,39,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,25,30,31,33,35,38,39,40,41,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,71,72,78,79,80,81,82,83,85,86,87,88,89,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,125,132,133,134,135,136,139,140,141,142,143,144,145,147,148,149,151,152,153,156,165,178,179,181,182,192,194,195,197,198,200,207,223,227,230,231,232,233,234,235,236,237,241,242,243,246,251,253,254,266,270,273,274,277,280,282,284,285,286,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,323,331,332,333,334,335,336,341,342,343,344,349,351,352,353,354,],[40,40,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-139,50,40,40,40,40,-138,40,40,40,-137,-2,40,-107,40,40,40,40,40,40,40,40,40,40,40,40,40,50,-139,50,40,50,-101,-102,50,40,40,40,40,40,50,50,-135,50,-123,-124,-125,-126,50,50,50,50,50,50,50,50,-142,40,-136,-99,40,50,-100,188,50,50,50,50,50,-118,40,40,40,-48,-140,40,-141,50,-142,40,-95,40,-136,50,50,50,50,40,-77,40,-60,-34,50,-97,-98,-94,-99,-20,188,40,40,-75,50,40,40,40,-53,-96,50,50,-76,50,40,40,40,40,-106,-89,-90,-74,-73,40,40,40,40,-87,40,40,40,-85,40,-83,40,-105,40,40,-81,40,40,-86,50,40,-84,-82,-80,40,40,40,40,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,24,25,30,31,33,35,38,39,40,41,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,71,72,73,78,79,80,81,82,83,85,86,87,88,89,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,116,119,120,125,131,132,133,134,135,139,140,141,142,143,144,145,147,148,149,151,152,153,156,158,165,178,179,181,182,192,194,195,197,198,200,207,223,227,229,230,231,232,233,234,235,237,241,242,243,246,251,253,254,259,266,270,273,274,277,280,282,284,285,286,289,294,296,297,299,301,303,305,306,307,308,315,317,318,319,320,321,322,323,331,332,333,334,335,336,341,342,343,344,349,351,352,353,354,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,47,61,70,25,79,25,25,-138,25,25,25,-137,-2,25,-107,25,25,25,25,25,25,25,25,25,25,25,25,25,121,61,47,70,61,25,61,-101,-102,61,25,25,25,25,25,61,61,-135,61,61,61,61,61,61,61,61,61,61,61,61,61,-142,25,159,160,-136,178,-99,25,61,-100,61,61,61,61,61,-118,25,25,25,-48,-140,25,-141,61,202,-142,25,-95,25,-136,61,61,61,61,25,-77,25,-60,-34,264,61,-97,-98,-94,-99,-20,25,25,-75,61,25,25,25,-53,290,-96,61,61,-76,61,25,25,25,25,-106,311,-89,-90,-74,-73,25,25,25,25,-87,25,331,25,25,-85,25,-83,25,-105,25,25,-81,25,25,-86,61,25,-84,-82,-80,25,25,25,25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,136,145,147,148,152,178,179,181,188,198,200,207,223,227,231,232,233,234,235,236,237,241,242,246,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,331,332,333,334,335,336,342,343,344,349,351,352,353,354,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,41,41,41,41,41,41,41,-2,41,-107,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-101,-102,41,41,41,41,41,41,-99,41,-100,187,41,41,41,41,41,-95,41,238,41,-77,41,-60,-34,-97,-98,-94,-99,-20,187,41,41,-75,41,41,41,-53,-96,-76,41,41,41,41,-89,-90,-74,-73,41,41,41,41,-87,41,41,41,-85,41,-83,41,41,41,-81,41,41,-86,41,-84,-82,-80,41,41,41,41,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,25,30,31,33,38,39,40,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,79,81,82,85,86,87,88,89,116,132,133,135,145,147,148,152,178,179,181,198,200,207,223,227,231,232,233,234,235,237,239,241,242,246,251,253,254,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,331,332,333,334,335,336,342,343,344,349,351,352,353,354,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,35,35,35,35,35,35,35,-2,35,-107,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-101,-102,35,35,35,35,35,35,-99,35,-100,35,35,35,35,35,-95,35,35,-77,35,-60,-34,-97,-98,-94,-99,-20,35,272,35,-75,35,35,35,-53,-96,-76,35,35,35,35,-89,-90,-74,-73,35,35,35,35,-87,35,35,35,-85,35,-83,35,35,35,-81,35,35,-86,35,-84,-82,-80,35,35,35,35,]),'AT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,22,36,43,48,67,81,82,94,132,133,135,166,179,181,200,207,210,211,212,213,214,215,218,222,223,227,231,232,233,234,235,242,251,253,254,255,262,266,274,280,282,284,285,294,296,297,299,301,303,305,306,307,308,317,318,319,320,321,322,325,328,332,333,334,335,336,337,342,343,344,349,351,352,353,354,355,356,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,42,-71,-2,-107,-70,-101,-102,-72,-99,42,-100,42,-95,42,-77,42,42,-42,-44,-45,-46,-47,42,42,-60,-34,-97,-98,-94,-99,-20,-75,42,42,-53,-41,42,-96,-76,42,42,42,42,-89,-90,-74,-73,42,42,42,42,-87,42,42,42,-85,42,-83,42,-59,-43,42,-81,42,42,-86,-58,42,-84,-82,-80,42,42,42,42,-57,-56,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,43,48,81,82,132,135,179,200,223,227,231,232,233,234,235,242,254,266,274,294,296,297,299,307,319,321,333,336,343,344,349,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-2,-107,-101,-102,-99,-100,-95,-77,-60,-34,-97,-98,-94,-99,-20,-75,-53,-96,-76,-89,-90,-74,-73,-87,-85,-83,-81,-86,-84,-82,-80,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,35,41,43,46,48,72,81,82,84,90,93,97,98,101,102,103,104,105,106,107,108,109,110,111,112,114,125,129,132,135,137,138,139,140,141,142,143,144,149,151,153,165,169,170,171,172,173,174,175,176,179,181,183,184,185,195,196,200,210,211,212,213,214,215,223,224,225,226,227,228,231,232,233,234,235,236,240,242,253,254,255,262,263,266,267,268,270,271,274,284,286,292,294,296,297,299,303,305,307,308,317,319,321,322,323,325,328,330,333,334,335,336,337,342,343,344,347,348,349,353,354,355,356,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-139,-138,-137,-2,-51,-107,-139,-101,-102,-93,-88,-135,149,-50,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-142,-136,-146,-99,-100,190,-92,-29,-30,-31,-32,-33,-118,-48,-140,-141,-142,-69,223,-61,-62,-146,-64,227,-36,-95,233,235,-21,-23,-52,-49,-77,254,-42,-44,-45,-46,-47,-60,-63,-66,-67,-34,-35,-97,-98,-94,-99,-20,-22,-91,-75,286,-53,-41,292,-65,-96,-24,-25,-28,-27,-76,307,-106,-68,-89,-90,-74,-73,319,321,-87,323,333,-85,-83,336,-105,-59,-43,-38,-81,343,344,-86,-58,349,-84,-82,-37,-26,-80,355,356,-57,-56,]),'LBRACE':([18,34,35,41,72,74,75,76,78,83,90,93,101,102,103,104,105,106,107,108,109,110,111,112,125,127,144,149,151,153,154,162,165,167,168,169,180,182,205,248,249,252,261,275,278,283,286,302,304,316,323,346,350,],[46,84,-138,-137,46,-55,129,130,133,136,-88,-135,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,166,-118,-48,-140,-141,-114,207,-142,-54,-40,222,133,-136,251,280,282,285,-39,-115,301,306,-106,318,320,332,-105,351,352,]),'SEMICOLON':([18,19,31,32,35,41,72,80,90,93,101,102,103,104,105,106,107,108,109,110,111,112,114,125,139,140,141,142,143,144,149,151,153,154,156,165,194,243,265,272,273,275,277,286,310,313,314,323,324,340,],[-139,48,81,82,-138,-137,-139,135,-88,-135,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-142,-136,-29,-30,-31,-32,-33,-118,-48,-140,-141,-114,200,-142,242,274,294,296,297,-115,299,-106,325,328,330,-105,337,347,]),'PLUS':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,49,-138,-137,49,-139,49,49,49,49,49,-135,49,-123,-124,-125,-126,49,49,49,49,49,49,49,49,-142,-136,49,49,49,49,49,49,-118,-48,-140,-141,49,-142,-136,49,49,49,49,49,49,49,49,49,-106,-105,49,]),'MULTIPLY':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,51,-138,-137,51,-139,51,51,51,51,51,-135,51,51,51,-125,-126,51,51,51,51,51,51,51,51,-142,-136,51,51,51,51,51,51,-118,-48,-140,-141,51,-142,-136,51,51,51,51,51,51,51,51,51,-106,-105,51,]),'DIVIDE':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,52,-138,-137,52,-139,52,52,52,52,52,-135,52,52,52,-125,-126,52,52,52,52,52,52,52,52,-142,-136,52,52,52,52,52,52,-118,-48,-140,-141,52,-142,-136,52,52,52,52,52,52,52,52,52,-106,-105,52,]),'LT':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,154,155,156,165,182,192,193,194,195,197,201,209,230,243,244,252,270,273,275,277,283,286,298,302,304,310,313,316,323,324,340,341,346,350,],[-139,53,-138,-137,53,-139,53,53,53,53,53,-135,53,-123,-124,-125,-126,-127,-128,-129,-130,53,53,53,53,-142,-136,53,53,53,53,53,53,-118,-48,-140,-141,-114,199,53,-142,-136,53,199,53,53,53,199,199,53,53,199,199,53,53,-115,53,199,-106,199,199,199,199,199,199,-105,199,199,53,199,199,]),'GT':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,154,156,165,182,192,194,195,197,230,243,244,245,270,273,275,277,286,298,323,341,],[-139,54,-138,-137,54,-139,54,54,54,54,54,-135,54,-123,-124,-125,-126,-127,-128,-129,-130,54,54,54,54,-142,-136,54,54,54,54,54,54,-118,-48,-140,-141,-114,54,-142,-136,54,54,54,54,54,54,-117,275,54,54,-115,54,-106,-116,-105,54,]),'LEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,55,-138,-137,55,-139,55,55,55,55,55,-135,55,-123,-124,-125,-126,-127,-128,-129,-130,55,55,55,55,-142,-136,55,55,55,55,55,55,-118,-48,-140,-141,55,-142,-136,55,55,55,55,55,55,55,55,55,-106,-105,55,]),'GEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,56,-138,-137,56,-139,56,56,56,56,56,-135,56,-123,-124,-125,-126,-127,-128,-129,-130,56,56,56,56,-142,-136,56,56,56,56,56,56,-118,-48,-140,-141,56,-142,-136,56,56,56,56,56,56,56,56,56,-106,-105,56,]),'EQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,57,-138,-137,57,-139,57,57,57,57,57,-135,57,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,57,57,-142,-136,57,57,57,57,57,57,-118,-48,-140,-141,57,-142,-136,57,57,57,57,57,57,57,57,57,-106,-105,57,]),'NEQ':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,58,-138,-137,58,-139,58,58,58,58,58,-135,58,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,58,58,-142,-136,58,58,58,58,58,58,-118,-48,-140,-141,58,-142,-136,58,58,58,58,58,58,58,58,58,-106,-105,58,]),'AND':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,59,-138,-137,59,-139,59,59,59,59,59,-135,59,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,59,-142,-136,59,59,59,59,59,59,-118,-48,-140,-141,59,-142,-136,59,59,59,59,59,59,59,59,59,-106,-105,59,]),'OR':([18,19,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,270,273,277,286,323,341,],[-139,60,-138,-137,60,-139,60,60,60,60,60,-135,60,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-142,-136,60,60,60,60,60,60,-118,-48,-140,-141,60,-142,-136,60,60,60,60,60,60,60,60,60,-106,-105,60,]),'DOT':([18,19,29,35,41,71,72,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,114,125,134,139,140,141,142,143,144,149,151,153,156,165,182,192,194,195,197,230,243,269,270,273,277,286,323,341,],[-139,62,77,-138,-137,126,-139,126,126,126,126,126,-135,126,126,126,126,126,126,126,126,126,126,126,126,126,-142,-136,126,126,126,126,126,126,-118,-48,-140,-141,126,-142,-136,126,126,126,126,126,126,295,62,126,126,-106,-105,126,]),'COMMA':([18,35,39,41,46,47,61,70,72,84,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,121,122,123,124,125,137,138,139,140,141,142,143,144,145,149,151,153,154,159,160,161,163,165,167,168,169,173,174,184,185,192,195,196,197,202,203,204,208,209,240,244,245,247,261,263,264,267,268,270,271,275,286,290,292,293,298,311,312,323,326,348,],[-139,-138,-122,-137,-51,-145,-145,-111,-139,-93,-88,145,-121,-135,150,-50,152,-144,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,152,-142,-111,163,-110,-113,-136,191,-92,-29,-30,-31,-32,-33,-118,-120,-48,-140,-141,-114,-111,-111,163,-109,-142,221,-40,-69,225,-64,236,-23,-119,-52,-49,-143,-111,163,163,-108,-112,-91,-117,276,163,-39,-65,-111,-24,-25,-28,-27,-115,-106,-111,-68,163,-116,-111,163,-105,163,-26,]),'ASSIGN':([18,37,63,95,114,154,155,193,201,275,],[-103,85,116,147,-104,-114,198,241,246,-115,]),'PLUS_ASSIGN':([18,37,114,],[-103,86,-104,]),'MINUS_ASSIGN':([18,37,114,],[-103,87,-104,]),'MULTIPLY_ASSIGN':([18,37,114,],[-103,88,-104,]),'DIVIDE_ASSIGN':([18,37,114,],[-103,89,-104,]),'RPAREN':([35,41,47,61,70,71,72,90,93,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,122,123,124,125,134,144,149,151,153,154,159,160,161,163,165,197,202,203,204,208,209,230,247,264,275,286,290,293,311,312,323,326,341,],[-138,-137,-145,-145,-111,125,-139,-88,-135,151,-144,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,153,-111,162,-110,-113,-136,182,-118,-48,-140,-141,-114,-111,-111,205,-109,-142,-143,-111,248,249,-108,-112,265,278,-111,-115,-106,-111,314,-111,327,-105,338,348,]),'RBRACKET':([35,39,41,72,90,91,92,93,101,102,103,104,105,106,107,108,109,110,111,112,125,144,145,149,151,153,165,192,286,323,],[-138,-122,-137,-139,-88,144,-121,-135,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-136,-118,-120,-48,-140,-141,-142,-119,-106,-105,]),'ARROW':([63,95,117,124,162,205,248,249,257,260,278,287,314,327,338,],[115,146,157,164,206,250,279,281,288,291,300,309,329,339,345,]),'IMPLEMENTS':([74,],[128,]),'INFO':([77,295,],[131,315,]),'COLON':([96,],[148,]),'ELSE':([132,233,234,],[180,-94,180,]),'UNDERSCORE':([136,236,],[189,189,]),'FAT_ARROW':([186,187,189,238,],[237,-17,-19,-18,]),'FROM':([190,],[239,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,133,207,251,280,282,285,301,306,318,320,332,351,352,],[2,181,253,284,303,305,308,317,322,334,335,342,353,354,]),'statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[3,43,3,43,3,3,43,3,3,43,3,3,43,43,3,43,43,3,3,43,3,43,43,43,3,3,43,43,]),'variable_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'constant_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'struct_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'enum_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'interface_declaration':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'print_statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,133,180,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[11,11,11,231,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'return_statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assignment':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expression_statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'match_statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'import_statement':([0,2,133,181,207,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'expression':([0,2,25,30,31,33,38,39,40,47,49,50,51,52,53,54,55,56,57,58,59,60,61,79,85,86,87,88,89,116,133,145,147,148,152,178,181,198,207,237,241,246,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,331,332,334,335,342,351,352,353,354,],[19,19,71,78,80,83,90,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,100,134,139,140,141,142,143,156,19,192,194,195,197,230,19,243,19,270,273,277,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,341,19,19,19,19,19,19,19,19,]),'decorators':([0,2,133,166,181,207,210,222,251,253,262,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[22,22,22,218,22,22,218,218,22,22,218,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'assignment_expression':([0,2,133,181,207,237,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[32,32,32,32,32,271,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'decorator':([0,2,22,133,166,181,207,210,218,222,251,253,262,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[36,36,67,36,36,36,36,36,67,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'lvalue':([0,2,133,181,207,237,251,253,280,282,284,285,301,303,305,306,308,317,318,320,322,332,334,335,342,351,352,353,354,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'mut_opt':([17,166,210,222,262,],[44,220,220,220,220,]),'elements':([39,],[91,]),'struct_initializers':([46,],[97,]),'struct_initializer':([46,150,],[98,196,]),'arguments':([47,61,],[99,113,]),'parameters':([70,121,159,160,202,264,290,311,],[122,161,203,204,247,293,312,326,]),'parameter':([70,121,159,160,163,202,264,290,311,],[123,123,123,123,208,123,123,123,123,]),'implements_clause':([74,],[127,]),'block':([78,180,182,],[132,232,234,]),'import_items':([84,],[137,]),'type':([115,146,157,164,199,206,250,276,279,281,288,291,300,309,329,339,345,],[155,193,201,209,244,252,283,298,302,304,310,313,316,324,340,346,350,]),'interface_list':([128,],[167,]),'enum_variants_opt':([129,],[170,]),'enum_variants':([129,],[171,]),'empty':([129,173,],[172,226,]),'enum_variant_list':([129,],[173,]),'enum_variant':([129,225,],[174,263,]),'interface_members':([130,],[175,]),'interface_member':([130,175,],[176,228,]),'else_clause':([132,234,],[179,266,]),'match_arms':([136,],[183,]),'match_arm_list':([136,],[184,]),'match_arm':([136,236,],[185,267,]),'match_pattern':([136,236,],[186,186,]),'struct_members':([166,222,],[210,262,]),'struct_member':([166,210,222,262,],[211,255,211,255,]),'mut_field_declaration':([166,210,222,262,],[212,212,212,212,]),'field_declaration':([166,210,222,262,],[213,213,213,213,]),'method_declaration':([166,210,222,262,],[214,214,214,214,]),'struct_member_field':([166,210,222,262,],[215,215,215,215,]),'maybe_trailing_comma':([173,],[224,]),'type_list':([199,],[245,]),'inline_statement':([237,],[268,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',30),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',35),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',40),
  ('statement -> variable_declaration','statement',1,'p_statement_declaration','parser.py',45),
  ('statement -> constant_declaration','statement',1,'p_statement_declaration','parser.py',46),
  ('statement -> function_declaration','statement',1,'p_statement_declaration','parser.py',47),
  ('statement -> struct_declaration','statement',1,'p_statement_declaration','parser.py',48),
  ('statement -> enum_declaration','statement',1,'p_statement_declaration','parser.py',49),
  ('statement -> interface_declaration','statement',1,'p_statement_declaration','parser.py',50),
  ('statement -> print_statement','statement',1,'p_statement_declaration','parser.py',51),
  ('statement -> if_statement','statement',1,'p_statement_declaration','parser.py',52),
  ('statement -> return_statement','statement',1,'p_statement_declaration','parser.py',53),
  ('statement -> assignment','statement',1,'p_statement_declaration','parser.py',54),
  ('statement -> expression_statement','statement',1,'p_statement_declaration','parser.py',55),
  ('statement -> match_statement','statement',1,'p_statement_declaration','parser.py',56),
  ('statement -> import_statement','statement',1,'p_statement_declaration','parser.py',57),
  ('match_pattern -> NUMBER','match_pattern',1,'p_match_pattern_number','parser.py',63),
  ('match_pattern -> MINUS NUMBER','match_pattern',2,'p_match_pattern_number','parser.py',64),
  ('match_pattern -> UNDERSCORE','match_pattern',1,'p_match_pattern_wildcard','parser.py',71),
  ('match_statement -> MATCH expression LBRACE match_arms RBRACE','match_statement',5,'p_match_statement','parser.py',79),
  ('match_arms -> match_arm_list','match_arms',1,'p_match_arms','parser.py',84),
  ('match_arms -> match_arm_list COMMA','match_arms',2,'p_match_arms','parser.py',85),
  ('match_arm_list -> match_arm','match_arm_list',1,'p_match_arm_list_single','parser.py',90),
  ('match_arm_list -> match_arm_list COMMA match_arm','match_arm_list',3,'p_match_arm_list_multiple','parser.py',95),
  ('match_arm -> match_pattern FAT_ARROW inline_statement','match_arm',3,'p_match_arm','parser.py',100),
  ('inline_statement -> PRINT DOT INFO LPAREN expression RPAREN','inline_statement',6,'p_inline_statement_print','parser.py',108),
  ('inline_statement -> assignment_expression','inline_statement',1,'p_inline_statement_assignment','parser.py',114),
  ('inline_statement -> expression','inline_statement',1,'p_inline_statement_expression','parser.py',119),
  ('assignment_expression -> lvalue ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',126),
  ('assignment_expression -> lvalue PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',127),
  ('assignment_expression -> lvalue MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',128),
  ('assignment_expression -> lvalue MULTIPLY_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',129),
  ('assignment_expression -> lvalue DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','parser.py',130),
  ('interface_declaration -> INTERFACE IDENTIFIER LBRACE interface_members RBRACE','interface_declaration',5,'p_interface_declaration','parser.py',153),
  ('interface_members -> interface_members interface_member','interface_members',2,'p_interface_members_multiple','parser.py',158),
  ('interface_members -> interface_member','interface_members',1,'p_interface_members_single','parser.py',163),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type SEMICOLON','interface_member',8,'p_interface_member','parser.py',168),
  ('interface_member -> FN IDENTIFIER LPAREN parameters RPAREN SEMICOLON','interface_member',6,'p_interface_member','parser.py',169),
  ('interface_list -> interface_list COMMA IDENTIFIER','interface_list',3,'p_interface_list_multiple','parser.py',179),
  ('interface_list -> IDENTIFIER','interface_list',1,'p_interface_list_single','parser.py',184),
  ('struct_members -> struct_members struct_member','struct_members',2,'p_struct_members_multiple','parser.py',191),
  ('struct_members -> struct_member','struct_members',1,'p_struct_members_single','parser.py',196),
  ('struct_member_field -> mut_opt IDENTIFIER ARROW type SEMICOLON','struct_member_field',5,'p_struct_member_field','parser.py',201),
  ('struct_member -> mut_field_declaration','struct_member',1,'p_struct_member','parser.py',206),
  ('struct_member -> field_declaration','struct_member',1,'p_struct_member','parser.py',207),
  ('struct_member -> method_declaration','struct_member',1,'p_struct_member','parser.py',208),
  ('struct_member -> struct_member_field','struct_member',1,'p_struct_member','parser.py',209),
  ('expression -> IDENTIFIER LBRACE struct_initializers RBRACE','expression',4,'p_expression_struct_instantiation','parser.py',214),
  ('struct_initializers -> struct_initializers COMMA struct_initializer','struct_initializers',3,'p_struct_initializers_multiple','parser.py',219),
  ('struct_initializers -> struct_initializer','struct_initializers',1,'p_struct_initializers_single','parser.py',226),
  ('struct_initializers -> <empty>','struct_initializers',0,'p_struct_initializers_empty','parser.py',233),
  ('struct_initializer -> IDENTIFIER COLON expression','struct_initializer',3,'p_struct_initializer','parser.py',238),
  ('struct_declaration -> STRUCT IDENTIFIER implements_clause LBRACE struct_members RBRACE','struct_declaration',6,'p_struct_declaration','parser.py',243),
  ('implements_clause -> IMPLEMENTS interface_list','implements_clause',2,'p_implements_clause_multiple','parser.py',248),
  ('implements_clause -> <empty>','implements_clause',0,'p_implements_clause_empty','parser.py',253),
  ('method_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',11,'p_method_declaration_with_decorators','parser.py',261),
  ('method_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','method_declaration',10,'p_method_declaration_without_decorators','parser.py',272),
  ('mut_field_declaration -> MUT LET IDENTIFIER ARROW type SEMICOLON','mut_field_declaration',6,'p_mut_field_declaration','parser.py',285),
  ('field_declaration -> LET IDENTIFIER ARROW type SEMICOLON','field_declaration',5,'p_field_declaration','parser.py',290),
  ('enum_declaration -> ENUM IDENTIFIER LBRACE enum_variants_opt RBRACE','enum_declaration',5,'p_enum_declaration','parser.py',298),
  ('enum_variants_opt -> enum_variants','enum_variants_opt',1,'p_enum_variants_opt','parser.py',306),
  ('enum_variants_opt -> empty','enum_variants_opt',1,'p_enum_variants_opt','parser.py',307),
  ('enum_variants -> enum_variant_list maybe_trailing_comma','enum_variants',2,'p_enum_variants','parser.py',316),
  ('enum_variant_list -> enum_variant','enum_variant_list',1,'p_enum_variant_list_single','parser.py',326),
  ('enum_variant_list -> enum_variant_list COMMA enum_variant','enum_variant_list',3,'p_enum_variant_list_multiple','parser.py',331),
  ('maybe_trailing_comma -> COMMA','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',339),
  ('maybe_trailing_comma -> empty','maybe_trailing_comma',1,'p_maybe_trailing_comma','parser.py',340),
  ('enum_variant -> IDENTIFIER LBRACE struct_members RBRACE','enum_variant',4,'p_enum_variant_with_fields','parser.py',346),
  ('enum_variant -> IDENTIFIER','enum_variant',1,'p_enum_variant_without_fields','parser.py',351),
  ('decorators -> decorators decorator','decorators',2,'p_decorators_multiple','parser.py',359),
  ('decorators -> decorator','decorators',1,'p_decorators_single','parser.py',364),
  ('decorator -> AT IDENTIFIER','decorator',2,'p_decorator','parser.py',369),
  ('constant_declaration -> CONST LET IDENTIFIER ARROW type ASSIGN expression SEMICOLON','constant_declaration',8,'p_constant_declaration','parser.py',377),
  ('variable_declaration -> LET mut_opt IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',8,'p_variable_declaration_let_with_type','parser.py',385),
  ('variable_declaration -> LET mut_opt IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',6,'p_variable_declaration_let_without_type','parser.py',396),
  ('variable_declaration -> MUT IDENTIFIER ARROW type ASSIGN expression SEMICOLON','variable_declaration',7,'p_variable_declaration_mut_with_type','parser.py',407),
  ('variable_declaration -> MUT IDENTIFIER ASSIGN expression SEMICOLON','variable_declaration',5,'p_variable_declaration_mut_without_type','parser.py',418),
  ('mut_opt -> MUT','mut_opt',1,'p_mut_opt_mut','parser.py',429),
  ('mut_opt -> <empty>','mut_opt',0,'p_mut_opt_empty','parser.py',434),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',12,'p_function_declaration_async_with_decorators','parser.py',442),
  ('function_declaration -> decorators ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_async_with_decorators_no_return','parser.py',454),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_async_without_decorators','parser.py',466),
  ('function_declaration -> ASYNC FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_async_without_decorators_no_return','parser.py',478),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',11,'p_function_declaration_with_decorators','parser.py',492),
  ('function_declaration -> decorators FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',9,'p_function_declaration_with_decorators_no_return','parser.py',504),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','function_declaration',10,'p_function_declaration_without_decorators','parser.py',516),
  ('function_declaration -> FN IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE','function_declaration',8,'p_function_declaration_without_decorators_no_return','parser.py',528),
  ('expression -> AWAIT expression','expression',2,'p_expression_await','parser.py',540),
  ('print_statement -> PRINT DOT INFO LPAREN expression RPAREN SEMICOLON','print_statement',7,'p_print_statement','parser.py',548),
  ('import_statement -> IMPORT LBRACE import_items RBRACE FROM STRING SEMICOLON','import_statement',7,'p_import_statement','parser.py',556),
  ('import_items -> import_items COMMA IDENTIFIER','import_items',3,'p_import_items_multiple','parser.py',561),
  ('import_items -> IDENTIFIER','import_items',1,'p_import_items_single','parser.py',566),
  ('import_items -> <empty>','import_items',0,'p_import_items_empty','parser.py',571),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',579),
  ('if_statement -> IF expression block else_clause','if_statement',4,'p_if_statement_no_parens','parser.py',584),
  ('if_statement -> IF LPAREN expression RPAREN block else_clause','if_statement',6,'p_if_statement_with_parens','parser.py',591),
  ('else_clause -> ELSE if_statement','else_clause',2,'p_else_clause_if','parser.py',598),
  ('else_clause -> ELSE block','else_clause',2,'p_else_clause_block','parser.py',606),
  ('else_clause -> <empty>','else_clause',0,'p_else_clause_empty','parser.py',613),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','parser.py',622),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','parser.py',623),
  ('assignment -> assignment_expression SEMICOLON','assignment',2,'p_assignment','parser.py',634),
  ('lvalue -> IDENTIFIER','lvalue',1,'p_lvalue_identifier','parser.py',639),
  ('lvalue -> expression DOT IDENTIFIER','lvalue',3,'p_lvalue_member_access','parser.py',644),
  ('expression -> FN LPAREN parameters RPAREN ARROW type LBRACE statements RBRACE','expression',9,'p_expression_lambda','parser.py',652),
  ('expression -> FN LPAREN parameters RPAREN LBRACE statements RBRACE','expression',7,'p_expression_lambda_no_return','parser.py',658),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','parser.py',664),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters_multiple','parser.py',672),
  ('parameters -> parameters COMMA','parameters',2,'p_parameters_multiple','parser.py',673),
  ('parameters -> parameter','parameters',1,'p_parameters_single','parser.py',681),
  ('parameters -> <empty>','parameters',0,'p_parameters_empty','parser.py',686),
  ('parameter -> IDENTIFIER ARROW type','parameter',3,'p_parameter_with_type','parser.py',691),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter_without_type','parser.py',699),
  ('type -> IDENTIFIER','type',1,'p_type','parser.py',707),
  ('type -> type LT type_list GT','type',4,'p_type','parser.py',708),
  ('type_list -> type_list COMMA type','type_list',3,'p_type_list_multiple','parser.py',716),
  ('type_list -> type','type_list',1,'p_type_list_single','parser.py',721),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_array_literal','parser.py',729),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','parser.py',734),
  ('elements -> elements COMMA','elements',2,'p_elements_multiple','parser.py',735),
  ('elements -> expression','elements',1,'p_elements_single','parser.py',743),
  ('elements -> <empty>','elements',0,'p_elements_empty','parser.py',748),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',753),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',754),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',755),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',756),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',757),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',758),
  ('expression -> expression LEQ expression','expression',3,'p_expression_binop','parser.py',759),
  ('expression -> expression GEQ expression','expression',3,'p_expression_binop','parser.py',760),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',761),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',762),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',763),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',764),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',769),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',774),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',779),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',784),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',789),
  ('expression -> IDENTIFIER LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',794),
  ('expression -> expression LPAREN arguments RPAREN','expression',4,'p_expression_function_call','parser.py',795),
  ('expression -> expression DOT IDENTIFIER','expression',3,'p_expression_member_access','parser.py',806),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments_multiple','parser.py',811),
  ('arguments -> expression','arguments',1,'p_arguments_single','parser.py',816),
  ('arguments -> <empty>','arguments',0,'p_arguments_empty','parser.py',821),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',826),
]
