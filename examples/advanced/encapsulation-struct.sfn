// examples/advanced/encapsulation-struct.sfn

struct BankAccount {
    mut balance -> number; // Mutable field

    // Constructor
    fn new(initialBalance -> number) -> BankAccount {
        if initialBalance < 0 {
            throw "Initial balance cannot be negative.";
        }
        return BankAccount { balance: initialBalance };
    }

    // Instance method: Deposit money
    fn deposit(self, amount -> number) -> void {
        if amount <= 0 {
            throw "Deposit amount must be positive.";
        }
        self.balance += amount;
    }

    // Instance method: Withdraw money
    fn withdraw(self, amount -> number) -> void {
        if amount <= 0 {
            throw "Withdrawal amount must be positive.";
        }
        if amount > self.balance {
            throw "Insufficient funds.";
        }
        self.balance -= amount;
    }

    // Instance method: Check balance
    fn getBalance(self) -> number {
        return self.balance;
    }
}

fn main() {
    // Create a new bank account
    let mut account -> BankAccount = BankAccount.new(100);

    // Deposit money
    account.deposit(50);
    print.info("Balance after deposit: {{account.getBalance()}}"); // Outputs: Balance after deposit: 150

    // Withdraw money
    account.withdraw(30);
    print.info("Balance after withdrawal: {{account.getBalance()}}"); // Outputs: Balance after withdrawal: 120

    // Try an invalid operation
    try {
        account.withdraw(200); // This will throw an error
    } catch (err) {
        print.info("Error: {{err}}"); // Outputs: Error: Insufficient funds.
    }
}
