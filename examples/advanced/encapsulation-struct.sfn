// examples/advanced/encapsulation-struct.sfn

struct BankAccount {
    mut balance: number; // Mutable field

    // Constructor with validation
    fn create(initialBalance: number) -> BankAccount {
        if (initialBalance < 0) {
            print.info("Error: Initial balance cannot be negative.");
            return new BankAccount { balance: 0 };
        }
        return new BankAccount { balance: initialBalance };
    }

    // Deposit money into the account
    fn deposit(self, amount: number) -> void {
        if (amount <= 0) {
            print.info("Error: Deposit amount must be positive.");
            return;
        }
        self.balance += amount;
    }

    // Withdraw money from the account
    fn withdraw(self, amount: number) -> void {
        if (amount <= 0) {
            print.info("Error: Withdrawal amount must be positive.");
            return;
        }
        if (amount > self.balance) {
            print.info("Error: Insufficient funds.");
            return;
        }
        self.balance -= amount;
    }

    // Get the current balance
    fn getBalance(self) -> number {
        return self.balance;
    }
}

fn main() -> void {
    // Create a new bank account using the constructor
    let account: BankAccount = BankAccount.create(100);

    // Deposit money
    account.deposit(50);
    print.info("Balance after deposit: {{account.getBalance()}}"); // Should print: 150

    // Withdraw money
    account.withdraw(30);
    print.info("Balance after withdrawal: {{account.getBalance()}}"); // Should print: 120

    // Try an invalid operation
    account.withdraw(200); // This will attempt to withdraw more than the balance
}
