// examples/advanced/encapsulation-struct.sfn

struct BankAccount {
    mut balance: number; // Mutable field

    // Constructor with validation
    fn new(initialBalance: number) -> BankAccount {
        if initialBalance < 0 {
            throw Error("Initial balance cannot be negative.");
        }
        return BankAccount { balance: initialBalance };
    }

    // Deposit money into the account
    fn deposit(self, amount: number) -> void {
        if amount <= 0 {
            throw Error("Deposit amount must be positive.");
        }
        self.balance += amount;
    }

    // Withdraw money from the account
    fn withdraw(self, amount: number) -> void {
        if amount <= 0 {
            throw Error("Withdrawal amount must be positive.");
        }
        if amount > self.balance {
            throw Error("Insufficient funds.");
        }
        self.balance -= amount;
    }

    // Get the current balance
    fn getBalance(self) -> number {
        return self.balance;
    }
}

fn main() -> void {
    // Create a new bank account using the constructor
    let account: BankAccount = BankAccount.new(100);

    // Deposit money
    account.deposit(50);
    print.info("Balance after deposit: {{account.getBalance()}}"); // Should print: 150

    // Withdraw money
    account.withdraw(30);
    print.info("Balance after withdrawal: {{account.getBalance()}}"); // Should print: 120

    // Try an invalid operation
    try {
        account.withdraw(200); // This will throw an error
    } catch (err) {
        print.info("Error: {{err.message}}"); // Should print: Insufficient funds.
    }
}
