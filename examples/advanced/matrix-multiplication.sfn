// examples/advanced/matrix-multiplication.sfn

fn multiply(a: number[][], b: number[][]) -> number[][] {
    let rowsA: number = a.length;
    let colsA: number = a[0].length;
    let colsB: number = b[0].length;

    // Using a range expression (0..rowsA) with functional constructs
    return (0..rowsA).map(fn(row: number) -> number[] {
        return (0..colsB).map(fn(col: number) -> number {
            return (0..colsA).reduce(0, fn(acc: number, k: number) -> number {
                return acc + a[row][k] * b[k][col];
            });
        });
    });
}

fn main() -> void {
    let a: number[][] = [[1, 2], [3, 4]];
    let b: number[][] = [[5, 6], [7, 8]];
    let result: number[][] = multiply(a, b);
    print.info("Result: {{result}}");
}
