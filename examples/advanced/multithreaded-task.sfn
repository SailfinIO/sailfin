// examples/advanced/multithreaded-task.sfn

import { sleep } from "sail/time";

fn computeTask(id -> number) -> string {
    print.info("Task {{id}} started");
    sleep(1000);
    return "Result from Task {{id}}";
}

fn main() {
    let results = parallel [
        fn() -> string { return computeTask(1); },
        fn() -> string { return computeTask(2); },
        fn() -> string { return computeTask(3); },
    ];

    print.info("All tasks completed:");
    for result in results {
        print.info(result);
    }
}
