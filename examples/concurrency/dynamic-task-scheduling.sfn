// examples/concurrency/dynamic-task-scheduling.sfn

let tasks = Channel();

// Add tasks to the queue first
tasks.send(lambda() -> void { print.info("Task 1 executed!"); });
tasks.send(lambda() -> void { print.info("Task 2 executed!"); });
tasks.send(lambda() -> void { print.info("Task 3 executed!"); });

// Spawn a limited worker pool that will process tasks and exit
routine {
    let task1 = await tasks.receive();
    task1();
}

routine {
    let task2 = await tasks.receive();
    task2();
}

routine {
    let task3 = await tasks.receive();
    task3();
}
